<Type Name="XmlWriter" FullName="System.Xml.XmlWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40bc54b53ce3208b7438d85579468de6acaed98e" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52255198" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriter abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XmlWriter = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta un writer che fornisce un modo veloce, non in cache e di tipo forward-only per generare flussi o i file contenenti dati XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlWriter> classe scrive i dati XML in un flusso, file, un lettore di testo o stringa. Supporta il W3C [Extensible Markup Language (XML) 1.0 (fourth edition)](https://www.w3.org/TR/2006/REC-xml-20060816/) e [spazi dei nomi in XML 1.0 (terza edizione)](https://www.w3.org/TR/REC-xml-names/) raccomandazioni.  
  
 I membri del <xref:System.Xml.XmlWriter> classe consentono di:  
  
-   Verificare che i caratteri siano caratteri XML validi e che i nomi di attributi ed elementi siano nomi XML validi.  
  
-   Verificare che il documento XML sia in formato corretto.  
  
-   Codificare i byte binari come Base64 e BinHex e scrive il testo risultante.  
  
-   Passare i valori utilizzando tipi common language runtime anziché stringhe, per evitare di dover eseguire manualmente le conversioni dei valori.  
  
-   Scrivere più documenti in un unico flusso di output.  
  
-   Scrivere nomi validi, qualificati e token del nome.  
  
 Contenuto della sezione:  
  
 [Creazione di un writer XML](#create)   
 [Specifica il formato di output](#output)   
 [Conformità dei dati](#conformance)   
 [Scrittura di elementi](#writing_elements)   
 [Scrittura di attributi](#writing_attributes)   
 [Gestione degli spazi dei nomi](#handling_ns)   
 [Scrittura di dati tipizzati](#writing_types)   
 [Il writer XML di chiusura](#close)   
 [Programmazione asincrona](#async)   
 [Considerazioni sulla sicurezza](#security)  
  
<a name="create"></a>   
## <a name="creating-an-xml-writer"></a>Creazione di un writer XML  
 Per creare un <xref:System.Xml.XmlWriter> dell'istanza, utilizzare il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo). Per specificare il set di funzionalità che si desidera attivare il writer XML, passare un <xref:System.Xml.XmlWriterSettings> per il <xref:System.Xml.XmlWriter.Create%2A> (metodo). In caso contrario, vengono utilizzate le impostazioni predefinite. Vedere il <xref:System.Xml.XmlWriter.Create%2A> pagine per i dettagli di riferimento.  
  
<a name="output"></a>   
## <a name="specifying-the-output-format"></a>Specifica il formato di output  
 Il <xref:System.Xml.XmlWriterSettings> classe include diverse proprietà che controllano il modo in cui <xref:System.Xml.XmlWriter> formattazione dell'output:  
  
|Proprietà|Descrizione|  
|--------------|-----------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Specifica la codifica di testo da utilizzare. Il valore predefinito è `Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|Indica se impostare il rientro per gli elementi. Il valore predefinito è `false` (nessun rientro).|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Specifica la stringa di caratteri da utilizzare quando si esegue il rientro. Il valore predefinito è due spazi.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Specifica la stringa di caratteri da utilizzare per le interruzioni di riga. Il valore predefinito è `\r\n` (ritorno a capo, avanzamento riga).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Specifica come gestire i caratteri di nuova riga.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|Indica se scrivere attributi in una nuova riga. Quando si utilizza questa proprietà, è necessario impostare la proprietà <xref:System.Xml.XmlWriterSettings.Indent%2A> su `true`. Il valore predefinito è `false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Indica se scrivere una dichiarazione XML. Il valore predefinito è `false`.|  
  
 Le proprietà <xref:System.Xml.XmlWriterSettings.Indent%2A> e <xref:System.Xml.XmlWriterSettings.IndentChars%2A> consentono di controllare il modo in cui vengono formattati gli spazi vuoti non significativi. Ad esempio, per far rientrare i nodi elemento:  
  
 [!code-csharp[XmlWriter_v2#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#8)]
 [!code-vb[XmlWriter_v2#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#8)]  
  
 Usare il <xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A> per scrivere ogni attributo in una nuova riga con un livello aggiuntivo di rientro:  
  
 [!code-csharp[XmlWriter_v2#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#9)]
 [!code-vb[XmlWriter_v2#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#9)]  
  
<a name="conformance"></a>   
## <a name="data-conformance"></a>Conformità dei dati  
 Un writer XML utilizza due proprietà dal <xref:System.Xml.XmlWriterSettings> classe per controllare la conformità dei dati:  
  
-   Il <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> proprietà indica al writer XML per controllare i caratteri e generare un <xref:System.Xml.XmlException> eccezione se dei caratteri non compreso nell'intervallo valido, come definito per la W3C.  
  
-   Il <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> proprietà consente di configurare il writer XML per verificare che il flusso di dati letti sia conforme alle regole per un documento XML 1.0 corretto o un frammento di documento, come definito per la W3C. Nella tabella seguente sono descritti i livelli di tre conformità. Il valore predefinito è <xref:System.Xml.ConformanceLevel.Document>. Per informazioni dettagliate, vedere la <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> proprietà e il <xref:System.Xml.ConformanceLevel?displayProperty=nameWithType> enumerazione.  
  
    |Livello|Descrizione|  
    |-----------|-----------------|  
    |<xref:System.Xml.ConformanceLevel.Document>|L'output XML sia conforme alle regole per un documento XML 1.0 corretto e può essere elaborato da qualsiasi processore conforme.|  
    |<xref:System.Xml.ConformanceLevel.Fragment>|L'output XML è conforme alle regole per un frammento di documento XML 1.0 in formato corretto.|  
    |<xref:System.Xml.ConformanceLevel.Auto>|Il writer XML determina quale livello di conformazione controllo da applicare (documento o frammento) in base ai dati in ingresso.|  
  
<a name="writing_elements"></a>   
## <a name="writing-elements"></a>Scrittura di elementi  
 È possibile utilizzare la seguente <xref:System.Xml.XmlWriter> i metodi per scrivere nodi elemento. Per esempi, vedere i metodi elencati.  
  
|Usa|A|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteElementString%2A>|Scrivere un nodo elemento intero, incluso un valore stringa.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>|Per scrivere un valore dell'elemento usando più chiamate al metodo.  Ad esempio, è possibile chiamare <xref:System.Xml.XmlWriter.WriteValue%2A> per scrivere un valore tipizzato, <xref:System.Xml.XmlWriter.WriteCharEntity%2A> per scrivere un'entità di carattere, <xref:System.Xml.XmlWriter.WriteAttributeString%2A> per scrivere un attributo, oppure è possibile scrivere un elemento figlio. Si tratta di una versione più sofisticata del <xref:System.Xml.XmlWriter.WriteElementString%2A> (metodo).<br /><br /> Per chiudere l'elemento, si chiama il <xref:System.Xml.XmlWriter.WriteEndElement%2A> o <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> (metodo).|  
|<xref:System.Xml.XmlWriter.WriteNode%2A>|Per copiare un nodo dell'elemento trovato in corrispondenza della posizione corrente di un' <xref:System.Xml.XmlReader> o <xref:System.Xml.XPath.XPathNavigator> oggetto. Quando viene chiamato, il metodo copia tutto dall'oggetto di origine all'istanza <xref:System.Xml.XmlWriter>.|  
  
<a name="writing_attributes"></a>   
## <a name="writing-attributes"></a>Scrittura di attributi  
 È possibile utilizzare la seguente <xref:System.Xml.XmlWriter> i metodi per scrivere attributi in nodi elemento. Questi metodi sono anche utilizzabile per creare dichiarazioni dello spazio dei nomi in un elemento, come descritto nella sezione successiva.  
  
|Usa|A|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteAttributeString%2A>|Per scrivere un intero nodo attribute, incluso un valore di stringa.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>|Per scrivere il valore dell'attributo usando più chiamate al metodo. Ad esempio, è possibile chiamare <xref:System.Xml.XmlWriter.WriteValue%2A> per scrivere un valore tipizzato. Si tratta di una versione più sofisticata del <xref:System.Xml.XmlWriter.WriteElementString%2A> (metodo).<br /><br /> Per chiudere l'elemento, si chiama il <xref:System.Xml.XmlWriter.WriteEndAttribute%2A> (metodo).|  
|<xref:System.Xml.XmlWriter.WriteAttributes%2A>|Per copiare tutti gli attributi trovati nella posizione corrente di un <xref:System.Xml.XmlReader> oggetto. Gli attributi che vengono scritti dipendono dal tipo di nodo che è attualmente posizionato il lettore:<br /><br /> -Per un nodo attributo, scrive l'attributo corrente e quindi il resto degli attributi fino al tag di chiusura dell'elemento.<br />-Per un nodo elemento, scrive tutti gli attributi contenuti nell'elemento.<br />-Per un nodo della dichiarazione XML, scrive tutti gli attributi nella dichiarazione.<br />-Per tutti gli altri tipi di nodo, il metodo genera un'eccezione.|  
  
<a name="handling_ns"></a>   
## <a name="handling-namespaces"></a>Gestione degli spazi dei nomi  
 Gli spazi dei nomi consentono di qualificare i nomi di elementi e attributi in un documento XML. I prefissi Namespace associano elementi e attributi con spazi dei nomi, che a sua volta associate con i riferimenti URI. Gli spazi dei nomi assicurano l'univocità dei nomi di elementi e attributi in un documento XML.  
  
 Il <xref:System.Xml.XmlWriter> mantiene uno stack dello spazio dei nomi che corrisponde a tutti gli spazi dei nomi definiti nell'ambito dello spazio dei nomi corrente. Quando si scrivono elementi e attributi, è possibile utilizzare gli spazi dei nomi nei seguenti modi:  
  
-   Dichiarare manualmente gli spazi dei nomi usando il <xref:System.Xml.XmlWriter.WriteAttributeString%2A> (metodo). Può essere utile quando si conosce il metodo migliore per ottimizzare il numero di dichiarazioni dello spazio dei nomi. Per un esempio, vedere il <xref:System.Xml.XmlWriter.WriteAttributeString%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> (metodo).  
  
-   Sostituire la dichiarazione dello spazio dei nomi corrente con un nuovo spazio dei nomi. Nel codice seguente, il <xref:System.Xml.XmlWriter.WriteAttributeString%2A> metodo modifica l'URI dello spazio dei nomi per il `"x"` prefisso dal `"123"` a `"abc"`.  
  
     [!code-csharp[XmlWriter_v2#18](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#18)]
     [!code-vb[XmlWriter_v2#18](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#18)]  
  
     Tale codice genererà la stringa XML seguente:  
  
    ```xml  
    <x:root xmlns:x="123">  
      <item xmlns:x="abc" />  
    </x:root>  
    ```  
  
-   Specificare un prefisso dello spazio dei nomi quando si scrivono attributi o elementi. Molti dei metodi usati per scrivere elementi e attributi consentono di eseguire questa operazione. Ad esempio, il <xref:System.Xml.XmlWriter.WriteStartElement%28System.String%2CSystem.String%2CSystem.String%29> metodo scrive un tag di inizio e la associa a un determinato spazio dei nomi e prefisso.  
  
<a name="writing_types"></a>   
## <a name="writing-typed-data"></a>Scrittura di dati tipizzati  
 Il <xref:System.Xml.XmlWriter.WriteValue%2A> metodo accetta un oggetto common language runtime (CLR), converte il valore di input alla relativa rappresentazione di stringa in base alle regole di conversione di XML schema definition language (XSD) dei dati tipo e lo scrive utilizzando il <xref:System.Xml.XmlWriter.WriteString%2A> (metodo). Questo è più facile utilizzare i metodi di <xref:System.Xml.XmlConvert> classe utilizzata per convertire i dati tipizzati in un valore stringa prima della scrittura.  
  
 Durante la scrittura di testo, il valore tipizzato viene serializzato come testo usando il <xref:System.Xml.XmlConvert> regole per quel tipo di schema.  
  
 Per i tipi di dati XSD predefinito che corrispondono ai tipi CLR, vedere il <xref:System.Xml.XmlWriter.WriteValue%2A> (metodo).  
  
 Il <xref:System.Xml.XmlWriter> può anche essere utilizzato per scrivere in un archivio di dati XML. Ad esempio, la classe <xref:System.Xml.XPath.XPathNavigator> può creare un oggetto <xref:System.Xml.XmlWriter> e quindi creare nodi per un oggetto <xref:System.Xml.XmlDocument>. Se l'archivio dati è disponibile, le informazioni sullo schema di <xref:System.Xml.XmlWriter.WriteValue%2A> metodo genera un'eccezione se si prova a convertire un tipo che non è consentito. Se l'archivio dati non dispone di informazioni dello schema disponibili per il processo, il <xref:System.Xml.XmlWriter.WriteValue%2A> metodo considera tutti i valori come un `xsd:anySimpleType` tipo.  
  
<a name="close"></a>   
## <a name="closing-the-xml-writer"></a>Il writer XML di chiusura  
 Quando si usa <xref:System.Xml.XmlWriter> metodi per l'output XML, gli elementi e attributi non vengono scritte solo dopo la chiamata di <xref:System.Xml.XmlWriter.Close%2A> (metodo). Ad esempio, se si usa <xref:System.Xml.XmlWriter> per popolare un' <xref:System.Xml.XmlDocument> dell'oggetto, non sarà in grado di visualizzare gli elementi e scritti gli attributi nel documento di destinazione fino a quando non si chiude il <xref:System.Xml.XmlWriter> istanza.  
  
<a name="async"></a>   
## <a name="asynchronous-programming"></a>Programmazione asincrona  
 La maggior parte del <xref:System.Xml.XmlWriter> metodi hanno controparti asincrone con "Async" alla fine dei relativi nomi di metodo. Ad esempio, l'equivalente di asincrone <xref:System.Xml.XmlWriter.WriteAttributeString%2A> è <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
 Per il <xref:System.Xml.XmlWriter.WriteValue%2A> metodo, che non hanno una controparte asincrona, convertire il valore restituito in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> metodo invece.  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Tenere presente quanto segue quando si lavora con i <xref:System.Xml.XmlWriter> classe:  
  
-   Le eccezioni generate dal <xref:System.Xml.XmlWriter> possono rivelare informazioni sui percorsi che non si desidera venga propagato compito dell'app. L'app deve intercettare le eccezioni ed elaborarli in modo appropriato.  
  
-   <xref:System.Xml.XmlWriter> non convalidare tutti i dati che viene passati per il <xref:System.Xml.XmlWriter.WriteDocType%2A> o <xref:System.Xml.XmlWriter.WriteRaw%2A> (metodo). Non passare i dati arbitrari a questi metodi.  
  
   
  
## Examples  
 Esempio di codice seguente illustra come usare l'API asincrona per generare codice XML.  
  
```csharp  
async Task TestWriter(Stream stream)   
{  
    XmlWriterSettings settings = new XmlWriterSettings();  
    settings.Async = true;  
  
    using (XmlWriter writer = XmlWriter.Create(stream, settings)) {  
        await writer.WriteStartElementAsync("pf", "root", "http://ns");  
        await writer.WriteStartElementAsync(null, "sub", null);  
        await writer.WriteAttributeStringAsync(null, "att", null, "val");  
        await writer.WriteStringAsync("text");  
        await writer.WriteEndElementAsync();  
        await writer.WriteProcessingInstructionAsync("pName", "pValue");  
        await writer.WriteCommentAsync("cValue");  
        await writer.WriteCDataAsync("cdata value");  
        await writer.WriteEndElementAsync();  
        await writer.FlushAsync();  
    }  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">Documenti e dati XML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="xmlWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, chiude questo flusso e quello sottostante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eventuali elementi o attributi lasciati aperti vengono chiusi automaticamente.  
  
> [!NOTE]
>  Quando si usa la <xref:System.Xml.XmlWriter> metodi per l'output XML, gli elementi e attributi non verranno scritti fino a quando non si chiama il <xref:System.Xml.XmlWriter.Close%2A> (metodo). Ad esempio, se si utilizza XmlWriter per popolare un' <xref:System.Xml.XmlDocument>, finché non si chiude il <xref:System.Xml.XmlWriter>, non sarà in grado di osservare gli elementi e scritti gli attributi nel documento di destinazione.  
  
   
  
## Examples  
 L'esempio seguente scrive un nodo XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alcune delle <xref:System.Xml.XmlWriter.Create%2A> overload includono un `settings` parametro che accetta un <xref:System.Xml.XmlWriterSettings> oggetto. È possibile utilizzare questa oggetto:  
  
-   Specificare le funzionalità da supportare nell'oggetto creato <xref:System.Xml.XmlWriter> oggetto.  
  
-   Riutilizzare il <xref:System.Xml.XmlWriterSettings> oggetto per creare più oggetti writer. L'oggetto <xref:System.Xml.XmlWriterSettings> viene copiato e contrassegnato in sola lettura per ogni writer creato. Le modifiche alle impostazioni in un'istanza di <xref:System.Xml.XmlWriterSettings> non influenzano i writer esistenti con le stesse impostazioni. In tal modo è possibile utilizzare le stesse impostazioni per creare più writer con la stessa funzionalità. Oppure è possibile modificare le impostazioni in un'istanza di <xref:System.Xml.XmlWriterSettings> e creare un nuovo writer con un set di funzionalità diverso.  
  
-   Aggiungere funzionalità a un writer XML esistente. Il metodo <xref:System.Xml.XmlWriter.Create%2A> può accettare un altro oggetto <xref:System.Xml.XmlWriter>. Sottostante <xref:System.Xml.XmlWriter> oggetto non deve essere un writer XML creato utilizzando il metodo statico <xref:System.Xml.XmlWriter.Create%2A> (metodo). Ad esempio, è possibile specificare un writer XML definiti dall'utente per aggiungere ulteriori funzionalità.  
  
-   Sfruttare appieno le funzionalità quali un miglior controllo della conformità e la conformità per i [raccomandazione XML 1.0](https://www.w3.org/TR/2006/REC-xml-20060816/) che sono disponibili solo nei <xref:System.Xml.XmlWriter> degli oggetti creati da statico <xref:System.Xml.XmlWriter.Create%2A> (metodo).  
  
 Se si usa un' <xref:System.Xml.XmlWriter.Create%2A> overload che non accetta un <xref:System.Xml.XmlWriterSettings> dell'oggetto, vengono utilizzate le impostazioni del writer predefinito seguente:  
  
|Impostazione|Impostazione predefinita|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Due spazi|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nessuna rimozione)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (ritorno a capo, nuova riga)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
> [!NOTE]
>  Anche se .NET Framework include il <xref:System.Xml.XmlTextWriter> classe, ovvero un'implementazione concreta del <xref:System.Xml.XmlWriter> (classe), è consigliabile creare <xref:System.Xml.XmlWriter> istanze usando il <xref:System.Xml.XmlWriter.Create%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="output">Flusso in cui scrivere. Il <see cref="T:System.Xml.XmlWriter" /> scrive la sintassi del testo di XML 1.0 e la aggiunge al flusso specificato.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" /> utilizzando il flusso specificato.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si utilizza questo overload, un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni predefinite seguenti viene usato per creare il writer XML:  
  
|Impostazione|Impostazione predefinita|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Due spazi|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nessuna rimozione)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (ritorno a capo, nuova riga)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se si desidera specificare le funzionalità da supportare nel writer creato, usare un overload che accetta un <xref:System.Xml.XmlWriterSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni personalizzate.  
  
 Inoltre, XmlWriter scrive sempre un Byte Order Mark (BOM) nel flusso di dati sottostante. Tuttavia, alcuni flussi non devono contenere un carattere BOM. Per omettere il carattere BOM, creare una nuova <xref:System.Xml.XmlWriterSettings> dell'oggetto e impostare la proprietà di codifica sia un nuovo <xref:System.Text.UTF8Encoding> oggetto con il valore booleano nel costruttore impostato su false.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un frammento XML in un flusso di memoria. (Usa il <xref:System.Xml.XmlWriter.Create%28System.IO.Stream%2CSystem.Xml.XmlWriterSettings%29> esegue l'overload, che configura anche le impostazioni nella nuova istanza del writer XML.)  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stream" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextWriter -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.IO.TextWriter" /> in cui si desidera scrivere. La classe <see cref="T:System.Xml.XmlWriter" /> scrive la sintassi del testo di XML 1.0 e la aggiunge alla classe <see cref="T:System.IO.TextWriter" /> specificata.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" /> utilizzando l'oggetto <see cref="T:System.IO.TextWriter" /> specificato.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si utilizza questo overload, un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni predefinite viene usato per creare il writer XML.  
  
|Impostazione|Impostazione predefinita|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Due spazi|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nessuna rimozione)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (ritorno a capo, nuova riga)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se si desidera specificare le funzionalità da supportare nel writer creato, usare un overload che accetta un <xref:System.Xml.XmlWriterSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni personalizzate.  
  
   
  
## Examples  
 L'esempio seguente crea un writer che genera output sulla console.  
  
 [!code-csharp[XmlWriter_v2#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#3)]
 [!code-vb[XmlWriter_v2#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="text" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create outputFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputFileName">File in cui scrivere. La classe <see cref="T:System.Xml.XmlWriter" /> crea un file nella posizione specificata e lo scrive nella sintassi di testo di XML 1.0. Il <paramref name="outputFileName" /> deve essere un percorso del file system.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Xml.XmlWriter" /> utilizzando il nome file specificato.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si utilizza questo overload, un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni predefinite viene usato per creare il writer XML.  
  
|Impostazione|Impostazione predefinita|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Due spazi|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nessuna rimozione)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (ritorno a capo, nuova riga)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se si desidera specificare le funzionalità da supportare nel writer XML creato, usare un overload che accetta un <xref:System.Xml.XmlWriterSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni personalizzate.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Xml.XmlWriter> dell'oggetto e scrive un nodo libro.  
  
 [!code-csharp[XmlWriter_v2#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#2)]
 [!code-vb[XmlWriter_v2#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="url" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.Text.StringBuilder -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Text.StringBuilder" /> in cui scrivere. Il contenuto scritto dalla classe <see cref="T:System.Xml.XmlWriter" /> viene aggiunto alla classe <see cref="T:System.Text.StringBuilder" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" /> utilizzando l'oggetto <see cref="T:System.Text.StringBuilder" /> specificato.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si utilizza questo overload, un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni predefinite viene usato per creare il writer XML.  
  
|Impostazione|Impostazione predefinita|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Due spazi|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nessuna rimozione)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (ritorno a capo, nuova riga)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se si desidera specificare le funzionalità da supportare nel writer XML creato, usare un overload che accetta un <xref:System.Xml.XmlWriterSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni personalizzate.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="builder" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="static member Create : System.Xml.XmlWriter -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="output">Oggetto <see cref="T:System.Xml.XmlWriter" /> da utilizzare come writer sottostante.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Xml.XmlWriter" /> utilizzando l'oggetto <see cref="T:System.Xml.XmlWriter" /> specificato.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" /> che ha eseguito il wrapping dell'oggetto <see cref="T:System.Xml.XmlWriter" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di aggiungere funzionalità a un oggetto sottostante <xref:System.Xml.XmlWriter> oggetto. Sottostante <xref:System.Xml.XmlWriter> oggetto può essere un oggetto creato tramite il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> metodo o un oggetto creato utilizzando il <xref:System.Xml.XmlTextWriter> implementazione.  
  
 Quando si utilizza questo overload, un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni predefinite viene usato per creare il writer XML.  
  
|Impostazione|Impostazione predefinita|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Due spazi|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (nessuna rimozione)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (ritorno a capo, nuova riga)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Se si desidera specificare le funzionalità da supportare nel writer XML creato, usare un overload che accetta un <xref:System.Xml.XmlWriterSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlWriterSettings> oggetto con le impostazioni personalizzate.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="writer" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">Flusso in cui scrivere. Il <see cref="T:System.Xml.XmlWriter" /> scrive la sintassi del testo di XML 1.0 e la aggiunge al flusso specificato.</param>
        <param name="settings">Oggetto <see cref="T:System.Xml.XmlWriterSettings" /> utilizzato per configurare la nuova istanza della classe <see cref="T:System.Xml.XmlWriter" />. Se è <see langword="null" />, viene utilizzato un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni predefinite.  
  
Se si utilizza la classe <see cref="T:System.Xml.XmlWriter" /> con il metodo <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, è necessario utilizzare la proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> per ottenere un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni corrette. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> creato siano corrette.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Xml.XmlWriter" /> utilizzando il flusso e l'oggetto <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XmlWriter scrive sempre un Byte Order Mark (BOM) nel flusso di dati sottostante. Tuttavia, alcuni flussi non devono contenere un carattere BOM. Per omettere il carattere BOM, creare una nuova <xref:System.Xml.XmlWriterSettings> dell'oggetto e impostare la proprietà di codifica sia un nuovo <xref:System.Text.UTF8Encoding> oggetto con il valore booleano nel costruttore impostato su false.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un frammento XML in un flusso di memoria.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stream" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextWriter * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.IO.TextWriter" /> in cui si desidera scrivere. La classe <see cref="T:System.Xml.XmlWriter" /> scrive la sintassi del testo di XML 1.0 e la aggiunge alla classe <see cref="T:System.IO.TextWriter" /> specificata.</param>
        <param name="settings">Oggetto <see cref="T:System.Xml.XmlWriterSettings" /> utilizzato per configurare la nuova istanza della classe <see cref="T:System.Xml.XmlWriter" />. Se è <see langword="null" />, viene utilizzato un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni predefinite.  
  
Se si utilizza la classe <see cref="T:System.Xml.XmlWriter" /> con il metodo <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, è necessario utilizzare la proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> per ottenere un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni corrette. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> creato siano corrette.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" /> utilizzando gli oggetti <see cref="T:System.IO.TextWriter" /> e <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente inserisce una stringa XML.  
  
 [!code-csharp[XmlWriter_v2#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#4)]
 [!code-vb[XmlWriter_v2#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="text" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : string * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (outputFileName, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="outputFileName">File in cui scrivere. La classe <see cref="T:System.Xml.XmlWriter" /> crea un file nella posizione specificata e lo scrive nella sintassi di testo di XML 1.0. Il <paramref name="outputFileName" /> deve essere un percorso del file system.</param>
        <param name="settings">Oggetto <see cref="T:System.Xml.XmlWriterSettings" /> utilizzato per configurare la nuova istanza della classe <see cref="T:System.Xml.XmlWriter" />. Se è <see langword="null" />, viene utilizzato un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni predefinite.  
  
Se si utilizza la classe <see cref="T:System.Xml.XmlWriter" /> con il metodo <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, è necessario utilizzare la proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> per ottenere un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni corrette. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> creato siano corrette.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" /> utilizzando il nome file e l'oggetto <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente crea un <xref:System.Xml.XmlWriter> oggetto con le impostazioni definite.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="url" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.Text.StringBuilder * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Text.StringBuilder" /> in cui scrivere. Il contenuto scritto dalla classe <see cref="T:System.Xml.XmlWriter" /> viene aggiunto alla classe <see cref="T:System.Text.StringBuilder" />.</param>
        <param name="settings">Oggetto <see cref="T:System.Xml.XmlWriterSettings" /> utilizzato per configurare la nuova istanza della classe <see cref="T:System.Xml.XmlWriter" />. Se è <see langword="null" />, viene utilizzato un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni predefinite.  
  
Se si utilizza la classe <see cref="T:System.Xml.XmlWriter" /> con il metodo <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, è necessario utilizzare la proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> per ottenere un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni corrette. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> creato siano corrette.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" /> utilizzando gli oggetti <see cref="T:System.Text.StringBuilder" /> e <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="builder" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.Xml.XmlWriter * System.Xml.XmlWriterSettings -&gt; System.Xml.XmlWriter" Usage="System.Xml.XmlWriter.Create (output, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">Oggetto <see cref="T:System.Xml.XmlWriter" /> da utilizzare come writer sottostante.</param>
        <param name="settings">Oggetto <see cref="T:System.Xml.XmlWriterSettings" /> utilizzato per configurare la nuova istanza della classe <see cref="T:System.Xml.XmlWriter" />. Se è <see langword="null" />, viene utilizzato un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni predefinite.  
  
Se si utilizza la classe <see cref="T:System.Xml.XmlWriter" /> con il metodo <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, è necessario utilizzare la proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> per ottenere un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> con le impostazioni corrette. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> creato siano corrette.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlWriter" /> utilizzando gli oggetti <see cref="T:System.Xml.XmlWriter" /> e <see cref="T:System.Xml.XmlWriterSettings" /> specificati.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" /> che ha eseguito il wrapping dell'oggetto <see cref="T:System.Xml.XmlWriter" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di aggiungere ulteriori funzionalità a un oggetto sottostante <xref:System.Xml.XmlWriter> oggetto. Sottostante <xref:System.Xml.XmlWriter> oggetto può essere un oggetto creato tramite il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> metodo o un oggetto creato utilizzando il <xref:System.Xml.XmlTextWriter> implementazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="writer" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Rilascia le risorse usate dalla classe <see cref="T:System.Xml.XmlWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="xmlWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xmlWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Xml.XmlWriter" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit" Usage="xmlWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scarica il contenuto del buffer nei flussi sottostanti e scarica anche il flusso sottostante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta invece di <xref:System.Xml.XmlWriter.Close%2A> quando si desidera scrivere informazioni nel flusso sottostante senza perdere What ' s ancora nel buffer.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.FlushAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive due frammenti XML.  
  
 [!code-cpp[XmlWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Flush/CPP/write2docs_v2.cpp#1)]
 [!code-csharp[XmlWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Flush/CS/write2docs_v2.cs#1)]
 [!code-vb[XmlWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Flush/VB/write2docs_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberSignature Language="F#" Value="abstract member FlushAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.FlushAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.FlushAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica in modo asincrono il contenuto del buffer nei flussi sottostanti e scarica anche il flusso sottostante.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="Flush" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.Flush%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public abstract string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member LookupPrefix : string -&gt; string" Usage="xmlWriter.LookupPrefix ns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">URI dello spazio dei nomi di cui trovare il prefisso.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, restituisce il prefisso più vicino definito nell'ambito dello spazio dei nomi corrente per l'URI dello spazio dei nomi.</summary>
        <returns>Prefisso corrispondente oppure <see langword="null" /> se non viene individuato un URI dello spazio dei nomi corrispondente nell'ambito corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente scrive un libro.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ns" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriterSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Settings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlWriterSettings ^ Settings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlWriterSettings" Usage="System.Xml.XmlWriter.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> usato per creare questa istanza di <see cref="T:System.Xml.XmlWriter" />.</summary>
        <value>Oggetto <see cref="T:System.Xml.XmlWriterSettings" /> utilizzato per creare questa istanza del writer. Se il writer non è stato creato utilizzando il metodo <see cref="Overload:System.Xml.XmlWriter.Create" />, questa proprietà restituisce <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlWriterSettings> classe viene utilizzata per specificare il set di funzionalità da supportare nell'istanza del writer creato. Il <xref:System.Xml.XmlWriterSettings> oggetto restituito dal <xref:System.Xml.XmlWriter.Settings%2A> proprietà non può essere modificata. Qualsiasi tentativo di modificare i risultati delle singole impostazioni, viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.IDisposable.Dispose" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Xml.XmlWriter> a un'interfaccia <xref:System.IDisposable>.

Questo membro può comportarsi in modo diverso quando viene usata in un progetto libreria di classi portabile. Per altre informazioni, vedere [differenze tra API nella libreria di classi portabile](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/gg597392(v=vs.100)).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributes">
      <MemberSignature Language="C#" Value="public virtual void WriteAttributes (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttributes(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttributes (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttributes(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttributes : System.Xml.XmlReader * bool -&gt; unit&#xA;override this.WriteAttributes : System.Xml.XmlReader * bool -&gt; unit" Usage="xmlWriter.WriteAttributes (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see langword="XmlReader" /> dal quale copiare gli attributi.</param>
        <param name="defattr">
          <see langword="true" /> per copiare gli attributi predefiniti dalla classe <see langword="XmlReader" />; in caso contrario, <see langword="false" />.</param>
        <summary>Quando sottoposto a override in una classe derivata, scrive tutti gli attributi individuati in corrispondenza della posizione corrente nell'oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il reader è posizionato su un `element` nodo `WriteAttributes` copia tutti gli attributi contenuti nell'elemento. Se il reader è posizionato su un `attribute` nodo, questo metodo scrive l'attributo corrente e quindi il resto degli attributi fino al tag di chiusura dell'elemento. Se il reader è posizionato su un `XmlDeclaration` nodo, questo metodo scrive tutti gli attributi nella dichiarazione. Se il reader è posizionato in qualsiasi altro tipo di nodo, questo metodo genera un <xref:System.Xml.XmlException>.  
  
 Se questo metodo viene chiamato utilizzando <xref:System.Xml.XmlValidatingReader>per assicurarsi che qualsiasi contenuto (che è stata estesa da entità) che potrebbe comportare un documento non valido viene sostituito quando scritto codice XML ben formato. Ad esempio, se un attributo include un' `&gt;` entità a cui è stato ampliato, per garantire un documento corretto espansi > viene sostituito quando scritto con `&gt;`.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteAttributesAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente copia tutti gli elementi di output, modifica i nomi di tag in maiuscolo e copia tutti gli attributi non modificati.  
  
 [!code-cpp[XmlWriter.WriteAttributes#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributes/CPP/writeattrs_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributes/CS/writeattrs_v2.cs#1)]
 [!code-vb[XmlWriter.WriteAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributes/VB/writeattrs_v2.vb#1)]  
  
 L'esempio Usa il file, `test1.xml`, come input.  
  
 [!code-xml[XmlWriter.WriteAttributes#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteAttributes/XML/test1.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException">Il lettore non è posizionato in corrispondenza di un nodo <see langword="element" />, <see langword="attribute" /> o <see langword="XmlDeclaration" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAttributesAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAttributesAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAttributesAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAttributesAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttributesAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAttributesAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteAttributesAsync (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see langword="XmlReader" /> dal quale copiare gli attributi.</param>
        <param name="defattr">
          <see langword="true" /> per copiare gli attributi predefiniti dalla classe <see langword="XmlReader" />; in caso contrario, <see langword="false" />.</param>
        <summary>In modo asincrono scrive tutti gli attributi individuati in corrispondenza della posizione corrente nell'oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteAttributes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteAttributes%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttributeString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive un attributo con il valore specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeString : string * string -&gt; unit" Usage="xmlWriter.WriteAttributeString (localName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="value">Valore dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive l'attributo con il nome locale e il valore specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteAttributeString` effettua le operazioni seguenti:  
  
-   Se il valore dell'attributo include le virgolette doppie o singole, vengono sostituiti con `&quot;` e `&apos;` rispettivamente.  
  
-   Se la scrittura di un `xml:space` attributo, il writer verifica se il valore dell'attributo è valido. (I valori validi sono `preserve` o `default`.)  
  
-   Se la scrittura di un `xml:lang` attributo, il writer non verifica che il valore dell'attributo è valido in base alla raccomandazione W3C XML 1.0.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un libro.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il valore dell'attributo <see langword="xml:space" /> o <see langword="xml:lang" /> non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeString : string * string * string -&gt; unit" Usage="xmlWriter.WriteAttributeString (localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="ns">URI dello spazio dei nomi da associare all'attributo.</param>
        <param name="value">Valore dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive un attributo con il nome locale, l'URI dello spazio dei nomi e il valore specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive un attributo con un prefisso di spazio dei nomi definito utente e lo associa allo spazio dei nomi specificato. Se `localName` è "xmlns", questo metodo viene considerato come una dichiarazione dello spazio dei nomi. In questo caso, il `ns` argomento può essere `null`.  
  
 `WriteAttributeString` effettua le operazioni seguenti:  
  
-   Se il valore dell'attributo include le virgolette doppie o singole, vengono sostituiti con `&quot;` e `&apos;` rispettivamente.  
  
-   Se la scrittura di un `xml:space` attributo, il writer verifica se il valore dell'attributo è valido. (I valori validi sono `preserve` o `default`.)  
  
-   Se la scrittura di un `xml:lang` attributo, il writer non verifica che il valore dell'attributo è valido in base alla raccomandazione W3C XML 1.0.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlWriter.WriteAttributeString%2A> metodo per scrivere una dichiarazione dello spazio dei nomi.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il valore dell'attributo <see langword="xml:space" /> o <see langword="xml:lang" /> non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeString : string * string * string * string -&gt; unit" Usage="xmlWriter.WriteAttributeString (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dello spazio dei nomi dell'attributo.</param>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="ns">URI dello spazio dei nomi dell'attributo.</param>
        <param name="value">Valore dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive l'attributo con il prefisso, il nome locale, l'URI dello spazio dei nomi e il valore specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive un attributo con un prefisso di spazio dei nomi definito utente e lo associa allo spazio dei nomi specificato. Se il prefisso "xmlns" quindi questo metodo anche considerato come una dichiarazione dello spazio dei nomi e associa il prefisso dichiarato lo spazio dei nomi che URI fornito nel valore dell'attributo specificato. In questo caso il `ns` argomento può essere `null`.  
  
 `WriteAttributeString` effettua le operazioni seguenti:  
  
-   Se il valore dell'attributo include le virgolette doppie o singole, vengono sostituiti con `&quot;` e `&apos;` rispettivamente.  
  
-   Se la scrittura di un `xml:space` attributo, il writer verifica se il valore dell'attributo è valido. (I valori validi sono `preserve` o `default`.)  
  
-   Se la scrittura di un `xml:lang` attributo, il writer non verifica che il valore dell'attributo è valido in base alla raccomandazione W3C XML 1.0.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlWriter.WriteAttributeString%2A> metodo per scrivere una dichiarazione dello spazio dei nomi.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il valore dell'attributo <see langword="xml:space" /> o <see langword="xml:lang" /> non è valido.</exception>
        <exception cref="T:System.Xml.XmlException">Il <paramref name="localName" /> o <paramref name="ns" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAttributeStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAttributeStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAttributeStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteAttributeStringAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteAttributeStringAsync (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dello spazio dei nomi dell'attributo.</param>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="ns">URI dello spazio dei nomi dell'attributo.</param>
        <param name="value">Valore dell'attributo.</param>
        <summary>Scrive in modo asincrono un attributo con il prefisso, il nome locale, l'URI dello spazio dei nomi e il valore specificati.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteAttributeString" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public abstract void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBase64 : byte[] * int * int -&gt; unit" Usage="xmlWriter.WriteBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di byte da codificare.</param>
        <param name="index">Posizione nel buffer che indica l'inizio dei byte da scrivere.</param>
        <param name="count">Numero di byte da scrivere.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, codifica i byte binari specificati come valori Base64 e scrive il testo risultante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ad esempio, il buffer di byte potrebbe contenere il contenuto binario di un'immagine GIF. Questa ovviamente non è un XML valido. Il `Base64` codifica è progettata per rappresentare le sequenze di byte arbitraria in un formato di testo, costituito da caratteri US-ASCII 65 ([A-Za-z0-9 + / =]) in cui ogni carattere viene codificato 6 bit dei dati binari. Per altre informazioni, vedere le richieste per Comments (RFC) 1521 del [richiesta per il sito Web di commenti](https://www.rfc-editor.org).  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteBase64Async%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlWriter.WriteBase64%2A> metodo scrivere `Base64` dei dati. Il `Base64` i dati sono incorporati all'interno di un `<image>` elemento.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#3)]
 [!code-vb[XmlReader_Read_Write_Binary#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.  
  
oppure 
La lunghezza del buffer meno <paramref name="index" /> è minore di <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBase64Async (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBase64Async(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteBase64Async (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di byte da codificare.</param>
        <param name="index">Posizione nel buffer che indica l'inizio dei byte da scrivere.</param>
        <param name="count">Numero di byte da scrivere.</param>
        <summary>Codifica in modo asincrono i byte binari specificati come valori Base64 e scrive il testo risultante.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteBase64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteBase64%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public virtual void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBinHex : byte[] * int * int -&gt; unit&#xA;override this.WriteBinHex : byte[] * int * int -&gt; unit" Usage="xmlWriter.WriteBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di byte da codificare.</param>
        <param name="index">Posizione nel buffer che indica l'inizio dei byte da scrivere.</param>
        <param name="count">Numero di byte da scrivere.</param>
        <summary>Quando sottoposto a override in una classe derivata, codifica i byte binari specificati come valori <see langword="BinHex" /> e scrive il testo risultante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteBinHexAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlWriter.WriteBinHex%2A> metodo scrivere `BinHex` dei dati. Il `BinHex` i dati sono incorporati all'interno di un `<image>` elemento.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#1)]
 [!code-vb[XmlReader_Read_Write_Binary#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.  
  
oppure 
La lunghezza del buffer meno <paramref name="index" /> è minore di <paramref name="count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBinHexAsync (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBinHexAsync(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteBinHexAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di byte da codificare.</param>
        <param name="index">Posizione nel buffer che indica l'inizio dei byte da scrivere.</param>
        <param name="count">Numero di byte da scrivere.</param>
        <summary>Codifica in modo asincrono i byte binari specificati come valori <see langword="BinHex" /> e scrive il testo risultante.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteBinHex" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteBinHex%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public abstract void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCData(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteCData : string -&gt; unit" Usage="xmlWriter.WriteCData text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da inserire all'interno del blocco CDATA.</param>
        <summary>Quando sottoposto a override in una classe derivata, scrive un blocco &lt;![CDATA[...]]&gt; che contiene il testo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `text` può essere `null` oppure `String.Empty`, questo metodo scrive un blocco CDATA vuoto, ad esempio \<! [ [] CDATA]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il testo genera un documento XML di formato non corretto.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCDataAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCDataAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCDataAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCDataAsync(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteCDataAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCDataAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCDataAsync text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da inserire all'interno del blocco CDATA.</param>
        <summary>Scrive in modo asincrono un blocco &lt;![CDATA[...]]&gt; che contiene il testo specificato.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteCData" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteCData%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCharEntity(char ch);" />
      <MemberSignature Language="F#" Value="abstract member WriteCharEntity : char -&gt; unit" Usage="xmlWriter.WriteCharEntity ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode per cui generare l'entità carattere.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, forza la generazione di un'entità carattere per il valore del carattere Unicode specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive il carattere Unicode in formato di riferimento di entità carattere esadecimale.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteCharEntityAsync%2A>.  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlTextWriter.WriteCharEntity%2A?displayProperty=nameWithType> per un esempio di utilizzo di questo metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il carattere è contenuto nell'intervallo di caratteri della coppia di surrogati, <see langword="0xd800" /> - <see langword="0xdfff" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharEntityAsync (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharEntityAsync(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharEntityAsync (ch As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharEntityAsync(char ch);" />
      <MemberSignature Language="F#" Value="abstract member WriteCharEntityAsync : char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCharEntityAsync : char -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCharEntityAsync ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode per cui generare l'entità carattere.</param>
        <summary>Forza in modo asincrono la generazione di un'entità carattere per il valore del carattere Unicode specificato.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteCharEntity" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteCharEntity%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public abstract void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteChars : char[] * int * int -&gt; unit" Usage="xmlWriter.WriteChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che contiene il testo da scrivere.</param>
        <param name="index">Posizione nel buffer che indica l'inizio del testo da scrivere.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive il testo in un buffer alla volta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è utilizzabile per scrivere grandi quantità di buffer di testo uno alla volta.  
  
 È necessario eseguire una gestione speciale per garantire il `WriteChars` metodo separi i caratteri delle coppie di surrogati in più operazioni di scrittura di buffer. La specifica XML definisce i valori validi per le coppie di surrogati.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteCharsAsync%2A>.  
  
   
  
## Examples  
 [!code-csharp[XmlWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.  
  
oppure 
La lunghezza del buffer meno il parametro <paramref name="index" /> è inferiore al parametro <paramref name="count" />; il risultato della chiamata consiste nella separazione dei caratteri della coppia di surrogati o nella scrittura di una coppia di surrogati non valida.</exception>
        <exception cref="T:System.ArgumentException">Il valore del parametro <paramref name="buffer" /> non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharsAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharsAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharsAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteCharsAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCharsAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCharsAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che contiene il testo da scrivere.</param>
        <param name="index">Posizione nel buffer che indica l'inizio del testo da scrivere.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Scrive in modo asincrono il testo in un buffer alla volta.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteChars" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteChars%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public abstract void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteComment(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteComment : string -&gt; unit" Usage="xmlWriter.WriteComment text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da inserire nel commento.</param>
        <summary>Quando sottoposto a override in una classe derivata, scrive un commento &lt;!--...--&gt; che contiene il testo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `text` può essere `null` oppure `String.Empty`, questo metodo scrive un commento senza contenuto dati, ad esempio \<!--->.  
  
 Se `text` contiene una sequenza non valida di due trattini "-" la <xref:System.Xml.XmlWriter> può generare un' <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> oggetti) o inserire spazi tra i trattini "- -" in modo che il testo è un commento XML valido (<xref:System.Xml.XmlWriter> degli oggetti creati dal <xref:System.Xml.XmlWriter.Create%2A> metodo).  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteCommentAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il testo genera un documento XML di formato non corretto.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCommentAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCommentAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCommentAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCommentAsync(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteCommentAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteCommentAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteCommentAsync text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da inserire nel commento.</param>
        <summary>Scrive in modo asincrono un commento &lt;!--...--&gt; che contiene il testo specificato.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteComment" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteComment%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public abstract void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberSignature Language="F#" Value="abstract member WriteDocType : string * string * string * string -&gt; unit" Usage="xmlWriter.WriteDocType (name, pubid, sysid, subset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome per la dichiarazione DOCTYPE. Questo parametro non deve essere vuoto.</param>
        <param name="pubid">Se questo parametro è non null, viene scritto anche PUBLIC "pubid" "sysid", dove <paramref name="pubid" /> e <paramref name="sysid" /> vengono sostituiti con il valore degli argomenti specificati.</param>
        <param name="sysid">Se il parametro <paramref name="pubid" /> è <see langword="null" /> e il parametro <paramref name="sysid" /> è non null, viene scritto SYSTEM "sysid", dove <paramref name="sysid" /> viene sostituito con il valore di questo argomento.</param>
        <param name="subset">Se diverso da Null, scrive [subset], che viene sostituito dal valore di questo argomento.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive la dichiarazione DOCTYPE con il nome e gli attributi facoltativi specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non verifica la presenza caratteri non validi `pubid`, `sysid` o `subset`. Inoltre non controlla che il sottoinsieme interno sia ben formato.  
  
> [!IMPORTANT]
>  Il <xref:System.Xml.XmlWriter> non convalida i dati che viene passati per il <xref:System.Xml.XmlWriter.WriteDocType%2A> (metodo). Non passare i dati arbitrari a questo metodo.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteDocTypeAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il risultato del valore del parametro <paramref name="name" /> è un documento XML non valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteDocTypeAsync (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteDocTypeAsync (name As String, pubid As String, sysid As String, subset As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteDocTypeAsync(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberSignature Language="F#" Value="abstract member WriteDocTypeAsync : string * string * string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteDocTypeAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteDocTypeAsync (name, pubid, sysid, subset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome per la dichiarazione DOCTYPE. Questo parametro non deve essere vuoto.</param>
        <param name="pubid">Se questo parametro è non null, viene scritto anche PUBLIC "pubid" "sysid", dove <paramref name="pubid" /> e <paramref name="sysid" /> vengono sostituiti con il valore degli argomenti specificati.</param>
        <param name="sysid">Se il parametro <paramref name="pubid" /> è <see langword="null" /> e il parametro <paramref name="sysid" /> è non null, viene scritto SYSTEM "sysid", dove <paramref name="sysid" /> viene sostituito con il valore di questo argomento.</param>
        <param name="subset">Se diverso da Null, scrive [subset], che viene sostituito dal valore di questo argomento.</param>
        <summary>Scrive in modo asincrono la dichiarazione DOCTYPE con il nome e gli attributi facoltativi specificati.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteDocType" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteDocType%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Scrive un elemento che contiene un valore stringa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementString : string * string -&gt; unit" Usage="xmlWriter.WriteElementString (localName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="value">Valore dell'elemento.</param>
        <summary>Scrive un elemento con il nome locale e il valore specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa diversi metodi di scrittura per creare un frammento XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore <paramref name="localName" /> è <see langword="null" /> o una stringa vuota.  
  
oppure 
I valori del parametro non sono validi.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementString : string * string * string -&gt; unit" Usage="xmlWriter.WriteElementString (localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi da associare all'elemento.</param>
        <param name="value">Valore dell'elemento.</param>
        <summary>Scrive un elemento con il nome locale, l'URI dello spazio dei nomi e il valore specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa diversi metodi di scrittura per creare un frammento XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore <paramref name="localName" /> è <see langword="null" /> o una stringa vuota.  
  
oppure 
I valori del parametro non sono validi.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementString : string * string * string * string -&gt; unit" Usage="xmlWriter.WriteElementString (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dell'elemento.</param>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi dell'elemento.</param>
        <param name="value">Valore dell'elemento.</param>
        <summary>Scrive un elemento con il prefisso, il nome locale, l'URI dello spazio dei nomi e il valore specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore <paramref name="localName" /> è <see langword="null" /> o una stringa vuota.  
  
oppure 
I valori del parametro non sono validi.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteElementStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteElementStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteElementStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteElementStringAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteElementStringAsync (prefix, localName, ns, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dell'elemento.</param>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi dell'elemento.</param>
        <param name="value">Valore dell'elemento.</param>
        <summary>Scrive in modo asincrono un elemento con il prefisso, il nome locale, l'URI dello spazio dei nomi e il valore specificati.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteElementString" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteElementString%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndAttribute();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndAttribute : unit -&gt; unit" Usage="xmlWriter.WriteEndAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando se ne esegue l'override in una classe derivata, chiude la precedente chiamata al metodo <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si chiama `WriteStartAttribute`, è possibile chiudere l'attributo con questo metodo.  
  
 È anche possibile chiudere l'attributo chiamando `WriteStartAttribute` anche in questo caso, la chiamata <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, o la chiamata <xref:System.Xml.XmlWriter.WriteEndElement%2A>.  
  
> [!NOTE]
>  Quando si usa la <xref:System.Xml.XmlWriter> metodi per l'output XML, gli elementi e attributi non verranno scritti fino a quando non si chiama il <xref:System.Xml.XmlWriter.Close%2A> (metodo). Ad esempio, se si utilizza XmlWriter per popolare un' <xref:System.Xml.XmlDocument>, finché non si chiude il <xref:System.Xml.XmlWriter>, non sarà in grado di osservare gli elementi e scritti gli attributi nel documento di destinazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteEndAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteEndAttributeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndAttributeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttributeAsync" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteEndAttributeAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndAttributeAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndAttributeAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEndAttributeAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEndAttributeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude in modo asincrono la chiamata <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> precedente.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteEndAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndDocument();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndDocument : unit -&gt; unit" Usage="xmlWriter.WriteEndDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando se ne esegue l'override in una classe derivata, chiude qualsiasi elemento o attributo aperto e riporta il writer allo stato di avvio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Quando si usa la <xref:System.Xml.XmlWriter> metodi per l'output XML, gli elementi e attributi non verranno scritti fino a quando non si chiama il <xref:System.Xml.XmlWriter.Close%2A> (metodo). Ad esempio, se si utilizza XmlWriter per popolare un' <xref:System.Xml.XmlDocument>, finché non si chiude il <xref:System.Xml.XmlWriter>, non sarà in grado di osservare gli elementi e scritti gli attributi nel documento di destinazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteEndDocumentAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il documento XML non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndDocumentAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndDocumentAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEndDocumentAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEndDocumentAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude in modo asincrono qualsiasi elemento o attributo aperto e riporta il writer allo stato di avvio.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteEndDocument" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteEndDocument%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndElement();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndElement : unit -&gt; unit" Usage="xmlWriter.WriteEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, chiude un elemento e visualizza l'ambito dello spazio dei nomi corrispondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'elemento non include alcun contenuto, il tag di fine un breve "/ >" viene scritta; in caso contrario, viene scritto un tag di fine completo.  
  
> [!NOTE]
>  Quando si usa la <xref:System.Xml.XmlWriter> metodi per l'output XML, gli elementi e attributi non verranno scritti fino a quando non si chiama il <xref:System.Xml.XmlWriter.Close%2A> (metodo). Ad esempio, se si usa l'oggetto XmlWriter per popolare un' <xref:System.Xml.XmlDocument>, finché non si chiude il <xref:System.Xml.XmlWriter>, non sarà in grado di osservare gli elementi e scritti gli attributi nel documento di destinazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteEndElementAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlWriter.WriteEndElement%2A> e il <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> metodi.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndElementAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndElementAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEndElementAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEndElementAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude in modo asincrono un elemento e visualizza l'ambito dello spazio dei nomi corrispondente.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteEndElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteEndElement%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public abstract void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEntityRef(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteEntityRef : string -&gt; unit" Usage="xmlWriter.WriteEntityRef name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del riferimento a entità.</param>
        <summary>Se sottoposto a override in una classe derivata, scrive un riferimento a entità con formato <see langword="&amp;name;" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteEntityRefAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEntityRefAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEntityRefAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEntityRefAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEntityRefAsync(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteEntityRefAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteEntityRefAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteEntityRefAsync name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del riferimento a entità.</param>
        <summary>In modo asincrono scrive un riferimento all'entità come <see langword="&amp;name;" />.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteEntityRef" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteEntityRef%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteFullEndElement();" />
      <MemberSignature Language="F#" Value="abstract member WriteFullEndElement : unit -&gt; unit" Usage="xmlWriter.WriteFullEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, chiude un elemento e visualizza l'ambito dello spazio dei nomi corrispondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive sempre il tag di fine completo. Ciò è utile quando si lavora con gli elementi che devono includere un tag di fine completo. Ad esempio, i browser prevedono i blocchi di script HTML per essere chiuso con " \< /script >".  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteFullEndElementAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlWriter.WriteEndElement%2A> e il <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> metodi.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteFullEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteFullEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteFullEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteFullEndElementAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteFullEndElementAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteFullEndElementAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteFullEndElementAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude in modo asincrono un elemento e visualizza l'ambito dello spazio dei nomi corrispondente.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteFullEndElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public virtual void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteName : string -&gt; unit&#xA;override this.WriteName : string -&gt; unit" Usage="xmlWriter.WriteName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome da scrivere.</param>
        <summary>Quando sottoposto a override in una classe derivata, inserisce il nome specificato, verificando che si tratti di un nome valido in base alla raccomandazione W3C XML 1.0, disponibile all'indirizzo http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Xml.XmlTextWriter.Namespaces%2A> è impostata su `true`, `WriteName` controlla anche che il nome sia valido in base al W3C raccomandazione Namespaces in XML.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteNameAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="name" /> non è un nome XML valido oppure il parametro <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNameAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNameAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNameAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNameAsync(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteNameAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNameAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNameAsync name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome da scrivere.</param>
        <summary>Inserisce in modo asincrono il nome specificato, verificando che si tratti di un nome valido in base alla raccomandazione W3C XML 1.0, disponibile all'indirizzo http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteName%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public virtual void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNmToken(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteNmToken : string -&gt; unit&#xA;override this.WriteNmToken : string -&gt; unit" Usage="xmlWriter.WriteNmToken name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome da scrivere.</param>
        <summary>Quando sottoposto a override in una classe derivata, inserisce il nome specificato, verificando che si tratti di un NmToken valido in base alla raccomandazione W3C XML 1.0, disponibile all'indirizzo http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteNmTokenAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="name" /> non è un oggetto NmToken valido oppure il parametro <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNmTokenAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNmTokenAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNmTokenAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNmTokenAsync(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member WriteNmTokenAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNmTokenAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNmTokenAsync name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome da scrivere.</param>
        <summary>Inserisce in modo asincrono il nome specificato, verificando che si tratti di un NmToken valido in base alla raccomandazione W3C XML 1.0, disponibile all'indirizzo http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteNmToken" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteNmToken%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNode">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Copia tutti gli elementi dell'oggetto di origine nell'istanza corrente del writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNode : System.Xml.XmlReader * bool -&gt; unit&#xA;override this.WriteNode : System.Xml.XmlReader * bool -&gt; unit" Usage="xmlWriter.WriteNode (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> da cui leggere.</param>
        <param name="defattr">
          <see langword="true" /> per copiare gli attributi predefiniti dalla classe <see langword="XmlReader" />; in caso contrario, <see langword="false" />.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, copia tutto il contenuto del lettore nel writer e sposta il lettore all'inizio del successivo elemento di pari livello.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente illustra i tipi di nodo supportati per questo metodo.  
  
|NodeType|Comportamento WriteNode|  
|--------------|------------------------|  
|`None`|Scrive tutti i nodi indipendentemente dal tipo. Vale a dire, il writer utilizza il <xref:System.Xml.XmlReader> e scrive tutti i nodi letti, inclusi gli attributi, istruzioni di elaborazione, commenti e così via.<br /><br /> Questa situazione si verifica quando il <xref:System.Xml.XmlReader> è in uno stato iniziale. (Il <xref:System.Xml.XmlReader.ReadState%2A?displayProperty=nameWithType> restituisce proprietà `ReaderState.Initial`).|  
|`Element`|Scrive il nodo dell'elemento e tutti i nodi attributo.|  
|`Attribute`|Nessuna operazione. In sostituzione usare <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> o <xref:System.Xml.XmlWriter.WriteAttributeString%2A>.|  
|`Text`|Scrive il nodo testo.|  
|`CDATA`|Scrive il nodo della sezione CDATA.|  
|`EntityReference`|Scrive il nodo di riferimento di entità.|  
|`ProcessingInstruction`|Scrive il nodo istruzione di elaborazione.|  
|`Comment`|Scrive il nodo di commento.|  
|`DocumentType`|Scrive il nodo di tipo di documento.|  
|`SignificantWhitespace`|Scrive il nodo di spazi vuoti significativi.|  
|`Whitespace`|Scrive il nodo con spazi vuoti.|  
|`EndElement`|Scrive il tag di fine dell'elemento.|  
|`EndEntity`|Nessuna operazione.|  
|`XmlDeclaration`|Scrive il nodo della dichiarazione XML.|  
  
 Se il lettore è nello stato iniziale, questo metodo passa il lettore al fine del file. Se il lettore è già alla fine del file o in uno stato chiuso, questo metodo non è operativo.  
  
 Il codice c# seguente consente di copiare un intero documento di input XML nella console:  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
XmlWriter writer = XmlWriter.Create(Console.Out);  
writer.WriteNode(reader, false);  
```  
  
 Se si sono spostati nel nodo radice e sono posizionati in un' posizione nel documento nell'esempio c# seguente scrive in modo corretto i nodi.  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
reader.Read(); // Read PI  
reader.Read(); // Read Comment  
reader.Read(); // Read DOCType  
XmlWriter writer = XmlWriter.Create(Console.Out);  
while (!reader.EOF){  
  writer.WriteNode(reader, false);  
 }  
```  
  
 Se il lettore è configurato per restituire gli spazi vuoti e il writer è configurato per impostare un rientro di output, `WriteNode` può produrre output strano. Verranno essenzialmente visualizzati double di formattazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente scrive i nodi libro e il cognome nella console.  
  
 [!code-cpp[XmlWriter.WriteNode#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteNode/CPP/writenode.cpp#1)]
 [!code-csharp[XmlWriter.WriteNode#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteNode/CS/writenode.cs#1)]
 [!code-vb[XmlWriter.WriteNode#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteNode/VB/writenode.vb#1)]  
  
 L'esempio Usa il file, `books.xml`, come input.  
  
 [!code-xml[XmlWriter.WriteNode#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteNode/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="reader" /> contiene caratteri non validi.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (navigator As XPathNavigator, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNode : System.Xml.XPath.XPathNavigator * bool -&gt; unit&#xA;override this.WriteNode : System.Xml.XPath.XPathNavigator * bool -&gt; unit" Usage="xmlWriter.WriteNode (navigator, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> da cui copiare.</param>
        <param name="defattr">
          <see langword="true" /> per copiare gli attributi predefiniti; in caso contrario, <see langword="false" />.</param>
        <summary>Copia tutti gli elementi dall'oggetto <see cref="T:System.Xml.XPath.XPathNavigator" /> nel writer. La posizione di <see cref="T:System.Xml.XPath.XPathNavigator" /> resta invariata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente mostra il supportato `XPath` tipi di nodo per questo metodo.  
  
|XPathNodeType|Comportamento WriteNode|  
|-------------------|------------------------|  
|`Root`|Scrive tutti i nodi indipendentemente dal tipo. Vale a dire, il writer utilizza il <xref:System.Xml.XPath.XPathNavigator> e scrive tutti i nodi dal nodo radice (inclusi gli attributi, istruzioni di elaborazione, commenti e così via).|  
|`Element`|Scrive il nodo dell'elemento e tutti i nodi attributo.|  
|`Attribute`|Nessuna operazione. In sostituzione usare <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> o <xref:System.Xml.XmlWriter.WriteAttributeString%2A>.|  
|`Text`|Scrive il nodo testo.|  
|`Namespace`|Nessuna operazione. Usare la <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> o <xref:System.Xml.XmlWriter.WriteAttributeString%2A> metodo per scrivere la dichiarazione dello spazio dei nomi.|  
|`ProcessingInstruction`|Scrive il nodo istruzione di elaborazione.|  
|`Comment`|Scrive il nodo di commento.|  
|`SignificantWhitespace`|Scrive il nodo di spazi vuoti significativi.|  
|`Whitespace`|Scrive il nodo con spazi vuoti.|  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlWriter.WriteNode%2A> metodo per copiare il primo nodo libro da un documento e scriverlo nella console.  
  
 [!code-csharp[XmlWriteNode_nav#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriteNode_nav/CS/XmlWriteNode_nav.cs#1)]
 [!code-vb[XmlWriteNode_nav#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriteNode_nav/VB/XmlWriteNode_nav.vb#1)]  
  
 L'esempio Usa il file books. XML come input.  
  
 [!code-xml[XPathXMLExamples#1](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/books.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="navigator" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNodeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <summary>Copia in modo asincrono tutti gli elementi dell'oggetto di origine nell'istanza corrente del writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteNode%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNodeAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNodeAsync : System.Xml.XmlReader * bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNodeAsync (reader, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> da cui leggere.</param>
        <param name="defattr">
          <see langword="true" /> per copiare gli attributi predefiniti dalla classe <see langword="XmlReader" />; in caso contrario, <see langword="false" />.</param>
        <summary>Copia in modo asincrono tutto il contenuto del lettore nel writer e sposta il lettore sul successivo elemento di pari livello.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteNode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteNode%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (navigator As XPathNavigator, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberSignature Language="F#" Value="abstract member WriteNodeAsync : System.Xml.XPath.XPathNavigator * bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteNodeAsync : System.Xml.XPath.XPathNavigator * bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteNodeAsync (navigator, defattr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> da cui copiare.</param>
        <param name="defattr">
          <see langword="true" /> per copiare gli attributi predefiniti; in caso contrario, <see langword="false" />.</param>
        <summary>Copia in modo asincrono tutti gli elementi dall'oggetto <see cref="T:System.Xml.XPath.XPathNavigator" /> al writer. La posizione di <see cref="T:System.Xml.XPath.XPathNavigator" /> resta invariata.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteNode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteNode%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public abstract void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteProcessingInstruction : string * string -&gt; unit" Usage="xmlWriter.WriteProcessingInstruction (name, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome dell'istruzione di elaborazione.</param>
        <param name="text">Testo da includere nell'istruzione di elaborazione.</param>
        <summary>Quando sottoposto a override in una classe derivata, scrive un'istruzione di elaborazione con uno spazio tra il nome e il testo, come segue: &lt;?name text?&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per scrivere la dichiarazione XML (anziché <xref:System.Xml.XmlWriter.WriteStartDocument%2A>). Ciò può comportare l'attributo di codifica viene scritta in modo corretto. Ad esempio, il codice c# seguente comporta un documento XML non valido perché la codifica predefinita è UTF-8.  
  
```csharp  
XmlWriter writer = XmlWriter.Create("output.xml");  
writer.WriteProcessingInstruction("xml", "version='1.0' encoding='UTF-16'");  
writer.WriteStartElement("root");  
writer.Close();  
```  
  
 Se `text` può essere `null` oppure `String.Empty`, questo metodo consente di scrivere un `ProcessingInstruction` senza dati, ad esempio \<? nome? >.  
  
 Se il testo contiene una sequenza non valida di "? >", il <xref:System.Xml.XmlWriter> può generare un' <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> oggetti) o inserire spazi "? > "per evitare la scrittura di codice XML non valido (<xref:System.Xml.XmlWriter> degli oggetti creati dal <xref:System.Xml.XmlWriter.Create%2A> (metodo)).  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteProcessingInstructionAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il testo genera un documento XML di formato non corretto.  
  
 <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.  
  
Questo metodo viene utilizzato per creare una dichiarazione XML quando il metodo <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> è stato già chiamato.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstructionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteProcessingInstructionAsync (name As String, text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteProcessingInstructionAsync(System::String ^ name, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteProcessingInstructionAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteProcessingInstructionAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteProcessingInstructionAsync (name, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome dell'istruzione di elaborazione.</param>
        <param name="text">Testo da includere nell'istruzione di elaborazione.</param>
        <summary>Scrive in modo asincrono un'istruzione di elaborazione con uno spazio tra il nome e il testo, come segue: &lt;?name text?&gt;.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteProcessingInstruction" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteQualifiedName : string * string -&gt; unit&#xA;override this.WriteQualifiedName : string * string -&gt; unit" Usage="xmlWriter.WriteQualifiedName (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale da scrivere.</param>
        <param name="ns">URI dello spazio dei nomi del nome.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive il nome completo dello spazio dei nomi. Questo metodo esegue la ricerca del prefisso incluso nell'ambito dello spazio dei nomi specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `ns` mappe dello spazio dei nomi predefinito corrente, senza il prefisso viene generato.  
  
 Quando si scrivono i valori di attributo, questo metodo genera un prefisso se `ns` non viene trovato. Quando si scrive il contenuto dell'elemento, genera un'eccezione se `ns` non viene trovato.  
  
> [!NOTE]
>  Se una classe derivata dal <xref:System.Xml.XmlWriter> non esegue l'override di questo metodo `localName` non vengono controllati per essere un nome valido XML W3C. In tal caso, prima di chiamare questo metodo, la validità della stringa può essere controllata da <xref:System.Xml.XmlReader.IsName%2A> (metodo).  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteQualifiedNameAsync%2A>.  
  
   
  
## Examples  
 L'esempio scrive l'elemento seguente:  
  
```xml  
<root xmlns:x="urn:abc">  
  <item href="#x:test"/>  
</root>  
```  
  
 [!code-csharp[XmlWriter_v2#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#5)]
 [!code-vb[XmlWriter_v2#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> è <see langword="null" /> o <see langword="String.Empty" />.  
  
 <paramref name="localName" /> non è un nome valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteQualifiedNameAsync (localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteQualifiedNameAsync(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteQualifiedNameAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteQualifiedNameAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteQualifiedNameAsync (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale da scrivere.</param>
        <param name="ns">URI dello spazio dei nomi del nome.</param>
        <summary>Scrive in modo asincrono il nome completo dello spazio dei nomi. Questo metodo esegue la ricerca del prefisso incluso nell'ambito dello spazio dei nomi specificato.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteQualifiedName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive manualmente markup non elaborato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(System::String ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRaw : string -&gt; unit" Usage="xmlWriter.WriteRaw data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Stringa contenente il testo da scrivere.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive manualmente markup non elaborato in base a una stringa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non effettua l'escape di caratteri speciali.  
  
> [!IMPORTANT]
>  Il <xref:System.Xml.XmlWriter> non convalida i dati che viene passati per il <xref:System.Xml.XmlWriter.WriteRaw%2A> (metodo). Non passare i dati arbitrari a questo metodo.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlTextWriter.WriteRaw%2A?displayProperty=nameWithType> per un esempio di utilizzo di questo metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="data" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteRaw : char[] * int * int -&gt; unit" Usage="xmlWriter.WriteRaw (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che contiene il testo da scrivere.</param>
        <param name="index">Posizione all'interno del buffer che indica l'inizio del testo da scrivere.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive manualmente markup non elaborato in base a un buffer di caratteri.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non effettua l'escape di caratteri speciali.  
  
> [!IMPORTANT]
>  Il <xref:System.Xml.XmlWriter> non convalida i dati che viene passati per il <xref:System.Xml.XmlWriter.WriteRaw%2A> (metodo). Non passare i dati arbitrari a questo metodo.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.  
  
oppure 
La lunghezza del buffer meno <paramref name="index" /> è minore di <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRawAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <summary>Scrive manualmente in modo asincrono markup non elaborato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteRaw%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (data As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(System::String ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRawAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteRawAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteRawAsync data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Stringa contenente il testo da scrivere.</param>
        <summary>Scrive manualmente in modo asincrono markup non elaborato in base a una stringa.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteRaw" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteRaw%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteRawAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteRawAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteRawAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che contiene il testo da scrivere.</param>
        <param name="index">Posizione all'interno del buffer che indica l'inizio del testo da scrivere.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Scrive manualmente in modo asincrono markup non elaborato in base a un buffer di caratteri.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteRaw" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteRaw%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive l'inizio di un attributo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartAttribute : string -&gt; unit" Usage="xmlWriter.WriteStartAttribute localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'attributo.</param>
        <summary>Scrive l'inizio di un attributo con il nome locale specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di scrivere un valore usando più metodi di scrittura.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="member this.WriteStartAttribute : string * string -&gt; unit" Usage="xmlWriter.WriteStartAttribute (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="ns">URI dello spazio dei nomi dell'attributo.</param>
        <summary>Scrive l'inizio di un attributo con il nome locale e l'URI dello spazio dei nomi specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di una versione più avanzata della <xref:System.Xml.XmlWriter.WriteAttributeString%2A> che consente di scrivere un valore di attributo usando più metodi di scrittura, ad esempio <xref:System.Xml.XmlWriter.WriteString%2A>, <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>e così via.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlTextWriter.WriteStartAttribute%2A?displayProperty=nameWithType> per un esempio di utilizzo di questo metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartAttribute : string * string * string -&gt; unit" Usage="xmlWriter.WriteStartAttribute (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dello spazio dei nomi dell'attributo.</param>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="ns">URI dello spazio dei nomi dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive l'inizio di un attributo con il prefisso, il nome locale e l'URI dello spazio dei nomi specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di scrivere un valore usando più metodi di scrittura.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteStartAttributeAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteStartAttributeAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartAttributeAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartAttributeAsync : string * string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartAttributeAsync : string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartAttributeAsync (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dello spazio dei nomi dell'attributo.</param>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="ns">URI dello spazio dei nomi dell'attributo.</param>
        <summary>Scrive in modo asincrono l'inizio di un attributo con il prefisso, il nome locale e l'URI dello spazio dei nomi specificati.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteStartAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteStartAttribute%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive la dichiarazione XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument();" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocument : unit -&gt; unit" Usage="xmlWriter.WriteStartDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive la dichiarazione XML in base alla versione "1.0".</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il livello di codifica del documento è determinato dalla modalità di implementazione del writer. Ad esempio, se un' <xref:System.Text.Encoding> viene specificato nell'oggetto il `XmlTextWriter` costruttore, questa impostazione determina il valore dell'attributo di codifica. Questo metodo non crea un attributo autonomo.  
  
 Quando si `WriteStartDocument` viene chiamato il writer verifica che cosa si sta scrivendo un documento XML ben formato. Ad esempio, verifica che la dichiarazione XML è il primo nodo, che uno e un solo elemento di primo livello è presente e così via. Se non viene chiamato questo metodo, il writer si presuppone un frammento XML viene scritto e applica regole di primo livello.  
  
 Se `WriteStartDocument` è stato chiamato e quindi il <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> metodo viene utilizzato per creare un'altra dichiarazione XML, verrà generata un'eccezione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument(bool standalone);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocument : bool -&gt; unit" Usage="xmlWriter.WriteStartDocument standalone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Se il parametro ha valore <see langword="true" />, viene scritto "standalone=yes"; se il parametro ha valore <see langword="false" />, viene scritto "standalone=no".</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive la dichiarazione XML in base alla versione "1.0" e all'attributo standalone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il livello di codifica del documento è determinato dalla modalità di implementazione del writer. Ad esempio, se un' <xref:System.Text.Encoding> viene specificato nell'oggetto il `XmlTextWriter` costruttore, questa impostazione determina il valore dell'attributo di codifica.  
  
 Quando si `WriteStartDocument` viene chiamato, il writer verifica che cosa si sta scrivendo un documento XML ben formato. Ad esempio, verifica che la dichiarazione XML è il primo nodo, che uno e un solo elemento di primo livello è presente e così via. Se non viene chiamato questo metodo, il writer si presuppone un frammento XML viene scritto e applica regole di primo livello.  
  
 Se `WriteStartDocument` è stato chiamato e quindi il <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> metodo viene utilizzato per creare un'altra dichiarazione XML, verrà generata un'eccezione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocumentAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <summary>Scrive in modo asincrono la dichiarazione XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocumentAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartDocumentAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartDocumentAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive in modo asincrono la dichiarazione XML con la versione "1.0".</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteStartDocument" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync (standalone As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync(bool standalone);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartDocumentAsync : bool -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartDocumentAsync : bool -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartDocumentAsync standalone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Se il parametro ha valore <see langword="true" />, viene scritto "standalone=yes"; se il parametro ha valore <see langword="false" />, viene scritto "standalone=no".</param>
        <summary>Scrive in modo asincrono la dichiarazione XML con la versione "1.0" e l'attributo standalone.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteStartDocument" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive il tag di inizio specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartElement : string -&gt; unit" Usage="xmlWriter.WriteStartElement localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive un tag di inizio con il nome locale specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive un nodo XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="member this.WriteStartElement : string * string -&gt; unit" Usage="xmlWriter.WriteStartElement (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi da associare all'elemento. Se questo spazio dei nomi si trova già all'interno dell'ambito ed è associato a un prefisso, il writer scriverà automaticamente anche tale prefisso.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive il tag di inizio specificato e lo associa allo spazio dei nomi indicato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo aver chiamato questo metodo è possibile scrivere gli attributi, o creare contenuti usando <xref:System.Xml.XmlWriter.WriteComment%2A>, <xref:System.Xml.XmlWriter.WriteString%2A>, o `WriteStartElement` per gli elementi figlio. È possibile chiudere l'elemento con uno <xref:System.Xml.XmlWriter.WriteEndElement%2A> o <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>. Ad esempio, il codice c# riportato di seguito:  
  
```csharp  
writer.WriteStartElement("item",null);  
writer.WriteString("some text");  
writer.WriteEndElement();  
```  
  
 Genera l'output seguente:  
  
```xml  
<item>some text</item>  
```  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartElement : string * string * string -&gt; unit" Usage="xmlWriter.WriteStartElement (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dello spazio dei nomi dell'elemento.</param>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi da associare all'elemento.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive il tag di inizio specificato e lo associa allo spazio dei nomi e al prefisso specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un frammento XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Nel buffer è presente un carattere XML valido che non è valido per la codifica di output. Ad esempio, se la codifica di output è ASCII, è necessario utilizzare solo caratteri dell'intervallo compreso tra 0 e 127 per nomi di elemento e di attributo. Il carattere non valido potrebbe essere nell'argomento di questo metodo o in un argomento di metodi precedenti che stanno scrivendo nel buffer. Tali caratteri vengono preceduti, quando possibile, da caratteri di escape costituiti da riferimenti a un'entità carattere, ad esempio in nodi di testo o valori di attributo. Tuttavia, il riferimento a un'entità di caratteri non è consentita in nomi di elemento e di attributo, commenti, istruzioni di elaborazione o sezioni CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartElementAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartElementAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartElementAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartElementAsync : string * string * string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStartElementAsync : string * string * string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStartElementAsync (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dello spazio dei nomi dell'elemento.</param>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi da associare all'elemento.</param>
        <summary>Scrive in modo asincrono il tag di inizio specificato e lo associa allo spazio dei nomi e al prefisso specificati.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteStartElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteStartElement%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteState : System.Xml.WriteState" Usage="System.Xml.XmlWriter.WriteState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene lo stato del writer.</summary>
        <value>Uno dei valori di <see cref="T:System.Xml.WriteState" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteString(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteString : string -&gt; unit" Usage="xmlWriter.WriteString text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da scrivere.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive il contenuto di testo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteString` effettua le operazioni seguenti:  
  
-   I caratteri `&`, `<`, e `>` vengono sostituiti con `&amp;`, `&lt;`, e `&gt;`, rispettivamente.  
  
-   Il comportamento predefinito di un <xref:System.Xml.XmlWriter> creato utilizzando <xref:System.Xml.XmlWriter.Create%2A> consiste nel generare un <xref:System.ArgumentException> quando si tenta di scrivere i valori di carattere x-0x1F l'intervallo compreso tra 0 (esclusi i caratteri di spazio vuoto 0xD, 0xA e 0x9). I caratteri XML non validi possono essere scritti creando la <xref:System.Xml.XmlWriter> con il <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> proprietà impostata su `false`. Questa operazione comporterà i caratteri sostituiti con entità di caratteri numerici (&\#0; a & #0x1F). Inoltre, un' <xref:System.Xml.XmlTextWriter> creato con il `new` operatore sostituirà i caratteri non validi con entità di caratteri numerici per impostazione predefinita.  
  
 **Nota** Microsoft non consiglia la prassi di scrittura di caratteri XML non validi poiché molte applicazioni che utilizzano XML non sono progettate per gestire i caratteri non validi.  
  
-   Se `WriteString` viene chiamato nel contesto di un valore di attributo, le virgolette doppie e singole vengono sostituite con `&quot;` e `&apos;` rispettivamente.  
  
 Ad esempio, stringa di input `test<item>test` viene scritto come  
  
```  
test&lt;item&gt;test  
```  
  
 Se `text` può essere `null` o `String.Empty`, questo metodo scrive un nodo di testo senza contenuto di dati.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteStringAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente scrive un nodo XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La stringa di testo contiene una coppia di surrogati non valida.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStringAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStringAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStringAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStringAsync(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteStringAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteStringAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteStringAsync text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da scrivere.</param>
        <summary>Scrive in modo asincrono il contenuto di testo specificato.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteString" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteString%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberSignature Language="F#" Value="abstract member WriteSurrogateCharEntity : char * char -&gt; unit" Usage="xmlWriter.WriteSurrogateCharEntity (lowChar, highChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">Surrogato basso. Deve essere un valore compreso tra 0xDC00 e 0xDFFF.</param>
        <param name="highChar">Surrogato alto. Deve essere un valore compreso tra 0xD800 e 0xDBFF.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, genera e scrive l'entità carattere surrogata per la coppia di caratteri surrogati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è disponibile solo nei sistemi che utilizzano la codifica UTF-16.  
  
 L'entità carattere surrogata è scritto in formato esadecimale. L'intervallo per i caratteri surrogati è #x10 10000 a & x10FFFF. La formula seguente viene utilizzata per generare l'entità carattere surrogata: (`highChar` -0xD800) * 0x400 + (`lowChar` -0xDC00) + 0x10000.  
  
 Per il codice HTML e XML, il set di caratteri del documento (e pertanto la notazione di riferimenti a caratteri numerici) si basa su UCS [ISO 10646]. Riferimento un singolo carattere numerico in un documento di origine potrebbe pertanto in alcuni casi corrispondono a due unità di 16 bit in una stringa (un surrogato alto e un surrogato basso). Queste unità di 16 bit sono definite da una coppia di surrogati.  
  
 Per ulteriori informazioni riguardanti i surrogati o caratteri, fare riferimento alla sezione 3.7 di Unicode 3.0/Unicode 2.0 standard che si trova in http://www.unicode.org, o sezione 2.2 della raccomandazione W3C XML 1.0 disponibile all'indirizzo http://www.w3.org/TR/REC-xml#charsets.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stata passata una coppia di caratteri surrogati non valida.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteSurrogateCharEntityAsync (lowChar As Char, highChar As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteSurrogateCharEntityAsync(char lowChar, char highChar);" />
      <MemberSignature Language="F#" Value="abstract member WriteSurrogateCharEntityAsync : char * char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteSurrogateCharEntityAsync : char * char -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteSurrogateCharEntityAsync (lowChar, highChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">Surrogato basso. Deve essere un valore compreso tra 0xDC00 e 0xDFFF.</param>
        <param name="highChar">Surrogato alto. Deve essere un valore compreso tra 0xD800 e 0xDBFF.</param>
        <summary>Genera in modo asincrono e scrive l'entità carattere surrogata per la coppia di caratteri surrogati.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteSurrogateCharEntity" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteSurrogateCharEntity%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteValue">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Scrive un unico valore di tipo semplice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlWriter.WriteValue%2A> metodo accetta tipi semplici valori di common language runtime (CLR), li converte nelle rispettive rappresentazioni di stringa secondo le regole di conversione di XML schema definition language (XSD) dei dati tipo e li scrive utilizzando il <xref:System.Xml.XmlWriter.WriteString%2A> metodo. Ciò consente alla pipeline con minimo una nuova analisi overhead quando si passano dati tra i valori di tipo semplice <xref:System.Xml.XPath.XPathDocument>, <xref:System.Xml.XmlReader>, e <xref:System.Xml.XmlWriter> oggetti. Questa possibilità è utile anche quando si lavora con tipi semplici CLR e un <xref:System.Xml.XmlWriter> istanza. È possibile chiamare il <xref:System.Xml.XmlWriter.WriteValue%2A> metodo per scrivere il valore tipizzato anziché usare i metodi di <xref:System.Xml.XmlConvert> classe utilizzata per convertire i dati tipizzati in un valore stringa prima della scrittura.  
  
 Per le operazioni asincrone, convertire il valore restituito di <xref:System.Xml.XmlWriter.WriteValue%2A> a una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 La tabella seguente illustra l'impostazione predefinita i tipi di dati XSD che corrispondono ai tipi CLR.  
  
 Se l'oggetto CLR è un tipo di elenco, ad esempio <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList> o <xref:System.Collections.ICollection>, verrà considerato una matrice del tipo di valore.  
  
|Tipo CLR|Tipo di dati XSD predefinito|  
|--------------|---------------------------|  
|<xref:System.Boolean?displayProperty=nameWithType>|xsd:boolean|  
|<xref:System.Byte?displayProperty=nameWithType>**|xsd:integer|  
|Matrice <xref:System.Byte?displayProperty=nameWithType>|xsd:base64Binary|  
|<xref:System.Char?displayProperty=nameWithType>**|xsd:string|  
|<xref:System.DateTime?displayProperty=nameWithType>|xsd:dateTime|  
|<xref:System.Decimal?displayProperty=nameWithType>|xsd:decimal|  
|<xref:System.Double?displayProperty=nameWithType>|xsd:double|  
|<xref:System.Int16?displayProperty=nameWithType>**|xsd:integer|  
|<xref:System.Int32?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Int64?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Single?displayProperty=nameWithType>|xsd:float|  
|<xref:System.String?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.TextReader?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.BinaryReader?displayProperty=nameWithType>|xsd:base64Binary|  
  
 **Questi tipi non sono conformi a CLS. Ma non sono corrispondenti <xref:System.Xml.XmlWriter.WriteValue%2A> metodi.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(bool value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : bool -&gt; unit&#xA;override this.WriteValue : bool -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.Boolean" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.Boolean" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Quando viene chiamato il metodo <xref:System.Xml.XmlWriter.WriteValue%2A>, il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base alle regole dei tipi di dati XSD (XML Schema) e li scrive utilizzando il metodo <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : DateTime -&gt; unit&#xA;override this.WriteValue : DateTime -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.DateTime" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Quando viene chiamato il metodo <xref:System.Xml.XmlWriter.WriteValue%2A>, il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base alle regole dei tipi di dati XSD (XML Schema) e li scrive utilizzando il metodo <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
   
  
## Examples  
 L'esempio seguente scrive un nodo libro utilizzando i dati tipizzati.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : DateTimeOffset -&gt; unit&#xA;override this.WriteValue : DateTimeOffset -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.DateTimeOffset" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.DateTimeOffset" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : decimal -&gt; unit&#xA;override this.WriteValue : decimal -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.Decimal" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.Decimal" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Quando viene chiamato il metodo <xref:System.Xml.XmlWriter.WriteValue%2A>, il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base alle regole dei tipi di dati XSD (XML Schema) e li scrive utilizzando il metodo <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(double value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : double -&gt; unit&#xA;override this.WriteValue : double -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.Double" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.Double" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Quando viene chiamato il metodo <xref:System.Xml.XmlWriter.WriteValue%2A>, il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base alle regole dei tipi di dati XSD (XML Schema) e li scrive utilizzando il metodo <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
   
  
## Examples  
 L'esempio seguente scrive un nodo libro utilizzando i dati tipizzati.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(int value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : int -&gt; unit&#xA;override this.WriteValue : int -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.Int32" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.Int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Quando viene chiamato il metodo <xref:System.Xml.XmlWriter.WriteValue%2A>, il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base alle regole dei tipi di dati XSD (XML Schema) e li scrive utilizzando il metodo <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(long value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : int64 -&gt; unit&#xA;override this.WriteValue : int64 -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.Int64" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.Int64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Quando viene chiamato il metodo <xref:System.Xml.XmlWriter.WriteValue%2A>, il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base alle regole dei tipi di dati XSD (XML Schema) e li scrive utilizzando il metodo <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : obj -&gt; unit&#xA;override this.WriteValue : obj -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valore dell'oggetto da scrivere.  
  
 **Nota** In .NET Framework 3.5 questo metodo accetta <see cref="T:System.DateTimeOffset" /> come parametro.</param>
        <summary>Scrive il valore dell'oggetto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime (CLR) e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Se l'oggetto CLR è un tipo di elenco, ad esempio <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList>, o <xref:System.Collections.ICollection>, viene considerato come una matrice del tipo di valore. Il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base al tipo di dati XSD (XML Schema) delle regole e li scrive utilizzando il <xref:System.Xml.XmlWriter.WriteString%2A> (metodo).  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(float value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : single -&gt; unit&#xA;override this.WriteValue : single -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Numero a virgola mobile e precisione singola da scrivere.</param>
        <summary>Scrive un numero a virgola mobile e precisione singola.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Quando viene chiamato il metodo <xref:System.Xml.XmlWriter.WriteValue%2A>, il <xref:System.Xml.XmlWriter> converte il valore nelle relative rappresentazioni di stringa in base alle regole dei tipi di dati XSD (XML Schema) e li scrive utilizzando il metodo <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, convertire il valore restituito di questo metodo in una stringa e usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : string -&gt; unit&#xA;override this.WriteValue : string -&gt; unit" Usage="xmlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.String" /> da scrivere.</param>
        <summary>Scrive un valore <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta l'oggetto common language runtime e converte il valore di input nel tipo di output desiderato utilizzando le regole di conversione tipo di dati XML Schema definition language (XSD).  
  
 Se <xref:System.Xml.XmlWriter.WriteValue%2A> viene chiamato più volte in successione, i valori non sono delimitati da uno spazio. È necessario chiamare il metodo <xref:System.Xml.XmlWriter.WriteWhitespace%2A> tra le chiamate a <xref:System.Xml.XmlWriter.WriteValue%2A> per inserire uno spazio vuoto. Passare un tipo di matrice il <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> overload per scrivere una matrice di valori distinct.  
  
 Se questo metodo viene chiamato su un <xref:System.Xml.XmlWriter> tale output di solo testo, il valore tipizzato viene serializzato come testo dell'istanza.  
  
 Per le operazioni asincrone, usare il <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato specificato un valore non valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public abstract void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteWhitespace(System::String ^ ws);" />
      <MemberSignature Language="F#" Value="abstract member WriteWhitespace : string -&gt; unit" Usage="xmlWriter.WriteWhitespace ws" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">Stringa di caratteri spazio vuoto.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, scrive lo spazio specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato per formattare manualmente il documento.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlWriter.WriteWhitespaceAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La stringa contiene caratteri di non spazio.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteWhitespaceAsync (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteWhitespaceAsync (ws As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteWhitespaceAsync(System::String ^ ws);" />
      <MemberSignature Language="F#" Value="abstract member WriteWhitespaceAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteWhitespaceAsync : string -&gt; System.Threading.Tasks.Task" Usage="xmlWriter.WriteWhitespaceAsync ws" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">Stringa di caratteri spazio vuoto.</param>
        <summary>Scrive in modo asincrono lo spazio vuoto specificato.</summary>
        <returns>Attività che rappresenta l'operazione asincrona <see langword="WriteWhitespace" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlWriter.WriteWhitespace%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlWriter" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlWriterSettings.Async" /> su <see langword="true" />. In questo caso, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlWriterSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlWriter.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene l'ambito <see langword="xml:lang" /> corrente.</summary>
        <value>Ambito <see langword="xml:lang" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà consente a un componente scoprire in quale stato di un altro componente ha lasciato il writer. Ad esempio, ad esempio un componente desidera informare l'altro per generare il testo della Guida linguaggio. Le informazioni sulla lingua viene comunicati scrivendo un `xml:lang` attributo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlWriter.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando sottoposto a override in una classe derivata, ottiene un'enumerazione <see cref="T:System.Xml.XmlSpace" /> che rappresenta l'ambito <see langword="xml:space" /> corrente.</summary>
        <value>Oggetto <see langword="XmlSpace" /> che rappresenta l'ambito <see langword="xml:space" /> corrente.  
  
 <list type="table"><listheader><term> Valore 
 </term><description> Significato 
 </description></listheader><item><term><see langword="None" /></term><description> Valore predefinito qualora non esista alcun ambito <see langword="xml:space" />.  
  
 </description></item><item><term><see langword="Default" /></term><description> L'ambito corrente è <see langword="xml:space" />="default".  
  
 </description></item><item><term><see langword="Preserve" /></term><description> L'ambito corrente è <see langword="xml:space" />="preserve".  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciò consente a un componente scoprire in quale stato ha lasciato il writer in un altro componente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlWriter" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
  </Members>
</Type>