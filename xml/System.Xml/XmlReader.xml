<Type Name="XmlReader" FullName="System.Xml.XmlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e3d6e8c09f67f39f8167c55b3e732a5a93bcc2db" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="it-IT" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53233640" /></Metadata><TypeSignature Language="C#" Value="public abstract class XmlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XmlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{debuggerDisplayProxy}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un lettore che fornisce accesso veloce, non in cache e di tipo forward-only ai dati XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReader> fornisce l'accesso in sola lettura di tipo forward-only ai dati XML in un documento o flusso. Questa classe è conforme per la W3C [Extensible Markup Language (XML) 1.0 (fourth edition)](https://www.w3.org/TR/2006/REC-xml-20060816/) e il [spazi dei nomi in XML 1.0 (terza edizione)](https://www.w3.org/TR/REC-xml-names/) raccomandazioni.  
  
 <xref:System.Xml.XmlReader> i metodi consentono di spostarsi tra i dati XML e leggere il contenuto di un nodo. Le proprietà della classe riflettono il valore del nodo corrente, ovvero in cui il lettore è posizionato. Il <xref:System.Xml.XmlReader.ReadState%2A> valore della proprietà indica lo stato corrente del lettore XML. Ad esempio, la proprietà è impostata su <xref:System.Xml.ReadState.Initial?displayProperty=nameWithType> per il <xref:System.Xml.XmlReader.Read%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.ReadState.Closed?displayProperty=nameWithType> dal <xref:System.Xml.XmlReader.Close%2A?displayProperty=nameWithType> (metodo). <xref:System.Xml.XmlReader> offre anche i controlli di conformità dei dati e la convalida rispetto a una DTD o schema.  
  
 <xref:System.Xml.XmlReader> Usa un modello pull per recuperare i dati. Questo modello:  
  
-   Semplifica la gestione dello stato da un perfezionamento naturale, dall'alto in basso procedura.  
  
-   Supporta più flussi di input e dei livelli.  
  
-   Consente al client di fornire al parser un buffer in cui verrà scritti direttamente la stringa e quindi evita la necessità di una copia della stringa aggiuntiva.  
  
-   Supporta l'elaborazione selettiva. Il client può ignorare gli elementi ed elaborare quelle che sono di particolare interesse per l'applicazione. È anche possibile impostare le proprietà in anticipo per gestire la modalità di elaborazione nel flusso XML (ad esempio, la normalizzazione).  
  
 Contenuto della sezione:  
  
 [Creazione di un lettore XML](#xmlreader_create)   
 [Convalida di dati XML](#xmlreader_validate)   
 [Conformità dei dati](#xmlreader_data)   
 [Esplorazione dei nodi](#xmlreader_nodes)   
 [Elementi XML durante la lettura](#xmlreader_elements)   
 [Attributi XML durante la lettura](#xmlreader_attributes)   
 [Contenuto XML durante la lettura](#xmlreader_content)   
 [La conversione in tipi CLR](#xmlreader_clr)   
 [Programmazione asincrona](#xmlreader_async)   
 [Considerazioni sulla sicurezza](#xmlreader_security)  
  
<a name="xmlreader_create"></a>   
## <a name="creating-an-xml-reader"></a>Creazione di un lettore XML  
 Usare la <xref:System.Xml.XmlReader.Create%2A> metodo per creare un <xref:System.Xml.XmlReader> istanza.  
  
 Anche se .NET Framework fornisce le implementazioni concrete del <xref:System.Xml.XmlReader> classe, ad esempio il <xref:System.Xml.XmlTextReader>, <xref:System.Xml.XmlNodeReader>e il <xref:System.Xml.XmlValidatingReader> classi, si consiglia di utilizzare le classi specializzate solo in questi scenari:  
  
-   Quando si desidera leggere un sottoalbero del DOM XML da un <xref:System.Xml.XmlNode> dell'oggetto, usare il <xref:System.Xml.XmlNodeReader> classe. (Tuttavia, questa classe non supporta la convalida DTD o nello schema).  
  
-   Se è necessario espandere entità su richiesta, non si desidera il testo contenuto normalizzata o non si desidera attributi restituiti predefiniti, usare il <xref:System.Xml.XmlTextReader> classe.  
  
 Per specificare il set di funzionalità che si desidera attivare il lettore XML, passare un <xref:System.Xml.XmlReaderSettings?displayProperty=nameWithType> dell'oggetto per il <xref:System.Xml.XmlReader.Create%2A> (metodo). È possibile utilizzare un'unica <xref:System.Xml.XmlReaderSettings?displayProperty=nameWithType> dell'oggetto per creare più lettori con la stessa funzionalità o modificare il <xref:System.Xml.XmlReaderSettings?displayProperty=nameWithType> oggetto per creare un nuovo lettore con un set di funzionalità diverso. È possibile aggiungere facilmente funzionalità a un lettore esistente.  
  
 Se non si usa un <xref:System.Xml.XmlReaderSettings?displayProperty=nameWithType> dell'oggetto, vengono usate le impostazioni predefinite. Vedere il <xref:System.Xml.XmlReader.Create%2A> pagina di riferimento per i dettagli.  
  
 <xref:System.Xml.XmlReader> Genera un <xref:System.Xml.XmlException> errori di analisi in XML. Dopo che viene generata un'eccezione, lo stato del lettore non è prevedibile. Ad esempio, il tipo di nodo restituito può essere diverso dal tipo di nodo effettivo del nodo corrente. Usare il <xref:System.Xml.XmlReader.ReadState%2A> proprietà per controllare se il reader è in stato di errore.  
  
<a name="xmlreader_validate"></a>   
## <a name="validating-xml-data"></a>Convalida di dati XML  
 Per definire la struttura di un documento XML e relativi elementi-relazioni, i tipi di dati e i vincoli di contenuto, usare un document type definition (DTD) o schema di XML Schema definition language (XSD). Un documento XML venga considerato corretto se soddisfa i requisiti sintattici definiti dal [W3C XML 1.0 Recommendation](https://www.w3.org/TR/2006/REC-xml-20060816/). Viene considerato valido se è ben formata e inoltre conforme ai vincoli definiti dalla relativa DTD o nello schema. (Vedere il [W3C XML Schema Part 1: Le strutture](https://www.w3.org/TR/xmlschema-1/) e il [W3C XML Schema Part 2: Tipi di dati](https://www.w3.org/TR/xmlschema-2/) raccomandazioni.) Pertanto, anche se tutti i documenti XML validi sono corretti, non tutti i documenti XML corretti sono validi.  
  
 È possibile convalidare i dati rispetto a una DTD, un Schema XSD inline o uno Schema XSD archiviati in un' <xref:System.Xml.Schema.XmlSchemaSet> oggetto (una cache); questi scenari sono descritti nel <xref:System.Xml.XmlReader.Create%2A> pagina di riferimento. <xref:System.Xml.XmlReader> non supporta la convalida dello schema XML-Data Reduced (XDR).  
  
 Si usano le impostazioni seguenti nel <xref:System.Xml.XmlReaderSettings> classe per specificare il tipo di convalida, se presente, il <xref:System.Xml.XmlReader> istanza supporta.  
  
|Utilizzare questa opzione <xref:System.Xml.XmlReaderSettings> membro|Per specificare|  
|-----------------------------------------------------------------------------------------------------------------------------------------------------------|----------------|  
|Proprietà<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> |Se si desidera consentire l'elaborazione della DTD. Per impostazione predefinita l'elaborazione della DTD non è consentita.|  
|Proprietà<xref:System.Xml.XmlReaderSettings.ValidationType%2A> |Indica se il lettore deve convalidare i dati e il tipo di convalida da eseguire (DTD o schema). Per impostazione predefinita non è prevista alcuna convalida dei dati.|  
|Evento<xref:System.Xml.XmlReaderSettings.ValidationEventHandler> |Un gestore eventi per la ricezione di informazioni sugli eventi di convalida. Se non si fornisce un gestore eventi, viene generata un'eccezione <xref:System.Xml.XmlException> per il primo errore di convalida.|  
|Proprietà<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> |Opzioni di convalida aggiuntiva tramite la <xref:System.Xml.Schema.XmlSchemaValidationFlags> membri dell'enumerazione:<br /><br /> -   `AllowXmlAttributes`-Consente gli attributi XML (`xml:*`) nei documenti di istanza anche quando non sono definiti nello schema. Gli attributi vengono convalidati in base al relativo tipo di dati. Vedere il <xref:System.Xml.Schema.XmlSchemaValidationFlags> pagina di riferimento per l'impostazione da usare in scenari specifici. (Disabilitato per impostazione predefinita).<br />-   `ProcessIdentityConstraints` -Elabora i vincoli identity (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, `xs:unique`) incontrati durante la convalida. (Abilitata per impostazione predefinita).<br />-   `ProcessSchemaLocation` -Consente di elaborare gli schemi specificati dal `xsi:schemaLocation` o `xsi:noNamespaceSchemaLocation` attributo. (Abilitata per impostazione predefinita).<br />-   `ProcessInlineSchema`: Schemi XML inline processo durante la convalida. (Disabilitato per impostazione predefinita).<br />-   `ReportValidationWarnings`-Consente di segnalare gli eventi se si verifica un avviso di convalida. Un avviso, in genere, viene emesso quando non si dispone di una DTD o di un XML Schema in base al quale convalidare un determinato elemento o attributo. L'evento <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> viene utilizzato per la notifica. (Disabilitato per impostazione predefinita).|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Oggetto <xref:System.Xml.Schema.XmlSchemaSet> da usare per la convalida.|  
|Proprietà<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> |Il <xref:System.Xml.XmlResolver> per la risoluzione e l'accesso alle risorse esterne. Ciò può includere le entità esterne, ad esempio DTD e schemi e qualsiasi `xs:include` o `xs:import` elementi contenuti nel XML Schema. Se non si specifica un <xref:System.Xml.XmlResolver>, il <xref:System.Xml.XmlReader> Usa un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente.|  
  
<a name="xmlreader_data"></a>   
## <a name="data-conformance"></a>Conformità dei dati  
 Lettori XML che vengono creati il <xref:System.Xml.XmlReader.Create%2A> per impostazione predefinita, metodo soddisfa i requisiti di conformità seguenti:  
  
-   Le nuove righe e il valore di attributo vengono normalizzati in base al W3C [XML 1.0 Recommendation](https://www.w3.org/TR/2006/REC-xml-20060816/).  
  
-   Tutte le entità vengono espansi automaticamente.  
  
-   Gli attributi predefiniti dichiarati nella definizione del tipo di documento vengono aggiunti sempre anche quando il lettore non convalida.  
  
-   Dichiarazione di prefisso XML mappato all'URI dello spazio dei nomi XML corretto è consentita.  
  
-   I nomi di notazione in un'unica `NotationType` dichiarazione dell'attributo e `NmTokens` in una singola `Enumeration` dichiarazione di attributo sono distinti.  
  
 Usare questi <xref:System.Xml.XmlReaderSettings> da abilitare le proprietà per specificare il tipo di conformità viene controllato è:  
  
|Utilizzare questa opzione <xref:System.Xml.XmlReaderSettings> proprietà|A|Impostazione predefinita|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|-------------|  
|Proprietà<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A> |Abilitare o disabilitare i controlli per le operazioni seguenti:<br /><br /> -Caratteri siano compresi nell'intervallo dei caratteri XML validi, come definito per il [2.2 Characters](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets) sezione della raccomandazione W3C XML 1.0.<br />-Tutti i nomi XML vengono, come definito per il [2.3 i costrutti sintattici comuni](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) sezione della raccomandazione W3C XML 1.0.<br /><br /> Quando questa proprietà è impostata su `true` (impostazione predefinita), un <xref:System.Xml.XmlException> eccezione viene generata se il file XML contiene caratteri non validi oppure nomi XML non validi (ad esempio, un nome di elemento inizia con un numero).|Carattere e il controllo dei nomi è abilitata.<br /><br /> Se si imposta la proprietà <xref:System.Xml.XmlReaderSettings.CheckCharacters%2A> su `false`, il controllo dei caratteri per i riferimenti a entità carattere viene disattivato. Se il lettore elabora dati di tipo text, verificare sempre che i nomi XML vengono, indipendentemente da questa impostazione. **Nota:**  La raccomandazione XML 1.0 richiede la conformità a livello di documento in presenza di una DTD. Pertanto, se il lettore è configurato per supportare <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>, ma i dati XML contengono una definizione di tipo di documento (DTD), un <xref:System.Xml.XmlException> viene generata un'eccezione.|  
|Proprietà<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> |Scegliere il livello di conformità per applicare:<br /><br /> -   <xref:System.Xml.ConformanceLevel.Document>. È conforme alle regole per un [documento XML 1.0 corretto](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed).<br />-   <xref:System.Xml.ConformanceLevel.Fragment>. È conforme alle regole per un frammento di documento in formato corretto che può essere utilizzato come un [entità analizzata esterna](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities).<br />-   <xref:System.Xml.ConformanceLevel.Auto>. È conforme al livello scelto dal lettore.<br /><br /> Se i dati non sono conformi, un <xref:System.Xml.XmlException> viene generata un'eccezione.|<xref:System.Xml.ConformanceLevel.Document>|  
  
<a name="xmlreader_nodes"></a>   
## <a name="navigating-through-nodes"></a>Esplorazione dei nodi  
 Il nodo corrente è il nodo XML in cui è attualmente posizionato il lettore XML. Tutti i <xref:System.Xml.XmlReader> metodi eseguono operazioni in relazione a questo nodo e tutti <xref:System.Xml.XmlReader> proprietà riflettono il valore del nodo corrente.  
  
 I metodi seguenti rendono più semplice per spostarsi tra i nodi e analizzare i dati.  
  
|Utilizzare questa opzione <xref:System.Xml.XmlReaderSettings> (metodo)|A|  
|-----------------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|<xref:System.Xml.XmlReader.Read%2A>|Leggere il primo nodo e passare attraverso il nodo di un flusso in un momento. Tali chiamate vengono in genere eseguite all'interno di un `while` ciclo.<br /><br /> Usare il <xref:System.Xml.XmlReader.NodeType%2A> proprietà da ottenere il tipo (ad esempio, attributo, commento, elemento e così via) del nodo corrente.|  
|<xref:System.Xml.XmlReader.Skip%2A>|Ignora gli elementi figlio del nodo corrente e sposta al nodo successivo.|  
|<xref:System.Xml.XmlReader.MoveToContent%2A> e <xref:System.Xml.XmlReader.MoveToContentAsync%2A>|Ignorare i nodi non di contenuto e passare al nodo di contenuto successivo oppure alla fine del file.<br /><br /> I nodi non di contenuto comprendono <xref:System.Xml.XmlNodeType.ProcessingInstruction>, <xref:System.Xml.XmlNodeType.DocumentType>, <xref:System.Xml.XmlNodeType.Comment>, <xref:System.Xml.XmlNodeType.Whitespace>, e <xref:System.Xml.XmlNodeType.SignificantWhitespace>.<br /><br /> Nodi di contenuto includono testo, diverso da spazi vuoti <xref:System.Xml.XmlNodeType.CDATA>, <xref:System.Xml.XmlNodeType.EntityReference> , e <xref:System.Xml.XmlNodeType.EndEntity>.|  
|<xref:System.Xml.XmlReader.ReadSubtree%2A>|Leggere un elemento e tutti i relativi figli e restituire un nuovo <xref:System.Xml.XmlReader> istanza impostata su <xref:System.Xml.ReadState.Initial?displayProperty=nameWithType>.<br /><br /> Questo metodo è utile per la creazione di limiti attorno agli elementi XML; ad esempio, se si desidera passare dati a un altro componente per l'elaborazione e si desidera limitare la quantità di dati può accedere il componente.|  
  
 Vedere il <xref:System.Xml.XmlReader.Read%2A?displayProperty=nameWithType> pagina di riferimento per un esempio di spostamento all'interno di un nodo di un flusso di testo alla volta e la visualizzazione del tipo di ogni nodo.  
  
 Le sezioni seguenti descrivono come è possibile leggere tipi specifici di dati, ad esempio elementi, attributi e dati tipizzati.  
  
<a name="xmlreader_elements"></a>   
## <a name="reading-xml-elements"></a>Elementi XML durante la lettura  
 Nella tabella seguente sono elencati i metodi e proprietà che il <xref:System.Xml.XmlReader> classe fornisce per l'elaborazione degli elementi. Dopo che il tipo <xref:System.Xml.XmlReader> è stato posizionato in corrispondenza di un elemento, le proprietà del nodo, quale <xref:System.Xml.XmlReader.Name%2A>, riflettono i valori dell'elemento. Oltre ai membri descritti di seguito, è possibile usare qualsiasi metodo e proprietà generale della classe <xref:System.Xml.XmlReader> per elaborare gli elementi. Il metodo <xref:System.Xml.XmlReader.ReadInnerXml%2A> può essere utilizzato, ad esempio, per leggere il contenuto di un elemento.  
  
> [!NOTE]
>  Vedere la sezione 3.1 del [W3C XML 1.0 Recommendation](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-starttags) per le definizioni di tag di inizio, fine, tag e i tag di elemento vuoto.  
  
|Utilizzare questa opzione <xref:System.Xml.XmlReader> membro|A|  
|---------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|Metodo <xref:System.Xml.XmlReader.IsStartElement%2A>|Verificare se il nodo corrente è un tag di inizio o un tag di elemento vuoto.|  
|Metodo <xref:System.Xml.XmlReader.ReadStartElement%2A>|Verificare che il nodo corrente è un elemento e far avanzare il lettore al nodo successivo (chiamate <xref:System.Xml.XmlReader.IsStartElement%2A> seguita da <xref:System.Xml.XmlReader.Read%2A>).|  
|Metodo <xref:System.Xml.XmlReader.ReadEndElement%2A>|Verificare che il nodo corrente è un tag di fine e far avanzare il lettore al nodo successivo.|  
|Metodo <xref:System.Xml.XmlReader.ReadElementString%2A>|Leggere un elemento di solo testo.|  
|Metodo <xref:System.Xml.XmlReader.ReadToDescendant%2A>|Passare il lettore XML al successivo elemento discendente (figlio) che ha il nome specificato.|  
|Metodo <xref:System.Xml.XmlReader.ReadToNextSibling%2A>|Far avanzare il lettore XML sull'elemento di pari livello successivo con il nome specificato.|  
|Proprietà<xref:System.Xml.XmlReader.IsEmptyElement%2A> |Controllare se l'elemento corrente dispone di un tag di fine dell'elemento. Ad esempio:<br /><br /> -   `<item num="123"/>` (<xref:System.Xml.XmlReader.IsEmptyElement%2A> è `true`.)<br />-   `<item num="123"> </item>` (<xref:System.Xml.XmlReader.IsEmptyElement%2A> è `false`, anche se il contenuto dell'elemento è vuoto.)|  
  
 Per un esempio di leggere il contenuto di testo degli elementi, vedere il <xref:System.Xml.XmlReader.ReadString%2A> (metodo). Nell'esempio seguente consente di elaborare elementi usando un `while` ciclo.  
  
 [!code-csharp[XmlReaderBasic#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#10)]
 [!code-vb[XmlReaderBasic#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#10)]  
  
<a name="xmlreader_attributes"></a>   
## <a name="reading-xml-attributes"></a>Attributi XML durante la lettura  
 Gli attributi XML si trovano in genere sugli elementi, ma sono anche autorizzati in dichiarazioni XML e nodi di tipo document.  
  
 Quando è posizionata su un nodo elemento, il <xref:System.Xml.XmlReader.MoveToAttribute%2A> metodo consente di scorrere l'elenco di attributi dell'elemento. Si noti che dopo aver <xref:System.Xml.XmlReader.MoveToAttribute%2A> è stato chiamato, le proprietà dei nodi, ad esempio <xref:System.Xml.XmlReader.Name%2A>, <xref:System.Xml.XmlReader.NamespaceURI%2A>, e <xref:System.Xml.XmlReader.Prefix%2A> rispecchiano le proprietà di tale attributo, non le proprietà dell'elemento l'attributo a cui appartiene.  
  
 Il <xref:System.Xml.XmlReader> classe fornisce questi metodi e proprietà per leggere ed elaborare gli attributi per gli elementi.  
  
|Utilizzare questa opzione <xref:System.Xml.XmlReader> membro|A|  
|---------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|Proprietà<xref:System.Xml.XmlReader.HasAttributes%2A> |Controllare se il nodo corrente dispone di attributi.|  
|Proprietà<xref:System.Xml.XmlReader.AttributeCount%2A> |Ottiene il numero di attributi nell'elemento corrente.|  
|Metodo <xref:System.Xml.XmlReader.MoveToFirstAttribute%2A>|Spostare il primo attributo in un elemento.|  
|Metodo <xref:System.Xml.XmlReader.MoveToNextAttribute%2A>|Spostare l'attributo successivo in un elemento.|  
|Metodo <xref:System.Xml.XmlReader.MoveToAttribute%2A>|Passare a un attributo specificato.|  
|<xref:System.Xml.XmlReader.GetAttribute%2A> metodo o <xref:System.Xml.XmlReader.Item%2A> proprietà|Ottenere il valore di un attributo specificato.|  
|Proprietà<xref:System.Xml.XmlReader.IsDefault%2A> |Controllare se il nodo corrente è un attributo generato dal valore predefinito definito nella DTD o schema.|  
|Metodo <xref:System.Xml.XmlReader.MoveToElement%2A>|Spostare l'elemento che possiede l'attributo corrente. Utilizzare questo metodo per restituire a un elemento dopo aver esplorato gli attributi.|  
|Metodo <xref:System.Xml.XmlReader.ReadAttributeValue%2A>|Analizzare il valore dell'attributo in uno o più `Text`, `EntityReference`, o `EndEntity` nodi.|  
  
 Per elaborare gli attributi è possibile utilizzare anche qualsiasi metodo e proprietà generale del tipo <xref:System.Xml.XmlReader>. Dopo che il tipo <xref:System.Xml.XmlReader> è stato posizionato in corrispondenza di un attributo, ad esempio, le proprietà <xref:System.Xml.XmlReader.Name%2A> e <xref:System.Xml.XmlReader.Value%2A> riflettono i valori dell'attributo. È inoltre possibile utilizzare qualsiasi metodo `Read` del contenuto per ottenere il valore dell'attributo.  
  
 Questo esempio viene usato il <xref:System.Xml.XmlReader.AttributeCount%2A> proprietà per spostarsi tra tutti gli attributi su un elemento.  
  
 [!code-csharp[XmlReaderBasic#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#1)]
 [!code-vb[XmlReaderBasic#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#1)]  
  
 Questo esempio Usa la <xref:System.Xml.XmlReader.MoveToNextAttribute%2A> metodo in un `while` ciclo per spostarsi tra gli attributi.  
  
 [!code-csharp[XmlReaderBasic#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#6)]
 [!code-vb[XmlReaderBasic#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#6)]  
  
 **Lettura di attributi su nodi della dichiarazione XML**  
  
 Quando si posiziona il lettore XML su un nodo della dichiarazione XML, il <xref:System.Xml.XmlReader.Value%2A> proprietà restituisce la versione autonoma e le informazioni di codifica come un'unica stringa. <xref:System.Xml.XmlReader> gli oggetti creati dal <xref:System.Xml.XmlReader.Create%2A> metodo, il <xref:System.Xml.XmlTextReader> (classe) e il <xref:System.Xml.XmlValidatingReader> espongono la versione autonoma e gli elementi di codifica come attributi.  
  
 **La lettura degli attributi in nodi di tipo di documento**  
  
 Quando si posiziona il lettore XML su un nodo di tipo documento, il <xref:System.Xml.XmlReader.GetAttribute%2A> metodo e <xref:System.Xml.XmlReader.Item%2A> proprietà può essere utilizzata per restituire i valori per i valori letterali SYSTEM e PUBLIC. Ad esempio, la chiamata al metodo `reader.GetAttribute("PUBLIC")` restituisce il valore PUBLIC.  
  
 **La lettura degli attributi in nodi di istruzioni di elaborazione**  
  
 Quando il tipo <xref:System.Xml.XmlReader> è posizionato in corrispondenza di un nodo di istruzioni di elaborazione, la proprietà <xref:System.Xml.XmlReader.Value%2A> restituisce l'intero contenuto di testo. Gli elementi nel nodo istruzione di elaborazione non sono considerati come attributi. Non possono essere letti con il <xref:System.Xml.XmlReader.GetAttribute%2A> o <xref:System.Xml.XmlReader.MoveToAttribute%2A> (metodo).  
  
<a name="xmlreader_content"></a>   
## <a name="reading-xml-content"></a>Contenuto XML durante la lettura  
 La classe XMLReader include i membri seguenti che leggere il contenuto da un file XML e restituisce il contenuto come valori di stringa. (Per restituire i tipi CLR, vedere la [nella sezione successiva](#xmlreader_clr).)  
  
|Utilizzare questa opzione <xref:System.Xml.XmlReader> membro|A|  
|---------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|Proprietà<xref:System.Xml.XmlReader.Value%2A> |Ottenere il contenuto di testo del nodo corrente. Il valore restituito dipende dal tipo di nodo; vedere il <xref:System.Xml.XmlReader.Value%2A> pagina di riferimento per i dettagli.|  
|Metodo <xref:System.Xml.XmlReader.ReadString%2A>|Ottenere il contenuto di un nodo elemento o testo come stringa. Questo metodo arresta in istruzioni di elaborazione e commenti.<br /><br /> Per informazioni dettagliate sul modo in cui questo metodo gestisce i tipi di nodo specifico, vedere il <xref:System.Xml.XmlReader.ReadString%2A> pagina di riferimento.|  
|Metodi <xref:System.Xml.XmlReader.ReadInnerXml%2A> e <xref:System.Xml.XmlReader.ReadInnerXmlAsync%2A>|Ottieni tutto il contenuto del nodo corrente, inclusi i markup, escluso il tag di inizio e fine. Ad esempio, per:<br /><br /> `<node>this<child id="123"/></node>`<br /><br /> <xref:System.Xml.XmlReader.ReadInnerXml%2A> Restituisce:<br /><br /> `this<child id="123"/>`|  
|Metodi <xref:System.Xml.XmlReader.ReadOuterXml%2A> e <xref:System.Xml.XmlReader.ReadOuterXmlAsync%2A>|Ottieni tutto il contenuto del nodo corrente e dei relativi elementi figlio, inclusi i tag di markup e di inizio/fine. Ad esempio, per:<br /><br /> `<node>this<child id="123"/></node>`<br /><br /> <xref:System.Xml.XmlReader.ReadOuterXml%2A> Restituisce:<br /><br /> `<node>this<child id="123"/></node>`|  
  
<a name="xmlreader_clr"></a>   
## <a name="converting-to-clr-types"></a>La conversione in tipi CLR  
 È possibile usare i membri del <xref:System.Xml.XmlReader> classe (elencati nella tabella seguente) per leggere i dati XML e i valori come common language runtime (CLR) tipi restituiti anziché stringhe. Questi membri consentono di ottenere i valori nella rappresentazione più appropriata per l'attività di codifica senza dover eseguire manualmente analizzare o convertire i valori di stringa.  
  
-   Il **ReadElementContentAs** metodi possono essere chiamati solo su tipi di nodo elemento. e non possono essere utilizzati su elementi contenenti elementi figlio o contenuto misto. Quando viene chiamato, l'oggetto <xref:System.Xml.XmlReader> legge il tag di inizio e il contenuto dell'elemento, quindi si sposta dopo il tag di fine dell'elemento. Le istruzioni di elaborazione e i commenti vengono ignorati e le entità vengono espanse.  
  
-   Il **ReadContentAs** metodi leggere il contenuto di testo nella posizione corrente del lettore e se i dati XML non include lo schema o dati digitare le informazioni associate, convertire il contenuto di testo per il tipo restituito richiesto. Il testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA sono concatenati. I commenti e istruzioni di elaborazione vengono ignorate e i riferimenti alle entità vengono risolti automaticamente.  
  
 Il <xref:System.Xml.XmlReader> classe utilizza le regole definite dal [W3C XML Schema Part 2: Tipi di dati](https://www.w3.org/TR/xmlschema-2/) raccomandazione.  
  
|Utilizzare questa opzione <xref:System.Xml.XmlReader> (metodo)|Per restituire il tipo CLR|  
|--------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|  
|<xref:System.Xml.XmlReader.ReadContentAsBoolean%2A> e <xref:System.Xml.XmlReader.ReadElementContentAsBoolean%2A>|<xref:System.Boolean>|  
|<xref:System.Xml.XmlReader.ReadContentAsDateTime%2A> e <xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A>|<xref:System.DateTime>|  
|<xref:System.Xml.XmlReader.ReadContentAsDouble%2A> e <xref:System.Xml.XmlReader.ReadElementContentAsDouble%2A>|<xref:System.Double>|  
|<xref:System.Xml.XmlReader.ReadContentAsLong%2A> e <xref:System.Xml.XmlReader.ReadElementContentAsLong%2A>|<xref:System.Int64>|  
|<xref:System.Xml.XmlReader.ReadContentAsInt%2A> e <xref:System.Xml.XmlReader.ReadElementContentAsInt%2A>|<xref:System.Int32>|  
|<xref:System.Xml.XmlReader.ReadContentAsString%2A> e <xref:System.Xml.XmlReader.ReadElementContentAsString%2A>|<xref:System.String>|  
|<xref:System.Xml.XmlReader.ReadContentAs%2A> e <xref:System.Xml.XmlReader.ReadElementContentAs%2A>|Il tipo specificato con il `returnType` parametro|  
|<xref:System.Xml.XmlReader.ReadContentAsObject%2A> e <xref:System.Xml.XmlReader.ReadElementContentAsObject%2A>|Il tipo più appropriato, come specificato da di <xref:System.Xml.XmlReader.ValueType%2A?displayProperty=nameWithType> proprietà. Visualizzare [supporto dei tipi di dati nelle classi System. XML](~/docs/standard/data/xml/type-support-in-the-system-xml-classes.md) per informazioni di mapping.|  
  
 Se un elemento non può essere facilmente convertito in un tipo CLR a causa di un formato, è possibile usare un mapping dello schema per garantire una corretta conversione. L'esempio seguente usa un file XSD per convertire il `hire-date` elemento per il `xs:date` tipo e quindi Usa il <xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A> per restituire l'elemento come un <xref:System.DateTime> oggetto.  
  
 **Input (XML):**  
  
 [!code-xml[XmlReader.ReadElementContentAs#9](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/hireDate.xml#9)]  
  
 **Schema (hireDate.xsd):**  
  
 [!code-xml[XmlReader.ReadElementContentAs#10](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/hireDate.xsd#10)]  
  
 **Codice:**  
  
 [!code-csharp[XmlReader.ReadElementContentAs#13](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#13)]
 [!code-vb[XmlReader.ReadElementContentAs#13](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#13)]  
  
 **Output:**  
  
```  
Six Month Review Date:  7/8/2003 12:00:00 AM  
```  
  
<a name="xmlreader_async"></a>   
## <a name="asynchronous-programming"></a>Programmazione asincrona  
 La maggior parte del <xref:System.Xml.XmlReader> metodi hanno controparti asincrone con "Async" alla fine dei relativi nomi di metodo. Ad esempio, l'equivalente di asincrone <xref:System.Xml.XmlReader.ReadContentAsObject%2A> è <xref:System.Xml.XmlReader.ReadContentAsObjectAsync%2A>.  
  
 I metodi seguenti sono utilizzabili con le chiamate asincrone:  
  
-   <xref:System.Xml.XmlReader.GetAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToFirstAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToNextAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToElement%2A>  
  
-   <xref:System.Xml.XmlReader.ReadAttributeValue%2A>  
  
-   <xref:System.Xml.XmlReader.ReadSubtree%2A>  
  
-   <xref:System.Xml.XmlReader.ResolveEntity%2A>  
  
 Le sezioni seguenti descrivono l'utilizzo asincrono per i metodi che non hanno controparti asincrone.  
  
 **ReadStartElement, metodo**  
  
 [!code-csharp[System.Xml.XmlReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#1)]
 [!code-vb[System.Xml.XmlReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#1)]  
  
 **Metodo ReadEndElement**  
  
 [!code-csharp[System.Xml.XmlReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#2)]
 [!code-vb[System.Xml.XmlReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#2)]  
  
 **Metodo ReadToNextSibling**  
  
 [!code-csharp[System.Xml.XmlReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#3)]
 [!code-vb[System.Xml.XmlReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#3)]  
  
 **Metodo ReadToFollowing**  
  
 [!code-csharp[System.Xml.XmlReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#4)]
 [!code-vb[System.Xml.XmlReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#4)]  
  
 **Metodo ReadToDescendant**  
  
 [!code-csharp[System.Xml.XmlReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#5)]
 [!code-vb[System.Xml.XmlReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#5)]  
  
<a name="xmlreader_security"></a>   
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Tenere presente quanto segue quando si lavora con i <xref:System.Xml.XmlReader> classe:  
  
-   Le eccezioni generate dal <xref:System.Xml.XmlReader> possono rivelare informazioni sui percorsi che si preferisca non venga propagato fino all'app. L'app deve intercettare le eccezioni ed elaborarli in modo appropriato.  
  
-   Non abilitare l'elaborazione DTD se si teme di tipo denial of problemi del servizio o se usano origini non attendibili. L'elaborazione della DTD è disabilitata per impostazione predefinita per <xref:System.Xml.XmlReader> degli oggetti creati dal <xref:System.Xml.XmlReader.Create%2A> (metodo).  
  
     Se l'elaborazione della DTD è attivata, è possibile utilizzare il tipo <xref:System.Xml.XmlSecureResolver> per limitare le risorse a cui il tipo <xref:System.Xml.XmlReader> può accedere. È anche possibile progettare l'app in modo che l'elaborazione di XML è memoria e tempo limitato. Ad esempio, è possibile configurare limiti di timeout nell'app ASP.NET.  
  
-   È possibile che i dati XML includano riferimenti a risorse esterne quali, ad esempio, un file dello schema. Per impostazione predefinita, le risorse esterne vengono risolte utilizzando un <xref:System.Xml.XmlUrlResolver> oggetto senza credenziali utente. È possibile migliorare i livelli di sicurezza mediante una delle seguenti operazioni:  
  
    -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
  
    -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> su `null`.  
  
-   Il <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> i flag di convalida di un <xref:System.Xml.XmlReaderSettings> oggetto non impostato per impostazione predefinita. Ciò consente di proteggere il tipo <xref:System.Xml.XmlReader> da attacchi basati sullo schema durante l'elaborazione dei dati XML da un'origine non attendibile. Se questi flag sono impostati, verrà utilizzata la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> dell'oggetto <xref:System.Xml.XmlReaderSettings> per risolvere i percorsi dello schema rilevati nel documento di istanza nel tipo <xref:System.Xml.XmlReader>. Se il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> è impostata su `null`, le posizioni degli schemi non vengono risolte anche se il <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> e <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> vengono impostati i flag di convalida.  
  
     Gli schemi aggiunti durante la convalida aggiungono nuovi tipi e possono alterare l'esito della convalida del documento in esame. Di conseguenza, gli schemi esterni devono essere risolti solo da origini attendibili.  
  
     Si consiglia di disabilitare il <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> flag durante la convalida di documenti XML non attendibili di grandi dimensioni in scenari a disponibilità elevata rispetto a uno schema con vincoli di identità su una vasta parte del documento. Questo flag è abilitato per impostazione predefinita.  
  
-   I dati XML possono contenere un numero elevato di attributi, dichiarazione dello spazio dei nomi, elementi annidati e così via, la cui elaborazione richiede una notevole quantità di tempo. Per limitare le dimensioni dell'input inviato al <xref:System.Xml.XmlReader>, è possibile:  
  
    -   Limitare le dimensioni del documento impostando la <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> proprietà.  
  
    -   Limitare il numero di caratteri risultanti dall'espansione di entità mediante l'impostazione di <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> proprietà.  
  
    -   Creare una classe personalizzata `IStream` implementazione per il <xref:System.Xml.XmlReader>.  
  
-   Il <xref:System.Xml.XmlReader.ReadValueChunk%2A> metodo può essere utilizzato per gestire grandi flussi di dati. Questo metodo consente di leggere un numero ridotto di caratteri alla volta invece di allocare una singola stringa per l'intero valore.  
  
-   Durante la lettura di un documento XML con un numero elevato di nomi univoci locali, gli spazi dei nomi o prefissi, può verificarsi un problema. Se si usa una classe che deriva da <xref:System.Xml.XmlReader>, e si chiama il <xref:System.Xml.XmlReader.LocalName%2A>, <xref:System.Xml.XmlReader.Prefix%2A>, o <xref:System.Xml.XmlReader.NamespaceURI%2A> proprietà per ogni elemento, la stringa restituita viene aggiunta a un <xref:System.Xml.NameTable>. La raccolta contenuta la <xref:System.Xml.NameTable> mai riduzioni delle dimensioni, la creazione di una perdita di memoria virtuale degli handle di stringa. Una mitigazione per questo consiste nel derivarlo dal <xref:System.Xml.NameTable> classe e applicare una quota di dimensioni massime. (Non è possibile per evitare l'uso di un <xref:System.Xml.NameTable>, o per passare il <xref:System.Xml.NameTable> quando è pieno). Un'altra soluzione consiste nell'evitare di usare le proprietà citate e impiegare invece il <xref:System.Xml.XmlReader.MoveToAttribute%2A> metodo con il <xref:System.Xml.XmlReader.IsStartElement%2A> metodo laddove possibile; questi metodi non restituiscono stringhe e pertanto evitare il problema di superamento del <xref:System.Xml.NameTable> raccolta.  
  
-   Gli oggetti <xref:System.Xml.XmlReaderSettings> possono contenere informazioni sensibili quali le credenziali utente. L'oggetto <xref:System.Xml.XmlReaderSettings> e le relative credenziali utente potrebbero essere utilizzate da un componente non attendibile per creare oggetti <xref:System.Xml.XmlReader> che consentano di leggere i dati. Prestare attenzione durante la memorizzazione nella cache <xref:System.Xml.XmlReaderSettings> oggetti, o quando si passa il <xref:System.Xml.XmlReaderSettings> oggetto da un componente a un altro.  
  
-   Non accettare componenti di supporto, ad esempio oggetti <xref:System.Xml.NameTable>, <xref:System.Xml.XmlNamespaceManager> e <xref:System.Xml.XmlResolver> da un'origine non attendibile.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come usare l'API asincrona per analizzare il codice XML.  
  
 [!code-csharp[System.Xml.XmlReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#6)]
 [!code-vb[System.Xml.XmlReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#6)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">Documenti e dati XML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see langword="XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore viene chiamato dai costruttori della classe derivata per inizializzare lo stato di questo tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public abstract int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il numero di attributi sul nodo corrente.</summary>
        <value>Numero di attributi sul nodo corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è rilevante per i `Element`, `DocumentType` e `XmlDeclaration` solo nodi. (Altri tipi di nodo non hanno gli attributi).  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare tutti gli attributi sul nodo corrente.  
  
 [!code-csharp[XmlReaderBasic#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#1)]
 [!code-vb[XmlReaderBasic#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public abstract string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene l'URI di base del nodo corrente.</summary>
        <value>URI di base del nodo corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un documento XML in rete è costituito da blocchi di dati aggregati tramite vari meccanismi di inclusione standard W3C e contiene pertanto nodi che provengono da diverse posizioni. Entità DTD sono un esempio di questo oggetto, ma questo non è limitato per DTD. URI di base indica è la provenienza di questi nodi. Se non vi è alcun URI di base per i nodi restituiti (ad esempio, questi sono stati analizzati da una stringa in memoria), `String.Empty` viene restituito.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public virtual bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se <see cref="T:System.Xml.XmlReader" /> implementa metodi di lettura del contenuto binario.</summary>
        <value><see langword="true" /> se i metodi di lettura del contenuto binario vengono implementati; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lettura del contenuto binario metodi includono la <xref:System.Xml.XmlReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>, e <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A> metodi. Se questa proprietà restituisce `false` un <xref:System.NotSupportedException> viene restituito quando qualsiasi del file binario letto metodi viene chiamato.  
  
 Tutte le implementazioni di Microsoft .NET Framework dei <xref:System.Xml.XmlReader> classe return `true` per questa proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public virtual bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.CanReadValueChunk" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReadValueChunk As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadValueChunk { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadValueChunk : bool" Usage="System.Xml.XmlReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se <see cref="T:System.Xml.XmlReader" /> implementa il metodo <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />.</summary>
        <value><see langword="true" /> se <see cref="T:System.Xml.XmlReader" /> implementa il metodo <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'analisi del testo <xref:System.Xml.XmlReader> gli oggetti creati da statica <xref:System.Xml.XmlReader.Create%2A> metodo restituiscono sempre `true`. Tutte le altre implementazioni di Microsoft .NET Framework del <xref:System.Xml.XmlReader> classe, inclusi i <xref:System.Xml.XmlTextReader> classe, restituire `false`.  
  
 Se questa proprietà restituisce `false` una <xref:System.NotSupportedException> viene restituito quando il <xref:System.Xml.XmlReader.ReadValueChunk%2A> viene chiamato il metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public virtual bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il lettore può analizzare e risolvere le entità.</summary>
        <value><see langword="true" /> se il lettore può analizzare e risolvere le entità; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce sempre `false` per le implementazioni di <xref:System.Xml.XmlReader> che non supportano le informazioni DTD. In questo caso, la chiamata <xref:System.Xml.XmlReader.ResolveEntity%2A> genera un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="xmlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, sostituisce <see cref="P:System.Xml.XmlReader.ReadState" /> con <see cref="F:System.Xml.ReadState.Closed" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inoltre, questo metodo rilascia tutte le risorse utilizzate durante la lettura. Se <xref:System.Xml.XmlReader.Close%2A> è già stato chiamato, viene eseguita alcuna azione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La maggior parte delle <xref:System.Xml.XmlReader.Create%2A> overload includono un `settings` parametro che accetta un <xref:System.Xml.XmlReaderSettings> oggetto. È possibile utilizzare questa oggetto:  
  
-   Specificare le funzionalità da supportare nel <xref:System.Xml.XmlReader> oggetto.  
  
-   Riutilizzare il <xref:System.Xml.XmlReaderSettings> oggetto per creare più lettori. In tal modo è possibile utilizzare le stesse impostazioni per creare più lettori con la stessa funzionalità. In alternativa, è possibile modificare le impostazioni in un <xref:System.Xml.XmlReaderSettings> dell'istanza e creare un nuovo lettore con un set di funzionalità diverso.  
  
-   Aggiungere funzionalità a un lettore XML esistente. Il metodo <xref:System.Xml.XmlReader.Create%2A> può accettare un altro oggetto <xref:System.Xml.XmlReader>. Sottostante <xref:System.Xml.XmlReader> oggetto può essere un lettore definito dall'utente, un <xref:System.Xml.XmlTextReader> oggetto o un altro <xref:System.Xml.XmlReader> istanza che si desidera aggiungere ulteriori funzionalità.  
  
-   Sfruttare appieno le funzionalità quali un miglior controllo della conformità e la conformità per i [XML 1.0 (fourth edition)](https://www.w3.org/TR/2006/REC-xml-20060816/) indicazione per cui sono disponibili solo nei <xref:System.Xml.XmlReader> degli oggetti creati da statico <xref:System.Xml.XmlReader.Create%2A> (metodo).  
  
> [!NOTE]
>  Sebbene .NET Framework includa implementazioni concrete del <xref:System.Xml.XmlReader> classe, ad esempio il <xref:System.Xml.XmlTextReader>, <xref:System.Xml.XmlNodeReader>e il <xref:System.Xml.XmlValidatingReader> classi, è consigliabile creare <xref:System.Xml.XmlReader> istanze usando il <xref:System.Xml.XmlReader.Create%2A> metodo.  
  
## <a name="default-settings"></a>Impostazioni predefinite  
 Se si usa un' <xref:System.Xml.XmlReader.Create%2A> overload che non accetta un <xref:System.Xml.XmlReaderSettings> dell'oggetto, vengono utilizzate le impostazioni di lettura predefinite seguenti:  
  
|Impostazione|Impostazione predefinita|  
|-------------|-------------|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`|  
|<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Oggetto <xref:System.Xml.Schema.XmlSchemaSet> vuoto.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> Abilitato|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Nuovo oggetto <xref:System.Xml.XmlUrlResolver>.  A partire da .NET Framework 4.5.2, il valore predefinito di questa impostazione è `null`.|  
  
## <a name="settings-for-common-scenarios"></a>Impostazioni per gli scenari comuni  
 Ecco il <xref:System.Xml.XmlReaderSettings> proprietà che è necessario impostare per alcuni degli scenari tipici di lettore XML.  
  
|Requisito|Imposta|  
|-----------------|---------|  
|Dati devono essere un documento XML ben formato.|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> per <xref:System.Xml.ConformanceLevel.Document>.|  
|Dati devono essere un'entità analizzate XML ben formata.|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> per <xref:System.Xml.ConformanceLevel.Fragment>.|  
|I dati devono essere convalidati rispetto a una DTD.|<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> in <xref:System.Xml.DtdProcessing.Parse><br /><xref:System.Xml.XmlReaderSettings.ValidationType%2A> per <xref:System.Xml.ValidationType.DTD>.|  
|I dati devono essere convalidati rispetto a uno schema XML.|<xref:System.Xml.XmlReaderSettings.ValidationType%2A> in <xref:System.Xml.ValidationType.Schema><br /><xref:System.Xml.XmlReaderSettings.Schemas%2A> per il <xref:System.Xml.Schema.XmlSchemaSet> da utilizzare per la convalida. Si noti che <xref:System.Xml.XmlReader> non supporta la convalida dello schema XML-Data Reduced (XDR).|  
|I dati devono essere convalidati rispetto a uno schema XML inline.|<xref:System.Xml.XmlReaderSettings.ValidationType%2A> in <xref:System.Xml.ValidationType.Schema><br /><xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> per <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>.|  
|Supporto del tipo.|<xref:System.Xml.XmlReaderSettings.ValidationType%2A> in <xref:System.Xml.ValidationType.Schema><br /><xref:System.Xml.XmlReaderSettings.Schemas%2A> per il <xref:System.Xml.Schema.XmlSchemaSet> da usare.|  
  
 <xref:System.Xml.XmlReader> non supporta la convalida dello schema XML-Data Reduced (XDR).  
  
## <a name="asynchronous-programming"></a>Programmazione asincrona  
 In modalità sincrona, il <xref:System.Xml.XmlReader.Create%2A> metodo legge il primo blocco di dati dal buffer del lettore di file, un flusso o testo. Ciò può generare un'eccezione se un'operazione dei / o non riesce. In modalità asincrona, la prima operazione dei / o si verifica con un'operazione di lettura, in modo verranno generate eccezioni che si verificano quando si verifica l'operazione di lettura.  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Per impostazione predefinita, il <xref:System.Xml.XmlReader> Usa un <xref:System.Xml.XmlUrlResolver> oggetto senza credenziali utente per aprire le risorse. Ciò significa che, per impostazione predefinita, il lettore XML può accedere qualsiasi posizione che non richieda credenziali. Usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> proprietà per controllare l'accesso alle risorse:  
  
-   Impostare <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> a un <xref:System.Xml.XmlSecureResolver> oggetto per limitare le risorse che può accedere il lettore XML.  
  
 -oppure-  
  
-   Impostare <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> a `null` per impedire che il lettore XML aprire eventuali risorse esterne.  
  
   
  
## Examples  
 Questo esempio viene creato un lettore XML che rimuove gli spazi vuoti, commenti ed esegue il controllo di conformità a livello di frammento.  
  
 [!code-csharp[XmlReader.Create#11](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#11)]
 [!code-vb[XmlReader.Create#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#11)]  
  
 L'esempio seguente usa un <xref:System.Xml.XmlUrlResolver> con le credenziali predefinite per accedere a un file.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 [!code-cpp[XmlReaderSettings.cctor#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 Il codice seguente esegue il wrapping di un'istanza del lettore in un altro lettore.  
  
 [!code-csharp[XmlReader.Create#13](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#13)]
 [!code-vb[XmlReader.Create#13](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#13)]  
  
 In questo esempio viene concatenato lettori per aggiungere la convalida degli schemi DTD e XML.  
  
 [!code-csharp[XmlReader.Create#12](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#12)]
 [!code-vb[XmlReader.Create#12](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As Stream) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Flusso che contiene i dati XML.  
  
L'oggetto <see cref="T:System.Xml.XmlReader" /> analizza i primi byte del flusso cercando un indicatore per l'ordine dei byte o un altro segno di codifica. Quando viene determinata, la codifica viene usata per continuare la lettura del flusso, mentre l'elaborazione continua ad analizzare l'input come flusso di caratteri (Unicode).</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il flusso specificato e le impostazioni predefinite.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Xml.XmlReaderSettings> oggetto con le impostazioni predefinite viene usato per creare il lettore. Se si desidera specificare le funzionalità da supportare il lettore creato, usare l'overload che accetta un <xref:System.Xml.XmlReaderSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlReaderSettings> oggetto con le impostazioni corrette.  
  
 Un valore predefinito <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie usando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Xml.XmlReader> che legge da un <xref:System.IO.FileStream>.  
  
 [!code-csharp[XmlReader.Create#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#8)]
 [!code-vb[XmlReader.Create#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" /> non dispone di autorizzazioni sufficienti per accedere al percorso dei dati XML.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As TextReader) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextReader -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input">Lettore di testo da cui leggere i dati XML. Poiché un lettore di testo restituisce un flusso di caratteri Unicode, la codifica specificata nella dichiarazione XML non viene usata dal lettore XML per decodificare il flusso di dati.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il lettore di testo specificato.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Xml.XmlReaderSettings> oggetto con le impostazioni predefinite viene usato per creare il lettore. Se si desidera specificare le funzionalità da supportare il lettore creato, usare l'overload che accetta un <xref:System.Xml.XmlReaderSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlReaderSettings> oggetto con le impostazioni corrette.  
  
 Un valore predefinito <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie usando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.IO.StringReader> classe per leggere una stringa XML.  
  
 [!code-csharp[XmlReader.Create#7](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#7)]
 [!code-vb[XmlReader.Create#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (inputUri As String) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::String ^ inputUri);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create inputUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del file che contiene i dati XML. La classe <see cref="T:System.Xml.XmlUrlResolver" /> viene usata per convertire il percorso in una rappresentazione canonica dei dati.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con l'URI specificato.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Xml.XmlReaderSettings> oggetto con le impostazioni predefinite viene usato per creare il lettore. Se si desidera specificare le funzionalità da supportare il lettore creato, usare l'overload che accetta un <xref:System.Xml.XmlReaderSettings> dell'oggetto come uno dei relativi argomenti e passare un <xref:System.Xml.XmlReaderSettings> oggetto con le impostazioni corrette.  
  
 Un valore predefinito <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie usando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Xml.XmlReader> che legge file di dati XML specificato dall'URI.  
  
 [!code-csharp[XmlReader.Create#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#6)]
 [!code-vb[XmlReader.Create#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="inputUri" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" /> non dispone di autorizzazioni sufficienti per accedere al percorso dei dati XML.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Il file identificato dall'URI non esiste.</exception>
        <exception cref="T:System.UriFormatException"><block subset="none" type="note">
            <para>  
 In <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET per app di Windows Store</see> o nella <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">libreria di classi portabile</see> rilevare invece l'eccezione della classe di base, <see cref="T:System.FormatException" />.  
  
</para>
          </block>  
  
 Il formato dell'URI non è corretto.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As Stream, settings As XmlReaderSettings) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::Stream ^ input, System::Xml::XmlReaderSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.Xml.XmlReaderSettings -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (input, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="input">Flusso che contiene i dati XML.  
  
L'oggetto <see cref="T:System.Xml.XmlReader" /> analizza i primi byte del flusso cercando un indicatore per l'ordine dei byte o un altro segno di codifica. Quando viene determinata, la codifica viene usata per continuare la lettura del flusso, mentre l'elaborazione continua ad analizzare l'input come flusso di caratteri (Unicode).</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il flusso e le impostazioni specificati.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile usare uno dei metodi seguenti per controllare le risorse a cui il <xref:System.Xml.XmlReader> può accedere:  
>   
>  -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
>   
>  -oppure-  
>   
>  -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su `null`.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As TextReader, settings As XmlReaderSettings) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::TextReader ^ input, System::Xml::XmlReaderSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextReader * System.Xml.XmlReaderSettings -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (input, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="input">Lettore di testo da cui leggere i dati XML. Poiché un lettore di testo restituisce un flusso di caratteri Unicode, la codifica specificata nella dichiarazione XML non viene usata dal lettore XML per decodificare il flusso di dati.</param>
        <param name="settings">Impostazioni del nuovo oggetto <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il lettore di testo e le impostazioni specificati.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile usare uno dei metodi seguenti per controllare le risorse a cui il <xref:System.Xml.XmlReader> può accedere:  
>   
>  -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
>   
>  -oppure-  
>   
>  -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su `null`.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (inputUri As String, settings As XmlReaderSettings) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::String ^ inputUri, System::Xml::XmlReaderSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : string * System.Xml.XmlReaderSettings -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (inputUri, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del file che contiene i dati XML. L'oggetto <see cref="T:System.Xml.XmlResolver" /> nell'oggetto <see cref="T:System.Xml.XmlReaderSettings" /> viene usato per eseguire la conversione del percorso a una rappresentazione canonica dei dati. Se <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> è <see langword="null" />, viene usato un nuovo oggetto <see cref="T:System.Xml.XmlUrlResolver" />.</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con l'URI e le impostazioni specificati.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Ciò significa che il <xref:System.Xml.XmlReader> può accedere a qualsiasi percorso che non richiede l'autenticazione. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile limitare le risorse che il <xref:System.Xml.XmlReader> può accedere impostando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> proprietà di un <xref:System.Xml.XmlSecureResolver> oggetto.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Xml.XmlReader> oggetto che supporta la convalida document type definition (DTD).  
  
 [!code-csharp[XmlReader.Create#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#3)]
 [!code-vb[XmlReader.Create#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="inputUri" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Non è possibile trovare il file specificato dall'URI.</exception>
        <exception cref="T:System.UriFormatException"><block subset="none" type="note">
            <para>  
 In <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET per app di Windows Store</see> o nella <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">libreria di classi portabile</see> rilevare invece l'eccezione della classe di base, <see cref="T:System.FormatException" />.  
  
</para>
          </block>  
  
 Il formato dell'URI non è corretto.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.Xml.XmlReader reader, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.Xml.XmlReader reader, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (reader As XmlReader, settings As XmlReaderSettings) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::Xml::XmlReader ^ reader, System::Xml::XmlReaderSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Create : System.Xml.XmlReader * System.Xml.XmlReaderSettings -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (reader, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto da usare come lettore XML sottostante.</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />.  
  
Il livello di conformità dell'oggetto <see cref="T:System.Xml.XmlReaderSettings" /> deve corrispondere a quello del lettore sottostante o deve essere impostato su <see cref="F:System.Xml.ConformanceLevel.Auto" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il lettore XML e le impostazioni specificate.</summary>
        <returns>Oggetto di cui è stato eseguito il wrapping intorno all'oggetto <see cref="T:System.Xml.XmlReader" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di aggiungere ulteriori funzionalità a un oggetto sottostante <xref:System.Xml.XmlReader> oggetto. Sottostante <xref:System.Xml.XmlReader> può essere un altro oggetto <xref:System.Xml.XmlReader> oggetto creato dal <xref:System.Xml.XmlReader.Create%2A> metodo, o un' <xref:System.Xml.XmlReader> oggetto creato utilizzando uno dei concrete <xref:System.Xml.XmlReader> implementazioni.  
  
 Un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali viene utilizzato per accedere alle risorse esterne, ad esempio uno schema.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie usando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
> [!IMPORTANT]
>  È possibile usare uno dei metodi seguenti per controllare le risorse a cui il <xref:System.Xml.XmlReader> può accedere:  
>   
>  -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
>   
>  -oppure-  
>   
>  -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su `null`.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto di convalida <xref:System.Xml.XmlReader> oggetto che viene eseguito il wrapping intorno a un <xref:System.Xml.XmlNodeReader> oggetto.  
  
 [!code-csharp[XmlReader.Create#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#5)]
 [!code-vb[XmlReader.Create#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="reader" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Se l'oggetto <see cref="T:System.Xml.XmlReaderSettings" /> specifica un livello di conformità non coerente con quello del lettore sottostante.  
  
-oppure- 
L'oggetto <see cref="T:System.Xml.XmlReader" /> sottostante è in uno stato <see cref="F:System.Xml.ReadState.Error" /> o <see cref="F:System.Xml.ReadState.Closed" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, string baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings, string baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As Stream, settings As XmlReaderSettings, baseUri As String) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::Stream ^ input, System::Xml::XmlReaderSettings ^ settings, System::String ^ baseUri);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.Xml.XmlReaderSettings * string -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (input, settings, baseUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="baseUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Flusso che contiene i dati XML.  
  
L'oggetto <see cref="T:System.Xml.XmlReader" /> analizza i primi byte del flusso cercando un indicatore per l'ordine dei byte o un altro segno di codifica. Quando viene determinata, la codifica viene usata per continuare la lettura del flusso, mentre l'elaborazione continua ad analizzare l'input come flusso di caratteri (Unicode).</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <param name="baseUri">URI di base relativo all'entità o al documento letto. Il valore può essere <see langword="null" />.  
  
 **Nota sulla sicurezza** L'URI di base viene usato per risolvere l'URI relativo del documento XML. Non usare un URI di base proveniente da una fonte non attendibile.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il flusso, l'URI di base e le impostazioni specificati.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile usare uno dei metodi seguenti per controllare le risorse a cui il <xref:System.Xml.XmlReader> può accedere:  
>   
>  -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
>   
>  oppure  
>   
>  -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su `null`.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As Stream, settings As XmlReaderSettings, inputContext As XmlParserContext) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::Stream ^ input, System::Xml::XmlReaderSettings ^ settings, System::Xml::XmlParserContext ^ inputContext);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.Stream * System.Xml.XmlReaderSettings * System.Xml.XmlParserContext -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (input, settings, inputContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="input">Flusso che contiene i dati XML.  
  
L'oggetto <see cref="T:System.Xml.XmlReader" /> analizza i primi byte del flusso cercando un indicatore per l'ordine dei byte o un altro segno di codifica. Quando viene determinata, la codifica viene usata per continuare la lettura del flusso, mentre l'elaborazione continua ad analizzare l'input come flusso di caratteri (Unicode).</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <param name="inputContext">Informazioni sul contesto necessarie per analizzare il frammento XML. Le informazioni sul contesto possono includere l'oggetto <see cref="T:System.Xml.XmlNameTable" /> da usare, la codifica, l'ambito dello spazio dei nomi, gli ambiti <c>xml:lang</c> e <c>xml:space</c> correnti, l'URI di base e la definizione DTD (Document Type Definition).  
  
Il valore può essere <see langword="null" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il flusso, le impostazioni e le informazioni di contesto specificati per l'analisi.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile usare uno dei metodi seguenti per controllare le risorse a cui il <xref:System.Xml.XmlReader> può accedere:  
>   
>  -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
>   
>  -oppure-  
>   
>  -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su `null`.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, string baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings, string baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As TextReader, settings As XmlReaderSettings, baseUri As String) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::TextReader ^ input, System::Xml::XmlReaderSettings ^ settings, System::String ^ baseUri);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextReader * System.Xml.XmlReaderSettings * string -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (input, settings, baseUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="baseUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Lettore di testo da cui leggere i dati XML. Poiché un lettore di testo restituisce un flusso di caratteri Unicode, la codifica specificata nella dichiarazione XML non viene usata da <see cref="T:System.Xml.XmlReader" /> per decodificare il flusso di dati.</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <param name="baseUri">URI di base relativo all'entità o al documento letto. Il valore può essere <see langword="null" />.  
  
 **Nota sulla sicurezza** L'URI di base viene usato per risolvere l'URI relativo del documento XML. Non usare un URI di base proveniente da una fonte non attendibile.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il lettore di testo, le impostazioni e l'URI di base specificati.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile usare uno dei metodi seguenti per controllare le risorse a cui il <xref:System.Xml.XmlReader> può accedere:  
>   
>  -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
>   
>  oppure  
>   
>  -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su `null`.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (input As TextReader, settings As XmlReaderSettings, inputContext As XmlParserContext) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::IO::TextReader ^ input, System::Xml::XmlReaderSettings ^ settings, System::Xml::XmlParserContext ^ inputContext);" />
      <MemberSignature Language="F#" Value="static member Create : System.IO.TextReader * System.Xml.XmlReaderSettings * System.Xml.XmlParserContext -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (input, settings, inputContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="input">Lettore di testo da cui leggere i dati XML. Poiché un lettore di testo restituisce un flusso di caratteri Unicode, la codifica specificata nella dichiarazione XML non viene usata dal lettore XML per decodificare il flusso di dati.</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <param name="inputContext">Informazioni sul contesto necessarie per analizzare il frammento XML. Le informazioni sul contesto possono includere l'oggetto <see cref="T:System.Xml.XmlNameTable" /> da usare, la codifica, l'ambito dello spazio dei nomi, gli ambiti <c>xml:lang</c> e <c>xml:space</c> correnti, l'URI di base e la definizione DTD (Document Type Definition).  
  
Il valore può essere <see langword="null" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con il lettore di testo, le impostazioni e le informazioni di contesto specificati per l'analisi.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile usare uno dei metodi seguenti per controllare le risorse a cui il <xref:System.Xml.XmlReader> può accedere:  
>   
>  -   Limitando le risorse a cui la classe <xref:System.Xml.XmlReader> può accedere impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su un oggetto <xref:System.Xml.XmlSecureResolver>.  
>   
>  -oppure-  
>   
>  -   Non consentire al tipo <xref:System.Xml.XmlReader> di aprire alcuna risorsa esterna impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> su `null`.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Xml.XmlReader> che legge un frammento XML.  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> e <see cref="P:System.Xml.XmlParserContext.NameTable" /> contengono entrambe valori. (È possibile impostare e usare solo una di queste proprietà <see langword="NameTable" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (inputUri As String, settings As XmlReaderSettings, inputContext As XmlParserContext) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlReader ^ Create(System::String ^ inputUri, System::Xml::XmlReaderSettings ^ settings, System::Xml::XmlParserContext ^ inputContext);" />
      <MemberSignature Language="F#" Value="static member Create : string * System.Xml.XmlReaderSettings * System.Xml.XmlParserContext -&gt; System.Xml.XmlReader" Usage="System.Xml.XmlReader.Create (inputUri, settings, inputContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del file che contiene i dati XML. L'oggetto <see cref="T:System.Xml.XmlResolver" /> nell'oggetto <see cref="T:System.Xml.XmlReaderSettings" /> viene usato per eseguire la conversione del percorso a una rappresentazione canonica dei dati. Se <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> è <see langword="null" />, viene usato un nuovo oggetto <see cref="T:System.Xml.XmlUrlResolver" />.</param>
        <param name="settings">Impostazioni per la nuova istanza di <see cref="T:System.Xml.XmlReader" />. Il valore può essere <see langword="null" />.</param>
        <param name="inputContext">Informazioni sul contesto necessarie per analizzare il frammento XML. Le informazioni sul contesto possono includere l'oggetto <see cref="T:System.Xml.XmlNameTable" /> da usare, la codifica, l'ambito dello spazio dei nomi, gli ambiti <c>xml:lang</c> e <c>xml:space</c> correnti, l'URI di base e la definizione DTD (Document Type Definition).  
  
Il valore può essere <see langword="null" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Xml.XmlReader" /> con l'URI, le impostazioni e le informazioni di contesto specificati per l'analisi.</summary>
        <returns>Oggetto usato per leggere i dati XML nel flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita un <xref:System.Xml.XmlUrlResolver> con le credenziali non viene utilizzato per accedere alle risorse esterne, ad esempio una definizione di tipo di documento (DTD), entità, gli schemi e così via.  
  
> [!IMPORTANT]
>  A partire da .NET Framework 4.5.2, alcun valore predefinito <xref:System.Xml.XmlUrlResolver> viene fornito. Se la soluzione è destinata a .NET Framework 4.5.2 o versioni successive, specificare un <xref:System.Xml.XmlResolver> utilizzando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà.  
  
 Ciò significa che il <xref:System.Xml.XmlReader> può accedere a qualsiasi percorso che non richiede l'autenticazione. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> proprietà per specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
> [!IMPORTANT]
>  È possibile limitare le risorse che il <xref:System.Xml.XmlReader> può accedere impostando il <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> proprietà di un <xref:System.Xml.XmlSecureResolver> oggetto.  
  
 L'oggetto creato <xref:System.Xml.XmlReader> oggetto espande i riferimenti alle entità ed esegue la normalizzazione dei caratteri di nuova riga.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <see langword="inputUri" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" /> non dispone di autorizzazioni sufficienti per accedere al percorso dei dati XML.</exception>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> e <see cref="P:System.Xml.XmlParserContext.NameTable" /> contengono entrambe valori. (È possibile impostare e usare solo una di queste proprietà <see langword="NameTable" />).</exception>
        <exception cref="T:System.IO.FileNotFoundException">Non è possibile trovare il file specificato dall'URI.</exception>
        <exception cref="T:System.UriFormatException">Il formato dell'URI non è corretto.</exception>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public abstract int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene la profondità del nodo corrente nel documento XML.</summary>
        <value>Profondità del nodo corrente nel documento XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Visualizzare <xref:System.Xml.XmlTextReader.Depth%2A> (nel `XmlTextReader` classe) per un esempio di utilizzo di questa proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Rilascia le risorse usate dalla classe <see cref="T:System.Xml.XmlReader" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="xmlReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xmlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Xml.XmlReader" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public abstract bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene un valore che indica se il lettore è posizionato alla fine del flusso.</summary>
        <value><see langword="true" /> se il lettore è posizionato alla fine del flusso; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore di un attributo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : int -&gt; string" Usage="xmlReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Indice dell'attributo. L'indice è in base zero. Il primo attributo ha indice 0.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore dell'attributo con l'indice specificato.</summary>
        <returns>Valore dell'attributo specificato. Questo metodo non determina lo spostamento del lettore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente ottiene il valore dell'attributo terzo.  
  
 [!code-csharp[XmlReaderBasic#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#2)]
 [!code-vb[XmlReaderBasic#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" /> non è compreso nell'intervallo consentito. Richiesto valore non negativo e minore della dimensione dell'insieme di attributi.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string -&gt; string" Usage="xmlReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore dell'attributo con la proprietà <see cref="P:System.Xml.XmlReader.Name" /> specificata.</summary>
        <returns>Valore dell'attributo specificato. Se l'attributo non viene trovato o se il valore è <see langword="String.Empty" />, verrà restituito <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non determina lo spostamento del lettore.  
  
 Se il reader è posizionato su un `DocumentType` nodo, questo metodo può essere utilizzato per ottenere i valori letterali PUBLIC e SYSTEM, ad esempio, `reader.GetAttribute("PUBLIC")`  
  
   
  
## Examples  
 Nell'esempio seguente ottiene il valore dell'attributo ISBN.  
  
 [!code-csharp[XmlReaderBasic#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#3)]
 [!code-vb[XmlReaderBasic#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string name, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAttribute (name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetAttribute(System::String ^ name, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string * string -&gt; string" Usage="xmlReader.GetAttribute (name, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome locale dell'attributo.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore dell'attributo con le proprietà <see cref="P:System.Xml.XmlReader.LocalName" /> e <see cref="P:System.Xml.XmlReader.NamespaceURI" /> specificate.</summary>
        <returns>Valore dell'attributo specificato. Se l'attributo non viene trovato o se il valore è <see langword="String.Empty" />, verrà restituito <see langword="null" />. Questo metodo non determina lo spostamento del lettore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il codice XML seguente contiene un attributo in uno spazio dei nomi specifico:  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 È possibile effettuare la ricerca di `dt:type` attributo usando un solo argomento (prefisso e il nome locale) o due argomenti (nome locale e l'URI dello spazio dei nomi):  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 Per la ricerca di `xmlns:dt` attributo, usare uno degli argomenti seguenti:  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 È anche possibile ottenere queste informazioni usando il <xref:System.Xml.XmlReader.Prefix%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetValueAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetValueAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetValueAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetValueAsync();" />
      <MemberSignature Language="F#" Value="abstract member GetValueAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetValueAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="xmlReader.GetValueAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene in modo asincrono il valore del nodo corrente.</summary>
        <returns>Valore del nodo corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public virtual bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasAttributes { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAttributes : bool" Usage="System.Xml.XmlReader.HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il nodo corrente dispone di attributi.</summary>
        <value><see langword="true" /> se il nodo corrente contiene attributi; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente consente di visualizzare tutti gli attributi sul nodo corrente.  
  
 [!code-csharp[XmlReaderBasic#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#6)]
 [!code-vb[XmlReaderBasic#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public virtual bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene un valore che indica se il nodo corrente può avere <see cref="P:System.Xml.XmlReader.Value" />.</summary>
        <value><see langword="true" /> se il nodo sul quale il lettore è attualmente posizionato può contenere <see langword="Value" />; in caso contrario, <see langword="false" />. Se <see langword="false" />, il valore del nodo è <see langword="String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente elenca i tipi di nodo che hanno un valore da restituire.  
  
|Tipo di nodo|Value|  
|---------------|-----------|  
|`Attribute`|Valore dell'attributo.|  
|`CDATA`|Contenuto della sezione CDATA.|  
|`Comment`|Contenuto del commento.|  
|`DocumentType`|Sottoinsieme interno.|  
|`ProcessingInstruction`|Intero contenuto, esclusa la destinazione.|  
|`SignificantWhitespace`|Spazio vuoto tra markup in un modello con contenuto misto.|  
|`Text`|Contenuto del nodo di testo.|  
|`Whitespace`|Spazio vuoto tra markup.|  
|`XmlDeclaration`|Contenuto della dichiarazione.|  
  
   
  
## Examples  
 Visualizzare <xref:System.Xml.XmlTextReader.HasValue%2A> (nel `XmlTextReader` classe) per un esempio di utilizzo di questo metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public virtual bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene un valore che indica se il nodo corrente è un attributo generato dal valore predefinito configurato nella definizione DTD o nello schema.</summary>
        <value><see langword="true" /> se il nodo corrente è un attributo il cui valore è stato generato in base al valore predefinito configurato nella definizione DTD o nello schema; <see langword="false" /> se il valore dell'attributo è stato impostato in modo esplicito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDefault` Restituisce sempre `false` per le implementazioni di `XmlReader` che non supportano le informazioni DTD o schema. Questa proprietà si applica solo a un nodo attributo.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare tutti gli attributi nell'elemento radice.  
  
```csharp  
using System;  
using System.IO;  
using System.Xml;  
  
public class Sample   
{  
  public static void Main(){  
  
    // Create the reader.  
    XmlReader reader = XmlReader.Create("book4.xml");  
  
    reader.MoveToContent();  
  
    // Display each of the attribute nodes, including default attributes.  
    while (reader.MoveToNextAttribute()){  
        if (reader.IsDefault)  
          Console.Write("(default attribute) ");  
        Console.WriteLine("{0} = {1}", reader.Name, reader.Value);    
    }             
  
    //Close the reader.  
    reader.Close();       
  
  }  
} // End class  
```  
  
 L'esempio Usa i file seguenti come input.  
  
 `book4.xml`  
  
```xml  
<!DOCTYPE book SYSTEM 'book.dtd'>  
<book ISBN = '1-861001-57-5'>  
  <title>Pride And Prejudice</title>  
  <price>19.95</price>  
</book>  
```  
  
 `book.dtd`  
  
```  
<!ELEMENT book (title,price)>   
<!ATTLIST book   
   genre CDATA "novel"  
   ISBN CDATA #REQUIRED>  
<!ELEMENT title (#PCDATA)>  
<!ELEMENT price (#PCDATA)>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public abstract bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando viene eseguito l'override in una classe derivata, ottiene un valore che indica se il nodo corrente è un elemento vuoto, ad esempio <c>&lt;MyElement/&gt;</c>.</summary>
        <value><see langword="true" /> Se il nodo corrente è un elemento (<see cref="P:System.Xml.XmlReader.NodeType" /> è uguale a <see langword="XmlNodeType.Element" />) che termina con <c>/ &gt;</c>; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà consente di determinare la differenza tra le seguenti stringhe:  
  
 `<item num="123"/>` (`IsEmptyElement` è `true`).  
  
 `<item num="123"></item>` (`IsEmptyElement` è `false`, anche se il contenuto dell'elemento è vuoto).  
  
 Un oggetto corrispondente `EndElement` nodo non viene generato per elementi vuoti.  
  
 Se il contenuto predefinito è stato aggiunto a un elemento a causa di convalida dello schema, `IsEmptyElement` restituisce ancora `true`. Non ha alcun impatto su o meno l'elemento ha un valore predefinito. In altre parole, `IsEmptyElement` indica semplicemente se l'elemento nel documento di origine dispone di un tag di fine dell'elemento.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare il contenuto di testo di ogni elemento.  
  
 [!code-csharp[XmlReaderBasic#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#10)]
 [!code-vb[XmlReaderBasic#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#10)]  
  
 L'esempio Usa il file, `elems.xml`, come input.  
  
 [!code-xml[XML_Core_Files#3](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/elems.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="IsName">
      <MemberSignature Language="C#" Value="public static bool IsName (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsName(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsName (str As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsName(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member IsName : string -&gt; bool" Usage="System.Xml.XmlReader.IsName str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Nome da convalidare.</param>
        <summary>Restituisce un valore che indica se l'argomento della stringa è un nome XML valido.</summary>
        <returns><see langword="true" /> se il nome è valido; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [W3C XML 1.0 Recommendation](https://go.microsoft.com/fwlink/?LinkId=49863) per determinare se il nome è valido.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="str" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNameToken">
      <MemberSignature Language="C#" Value="public static bool IsNameToken (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNameToken(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsNameToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNameToken (str As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNameToken(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member IsNameToken : string -&gt; bool" Usage="System.Xml.XmlReader.IsNameToken str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Token del nome da convalidare.</param>
        <summary>Restituisce un valore che indica se l'argomento della stringa è un token di un nome XML valido o meno.</summary>
        <returns><see langword="true" /> se è un token del nome valido; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [W3C XML 1.0 Recommendation](https://go.microsoft.com/fwlink/?LinkId=49863) per determinare se il token del nome è valido.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="str" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Verifica se il nodo di contenuto corrente è un tag di inizio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsStartElement" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsStartElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsStartElement();" />
      <MemberSignature Language="F#" Value="abstract member IsStartElement : unit -&gt; bool&#xA;override this.IsStartElement : unit -&gt; bool" Usage="xmlReader.IsStartElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiama <see cref="M:System.Xml.XmlReader.MoveToContent" /> e verifica se il nodo di contenuto corrente è un tag di inizio o un tag di elemento vuoto.</summary>
        <returns><see langword="true" /> se il metodo <see cref="M:System.Xml.XmlReader.MoveToContent" /> trova un tag di inizio oppure un tag di elemento vuoto; <see langword="false" /> se viene trovato un tipo di nodo diverso da <see langword="XmlNodeType.Element" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo ignora gli spazi vuoti, commenti e istruzioni di elaborazione, fino a quando il reader è posizionato su un nodo di contenuto. Il metodo di verifica quindi se il nodo corrente è un elemento.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare il contenuto di testo di ogni elemento.  
  
 [!code-csharp[XmlReaderBasic#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#10)]
 [!code-vb[XmlReaderBasic#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#10)]  
  
 L'esempio Usa il file, `elems.xml`, come input.  
  
 [!code-xml[XML_Core_Files#3](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/elems.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">È stata trovata una stringa XML non corretta nel flusso di input.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.MoveToContent" />
      </Docs>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsStartElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsStartElement (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsStartElement(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsStartElement : string -&gt; bool&#xA;override this.IsStartElement : string -&gt; bool" Usage="xmlReader.IsStartElement name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Stringa confrontata con la proprietà <see langword="Name" /> dell'elemento trovato.</param>
        <summary>Chiama <see cref="M:System.Xml.XmlReader.MoveToContent" /> e verifica se il nodo corrente è un tag di inizio o un tag di elemento vuoto e se la proprietà <see cref="P:System.Xml.XmlReader.Name" /> dell'elemento trovato corrisponde all'argomento specificato.</summary>
        <returns><see langword="true" /> se il nodo risultante è un elemento e la proprietà <see langword="Name" /> corrisponde alla stringa specificata. <see langword="false" /> se è stato trovato un tipo di nodo diverso da <see langword="XmlNodeType.Element" /> oppure se la proprietà <see langword="Name" /> dell'elemento non corrisponde alla stringa specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo ignora gli spazi vuoti, commenti e istruzioni di elaborazione, fino a quando il reader è posizionato su un nodo di contenuto. Il metodo di verifica quindi se il nodo corrente è un elemento.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare ogni elemento di prezzo.  
  
 [!code-csharp[XmlReaderBasic#17](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#17)]
 [!code-vb[XmlReaderBasic#17](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">È stata trovata una stringa XML non corretta nel flusso di input.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.MoveToContent" />
      </Docs>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement(string localname, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsStartElement (localname As String, ns As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsStartElement(System::String ^ localname, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member IsStartElement : string * string -&gt; bool&#xA;override this.IsStartElement : string * string -&gt; bool" Usage="xmlReader.IsStartElement (localname, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localname">Stringa da confrontare con la proprietà <see langword="LocalName" /> dell'elemento trovato.</param>
        <param name="ns">Stringa da confrontare con la proprietà <see langword="NamespaceURI" /> dell'elemento trovato.</param>
        <summary>Chiama <see cref="M:System.Xml.XmlReader.MoveToContent" /> e verifica se il nodo di contenuto è un tag di inizio o un tag di elemento vuoto e se le proprietà <see cref="P:System.Xml.XmlReader.LocalName" /> e <see cref="P:System.Xml.XmlReader.NamespaceURI" /> dell'elemento trovato corrispondono alle stringhe specificate.</summary>
        <returns><see langword="true" />, se il nodo risultante è un elemento. <see langword="false" /> se è stato trovato un tipo di nodo diverso da <see langword="XmlNodeType.Element" /> oppure se le proprietà <see langword="LocalName" /> e <see langword="NamespaceURI" /> dell'elemento non corrispondono alle stringhe specificate.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo ignora gli spazi vuoti, commenti e istruzioni di elaborazione, fino a quando il reader è posizionato su un nodo di contenuto. Il metodo di verifica quindi se il nodo corrente è un elemento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">È stata trovata una stringa XML non corretta nel flusso di input.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.MoveToContent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore dell'attributo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Indice dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore dell'attributo con l'indice specificato.</summary>
        <value>Valore dell'attributo specificato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non sposta il lettore.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare tutti gli attributi sul nodo corrente.  
  
 [!code-csharp[XmlReaderBasic#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#1)]
 [!code-vb[XmlReaderBasic#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Xml.XmlReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore dell'attributo con la proprietà <see cref="P:System.Xml.XmlReader.Name" /> specificata.</summary>
        <value>Valore dell'attributo specificato. Se l'attributo non viene trovato, verrà restituito <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non sposta il lettore.  
  
 Se il reader è posizionato su un `DocumentType` nodo, questo metodo può essere utilizzato per ottenere i valori letterali PUBLIC e SYSTEM, ad esempio, `reader["PUBLIC"]`  
  
   
  
## Examples  
 Nell'esempio seguente ottiene il valore dell'attributo ISBN.  
  
 [!code-csharp[XmlReaderBasic#7](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#7)]
 [!code-vb[XmlReaderBasic#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.GetAttribute(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome locale dell'attributo.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore dell'attributo con le proprietà <see cref="P:System.Xml.XmlReader.LocalName" /> e <see cref="P:System.Xml.XmlReader.NamespaceURI" /> specificate.</summary>
        <value>Valore dell'attributo specificato. Se l'attributo non viene trovato, verrà restituito <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non sposta il lettore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public abstract string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il nome locale del nodo corrente.</summary>
        <value>Nome del nodo corrente senza il prefisso. Ad esempio, <see langword="LocalName" /> viene <see langword="book" /> per l'elemento <c>&lt;bk: book&gt;</c>.  
  
Per i tipi di nodo privi di nome, quali <see langword="Text" />, <see langword="Comment" /> e così via, questa proprietà restituisce <see langword="String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente mostra il nome di ogni nodo, locale e, se presenti, il prefisso e URI dello spazio dei nomi.  
  
 [!code-csharp[XmlReaderBasic#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#9)]
 [!code-vb[XmlReaderBasic#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#9)]  
  
 L'esempio Usa il file Book2 come input.  
  
 [!code-xml[XML_Core_Files#5](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book2.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="P:System.Xml.XmlReader.Name" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public abstract string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member LookupNamespace : string -&gt; string" Usage="xmlReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso di cui risolvere l'URI dello spazio dei nomi. Per ottenere lo spazio dei nomi predefinito corrispondente, passare una stringa vuota.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, risolve il prefisso di uno spazio dei nomi nell'ambito dell'elemento corrente.</summary>
        <returns>URI dello spazio dei nomi a cui viene mappato il prefisso oppure <see langword="null" /> se non viene trovato alcun prefisso corrispondente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella stringa XML seguente, se il reader è posizionato in corrispondenza di `href` dell'attributo, il prefisso `a` viene risolto mediante la chiamata `reader.LookupNamespace("a")`. La stringa restituita è `urn:456`.  
  
```xml  
<root xmlns:a="urn:456">  
  <item>  
  <ref href="a:b"/>  
  </item>  
 </root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Quando ne viene eseguito l'override in una classe derivata, passa all'attributo specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public virtual void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="abstract member MoveToAttribute : int -&gt; unit&#xA;override this.MoveToAttribute : int -&gt; unit" Usage="xmlReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Indice dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, passa all'attributo con l'indice specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente consente di visualizzare tutti gli attributi sul nodo corrente.  
  
 [!code-csharp[XmlReaderBasic#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#4)]
 [!code-vb[XmlReaderBasic#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro ha un valore negativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member MoveToAttribute : string -&gt; bool" Usage="xmlReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, passa all'attributo con la proprietà <see cref="P:System.Xml.XmlReader.Name" /> specificata.</summary>
        <returns><see langword="true" /> se l'attributo viene trovato; in caso contrario, <see langword="false" />. Se viene restituito il valore <see langword="false" />, la posizione del lettore non subirà alcuna modifica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo avere chiamato `MoveToAttribute`, il <xref:System.Xml.XmlReader.Name%2A>, <xref:System.Xml.XmlReader.NamespaceURI%2A>, e <xref:System.Xml.XmlReader.Prefix%2A> riflettono le proprietà di quell'attributo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il parametro è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToAttribute (string name, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToAttribute(string name, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MoveToAttribute (name As String, ns As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MoveToAttribute(System::String ^ name, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member MoveToAttribute : string * string -&gt; bool" Usage="xmlReader.MoveToAttribute (name, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome locale dell'attributo.</param>
        <param name="ns">URI dello spazio dei nomi dell'attributo.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, passa all'attributo con le proprietà <see cref="P:System.Xml.XmlReader.LocalName" /> e <see cref="P:System.Xml.XmlReader.NamespaceURI" /> specificate.</summary>
        <returns><see langword="true" /> se l'attributo viene trovato; in caso contrario, <see langword="false" />. Se viene restituito il valore <see langword="false" />, la posizione del lettore non subirà alcuna modifica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo avere chiamato `MoveToAttribute`, il <xref:System.Xml.XmlReader.Name%2A>, <xref:System.Xml.XmlReader.NamespaceURI%2A>, e <xref:System.Xml.XmlReader.Prefix%2A> riflettono le proprietà di quell'attributo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentNullException">Entrambi i valori del parametro sono <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToContent">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeType MoveToContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xml.XmlNodeType MoveToContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveToContent () As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNodeType MoveToContent();" />
      <MemberSignature Language="F#" Value="abstract member MoveToContent : unit -&gt; System.Xml.XmlNodeType&#xA;override this.MoveToContent : unit -&gt; System.Xml.XmlNodeType" Usage="xmlReader.MoveToContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Controlla se il nodo corrente è un nodo di contenuto (testo diverso da spazi vuoti, <see langword="CDATA" />, <see langword="Element" />, <see langword="EndElement" />, <see langword="EntityReference" /> o <see langword="EndEntity" />). Se il nodo non è un nodo di contenuto, il lettore passa al nodo di contenuto successivo oppure alla fine del file. Ignora i nodi del tipo seguente: <see langword="ProcessingInstruction" />, <see langword="DocumentType" />, <see langword="Comment" />, <see langword="Whitespace" /> o <see langword="SignificantWhitespace" />.</summary>
        <returns>Proprietà <see cref="P:System.Xml.XmlReader.NodeType" /> del nodo corrente trovato dal metodo o <see langword="XmlNodeType.None" /> se il lettore ha raggiunto la fine del flusso di input.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il nodo corrente è un nodo attributo, questo metodo passa indietro il lettore all'elemento che possiede l'attributo.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.MoveToContentAsync%2A>.  
  
   
  
## Examples  
 Ciò è utile quando si desidera scrivere codice che possa ignorare i markup XML casuale senza interruzioni. Ad esempio, si supponga di che avere il codice seguente:  
  
 [!code-cpp[Classic WebData XmlReader.MoveToContent Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.MoveToContent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.MoveToContent Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.MoveToContent Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.MoveToContent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.MoveToContent Example/VB/source.vb#1)]  
  
 Questo codice può gestire l'input seguente senza interruzioni:  
  
```xml  
<price>123.4</price>  
```  
  
 e  
  
```xml  
<?xml version="1.0"><!DOCTYPE price SYSTEM  
  "abc"><price>123.4</price>  
```  
  
 e  
  
```xml  
<?xml version="1.0"><!DOCTYPE price SYSTEM "abc"  
  [<!ENTTIY p  
  "123.4">]><price>&p;</price>  
```  
  
 e  
  
```xml  
<!-- some test comment --><?processing  
  instruction?><price>123.4</price>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">È stata trovata una stringa XML non corretta nel flusso di input.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt; MoveToContentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Xml.XmlNodeType&gt; MoveToContentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToContentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveToContentAsync () As Task(Of XmlNodeType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Xml::XmlNodeType&gt; ^ MoveToContentAsync();" />
      <MemberSignature Language="F#" Value="abstract member MoveToContentAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt;&#xA;override this.MoveToContentAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt;" Usage="xmlReader.MoveToContentAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verifica in modo asincrono se il nodo corrente è un nodo di contenuto. Se il nodo non è un nodo di contenuto, il lettore passa al nodo di contenuto successivo oppure alla fine del file.</summary>
        <returns>Proprietà <see cref="P:System.Xml.XmlReader.NodeType" /> del nodo corrente trovato dal metodo o <see langword="XmlNodeType.None" /> se il lettore ha raggiunto la fine del flusso di input.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.MoveToContent%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public abstract bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MoveToElement();" />
      <MemberSignature Language="F#" Value="abstract member MoveToElement : unit -&gt; bool" Usage="xmlReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, passa all'elemento che contiene il nodo attributo corrente.</summary>
        <returns><see langword="true" /> se il lettore è posizionato in corrispondenza di un attributo, ovvero il lettore si sposta in corrispondenza dell'elemento che possiede l'attributo; <see langword="false" /> se il lettore non è posizionato in corrispondenza di un attributo, ovvero la posizione del lettore non subisce alcuna modifica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per restituire a un elemento dopo aver esplorato gli attributi. Questo metodo passa il lettore su uno dei seguenti tipi di nodo: `Element`, `DocumentType`, o `XmlDeclaration`.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare tutti gli attributi sul nodo corrente.  
  
 [!code-csharp[XmlReaderBasic#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#4)]
 [!code-vb[XmlReaderBasic#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="abstract member MoveToFirstAttribute : unit -&gt; bool" Usage="xmlReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, passa al primo attributo.</summary>
        <returns><see langword="true" /> se esiste un attributo, ovvero il lettore si sposta in corrispondenza del primo attributo; in caso contrario, <see langword="false" />, ovvero la posizione del lettore non subisce alcuna modifica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente ottiene il valore del primo attributo.  
  
 [!code-csharp[XmlReaderBasic#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#5)]
 [!code-vb[XmlReaderBasic#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="abstract member MoveToNextAttribute : unit -&gt; bool" Usage="xmlReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, passa all'attributo successivo.</summary>
        <returns><see langword="true" /> se esiste un attributo successivo; <see langword="false" /> se non esistono altri attributi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il nodo corrente è un nodo elemento, questo metodo è equivalente a <xref:System.Xml.XmlReader.MoveToFirstAttribute%2A>. Se `MoveToNextAttribute` restituisce `true`, il lettore viene spostato all'attributo successivo; in caso contrario, il posizione del lettore non subisce alcuna modifica.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare tutti gli attributi sul nodo corrente.  
  
 [!code-csharp[XmlReaderBasic#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#6)]
 [!code-vb[XmlReaderBasic#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il nome completo del nodo corrente.</summary>
        <value>Nome completo del nodo corrente. Ad esempio, <see langword="Name" /> viene <see langword="bk:book" /> per l'elemento <c>&lt;bk: book&gt;</c>.  
  
Il nome restituito dipende dalla proprietà <see cref="P:System.Xml.XmlReader.NodeType" /> del nodo. I seguenti tipi di nodo restituiscono i valori inclusi nell'elenco. Tutti gli altri tipi di nodo restituiscono una stringa vuota.  
  
 <list type="table"><listheader><term> Tipo di nodo 
 </term><description> nome 
 </description></listheader><item><term><see langword="Attribute" /></term><description> Nome dell'attributo.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> Nome del tipo di documento.  
  
 </description></item><item><term><see langword="Element" /></term><description> Nome del tag.  
  
 </description></item><item><term><see langword="EntityReference" /></term><description> Nome dell'entità a cui si fa riferimento.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> Destinazione dell'istruzione di elaborazione.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> Stringa letterale <see langword="xml" />.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente legge un file XML e vengono visualizzati tutti i nodi.  
  
 [!code-csharp[XmlReaderBasic#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 L'esempio Usa il `items.xml` file.  
  
 [!code-xml[XML_Core_Files#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="P:System.Xml.XmlReader.LocalName" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public abstract string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene l'URI dello spazio dei nomi, definito nella specifica W3C Namespace, del nodo su cui è posizionato il lettore.</summary>
        <value>URI dello spazio dei nomi del nodo corrente; in caso contrario, una stringa vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è rilevante per i `Element` e `Attribute` solo nodi.  
  
   
  
## Examples  
 L'esempio seguente mostra il nome di ogni nodo, locale e, se presenti, il prefisso e URI dello spazio dei nomi.  
  
 [!code-csharp[XmlReaderBasic#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#9)]
 [!code-vb[XmlReaderBasic#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#9)]  
  
 L'esempio Usa il file Book2 come input.  
  
 [!code-xml[XML_Core_Files#5](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book2.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene l'oggetto <see cref="T:System.Xml.XmlNameTable" /> associato a questa implementazione.</summary>
        <value>Oggetto <see langword="XmlNameTable" /> che consente di ottenere la versione atomizzata di una stringa all'interno del nodo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutti i nomi di nodo e di attributo restituiscano da <xref:System.Xml.XmlReader> atomizzate usando il `NameTable`. Quando viene restituito più volte lo stesso nome (ad esempio, `Customer`), quindi lo stesso `String` verrà restituito per il nome dell'oggetto. Questo rende possibile per la scrittura di codice efficace tale oggetto confronti in queste stringhe anziché i confronti di stringhe costosa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il tipo del nodo corrente.</summary>
        <value>Uno dei valori di enumerazione che specifica il tipo del nodo corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente legge un file XML e vengono visualizzati tutti i nodi.  
  
 [!code-csharp[XmlReaderBasic#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 L'esempio Usa il `items.xml` file.  
  
 [!code-xml[XML_Core_Files#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public abstract string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il prefisso dello spazio dei nomi associato al nodo corrente.</summary>
        <value>Prefisso dello spazio dei nomi associato al nodo corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente mostra il nome di ogni nodo, locale e, se presenti, il prefisso e URI dello spazio dei nomi.  
  
 [!code-csharp[XmlReaderBasic#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#9)]
 [!code-vb[XmlReaderBasic#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#9)]  
  
 L'esempio Usa il file Book2 come input.  
  
 [!code-xml[XML_Core_Files#5](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book2.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public virtual char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il carattere punto interrogativo (?) usato per delimitare il valore di un nodo attributo.</summary>
        <value>Carattere virgoletta (" o ') usato per delimitare il valore del nodo di un attributo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà si applica solo a un nodo attributo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xmlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, visualizza il nodo successivo nel flusso.</summary>
        <returns><see langword="true" /> se il nodo successivo è stato letto correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Xml.XmlReader> viene prima creato e inizializzato, non è disponibile alcuna informazione. È necessario chiamare <xref:System.Xml.XmlReader.Read%2A> per leggere il primo nodo. Il <xref:System.Xml.XmlReader.Read%2A> metodo imposta lo stato del lettore XML per avviare <xref:System.Xml.ReadState> e per scorrere il file XML in modo sequenziale fino a quando non raggiunge la fine del file, a quel punto il metodo restituisce un valore di `false`.  
  
 Questo metodo richiede almeno quattro byte dal flusso di dati per iniziare l'analisi. Se vengono restituiti meno di quattro byte e non sono presenti più dati nel flusso, il metodo restituisce `false`. Se sono presenti più dati nel flusso, il metodo bloccherà l'analisi fino alla ricezione del quarto byte.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente legge un file XML e vengono visualizzati tutti i nodi.  
  
 [!code-csharp[XmlReaderBasic#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 L'esempio Usa il `items.xml` file.  
  
 [!code-xml[XML_Core_Files#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 **Output:**  
  
```  
<Item>Test with an entity: 123</Item><Item>Test with a child element <more> stuff</Item><Item>Test with a CDATA section <![CDATA[<456>]]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Errore durante l'analisi del codice XML.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ReadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReadAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadAsync () As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;bool&gt; ^ ReadAsync();" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.ReadAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="xmlReader.ReadAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge in modo asincrono il nodo successivo del flusso.</summary>
        <returns><see langword="true" /> se è stata completata la lettura del nodo successivo; <see langword="false" /> se non esistono altri nodi da leggere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.Read%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public abstract bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="abstract member ReadAttributeValue : unit -&gt; bool" Usage="xmlReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, analizza il valore dell'attributo incluso in uno o più nodi <see langword="Text" />, <see langword="EntityReference" /> o <see langword="EndEntity" />.</summary>
        <returns><see langword="true" /> se sono presenti nodi da restituire.  
  
 <see langword="false" /> se il lettore non è posizionato in corrispondenza di un nodo attributo quando viene effettuata la chiamata iniziale oppure se è stato letto il valore di tutti gli attributi.  
  
Un attributo vuoto, quale <c>misc=""</c>, restituisce <see langword="true" /> con un singolo nodo il cui valore è <see langword="String.Empty" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare questo metodo dopo la chiamata <xref:System.Xml.XmlReader.MoveToAttribute%2A> leggere con attenzione i nodi di riferimento di testo o un'entità che compongono il valore dell'attributo. Il <xref:System.Xml.XmlReader.Depth%2A> dei nodi del valore di attributo è più la profondità del nodo attributo, incrementa e decrementa di uno quando esegue l'istruzione da e verso i riferimenti alle entità generali.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAs (returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ReadContentAs(Type ^ returnType, System::Xml::IXmlNamespaceResolver ^ namespaceResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAs : Type * System.Xml.IXmlNamespaceResolver -&gt; obj&#xA;override this.ReadContentAs : Type * System.Xml.IXmlNamespaceResolver -&gt; obj" Usage="xmlReader.ReadContentAs (returnType, namespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">Tipo di valore da restituire.  
  
 **Nota** Con il rilascio di .NET Framework 3.5, il valore del parametro <paramref name="returnType" /> ora può essere il tipo <see cref="T:System.DateTimeOffset" />.</param>
        <param name="namespaceResolver">Oggetto <see cref="T:System.Xml.IXmlNamespaceResolver" /> usato per risolvere qualsiasi prefisso di spazio dei nomi correlato al tipo di conversione. Può essere usato ad esempio per la conversione di un oggetto <see cref="T:System.Xml.XmlQualifiedName" /> in <c>xs:string</c>.  
  
Il valore può essere <see langword="null" />.</param>
        <summary>Legge il contenuto come oggetto del tipo specificato.</summary>
        <returns>Contenuto di testo concatenato o valore dell'attributo convertito nel tipo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il contenuto di testo nella posizione corrente del reader e lo converte nel tipo restituito richiesto. Il testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA sono concatenati. I commenti e le istruzioni di elaborazione vengono ignorati e i riferimenti alle entità vengono risolti automaticamente.  
  
 Questo metodo viene utilizzato per leggere, convertire se necessario e restituire gli elementi di valore atomico dal nodo corrente del contenuto. Se il tipo di input è un mapping valido per il tipo del nodo corrente quindi un'istanza del tipo di destinazione che contiene il valore del nodo corrente viene restituito. Vedere la sezione osservazioni nel <xref:System.Xml.XmlReader> referencepage per un elenco dei mapping predefiniti.  
  
 Ad esempio, se si ha il seguente testo XML:  
  
```xml  
<elem>123 <!-- comment --> <?pi my_text?> 456 <?pi another_pi?></elem>  
```  
  
 Se i dati tipizzati e una matrice di stringhe viene fornita per il <xref:System.Xml.XmlReader.ReadContentAs%2A> chiamata al metodo, quindi i valori interi vengono convertiti da stringhe in base all'elenco di mapping del tipo CLR valido.  
  
 Se i dati non sono tipizzati e una matrice di stringhe viene fornita per il <xref:System.Xml.XmlReader.ReadContentAs%2A> chiamata di metodo, il contenuto viene analizzato in stringhe separate. Viene restituita una matrice contenente due stringhe con i valori "123" e "456". Gli spazi non vengono mantenuti dal contenuto.  
  
 In genere durante la lettura di dati non tipizzati il contenuto viene analizzato in base al tipo fornito. Ad esempio, se una matrice di integer viene fornita per il <xref:System.Xml.XmlReader.ReadContentAs%2A> metodo chiamare quindi la stringa viene analizzata in una matrice di interi {123,456}.  
  
 Nell'esempio seguente il testo XML non sia separato da spazi  
  
```xml  
<elem>123<!-- comment --><?pi my_text?>456789<?pi another_pi?></elem>  
```  
  
 Se il contenuto è tipizzato e una matrice di stringhe viene fornita per il <xref:System.Xml.XmlReader.ReadContentAs%2A> metodo quindi chiama una matrice che contiene una stringa concatenata viene restituita con il valore "123456789".  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadContentAsAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlReader.ReadContentAs%2A> per restituire il contenuto dell'elemento colore in una matrice di oggetti stringa.  
  
 [!code-csharp[XmlReader.ReadContentAs#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadContentAs/CS/readContentAs.cs#2)]
 [!code-vb[XmlReader.ReadContentAs#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadContentAs/VB/readContentAs.vb#2)]  
  
 Nell'esempio viene utilizzato il file `dataFile_2.xml` come input.  
  
 [!code-xml[XmlReader.ReadContentAs#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadContentAs/XML/dataFile_2.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Il contenuto non presenta il formato corretto per il tipo di destinazione.</exception>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="returnType" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.OverflowException">Leggere <see langword="Decimal.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadContentAsAsync(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsAsync (returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ ReadContentAsAsync(Type ^ returnType, System::Xml::IXmlNamespaceResolver ^ namespaceResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsAsync : Type * System.Xml.IXmlNamespaceResolver -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.ReadContentAsAsync : Type * System.Xml.IXmlNamespaceResolver -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlReader.ReadContentAsAsync (returnType, namespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">Tipo di valore da restituire.</param>
        <param name="namespaceResolver">Oggetto <see cref="T:System.Xml.IXmlNamespaceResolver" /> usato per risolvere qualsiasi prefisso di spazio dei nomi correlato al tipo di conversione.</param>
        <summary>Legge in modo asincrono il contenuto come oggetto del tipo specificato.</summary>
        <returns>Contenuto di testo concatenato o valore dell'attributo convertito nel tipo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadContentAs%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsBase64 : byte[] * int * int -&gt; int&#xA;override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge il contenuto e restituisce byte binari decodificati Base64.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Streaming del contenuto di questo metodo, decodifica il `Base64` del contenuto e restituisce i byte binari decodificati (ad esempio, un inline `Base64` immagine GIF codificati) nel buffer. Questo metodo può essere chiamato in successione per leggere i grandi flussi di testo incorporato. Per altre informazioni, vedere RFC 1521, "parte MIME (Multipurpose Internet Mail Extensions) uno: Meccanismi per la specifica e che descrive il formato dei corpi dei messaggi Internet". È possibile ottenere RFC dal [richiesta per il sito Web di commenti](https://go.microsoft.com/fwlink/?LinkId=37119).  
  
> [!NOTE]
>  Non è necessario accedere una delle proprietà tra le chiamate al lettore le <xref:System.Xml.XmlReader.ReadContentAsBase64%2A> metodo fino a quando il metodo restituisce il valore `0`.  
  
 Questo metodo presenta il comportamento seguente:  
  
-   <xref:System.Xml.XmlReader.ReadContentAsBase64%2A> Restituisce il valore `0` quando ha raggiunto la fine del flusso di byte su cui è stato eseguito. Il reader è posizionato sul primo nodo non di contenuto.  
  
-   Se si richiede un valore più basso, o il numero esatto di byte rispetto a quelli vengono lasciati nel flusso di cui il lettore resti nella posizione corrente.  
  
-   <xref:System.Xml.XmlReader.ReadContentAsBase64%2A> non è supportato nei tipi di nodo XML seguenti: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadContentAsBase64Async%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">L'indice nel buffer oppure la somma di indice e numero è superiore alla dimensione del buffer allocato.</exception>
        <exception cref="T:System.NotSupportedException">L'implementazione di <see cref="T:System.Xml.XmlReader" /> non supporta questo metodo.</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadContentAsBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsBase64Async (buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadContentAsBase64Async(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.ReadContentAsBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="xmlReader.ReadContentAsBase64Async (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge in modo asincrono il contenuto e restituisce byte binari con decodifica Base64.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadContentAsBase64%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsBinHex : byte[] * int * int -&gt; int&#xA;override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge il contenuto e restituisce i byte binari decodificati <see langword="BinHex" />.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Streaming del contenuto di questo metodo, decodifica il `BinHex` del contenuto e restituisce i byte binari decodificati (ad esempio, un inline `BinHex` immagine GIF codificati) nel buffer. Questo metodo può essere chiamato in successione per leggere i grandi flussi di testo incorporato.  
  
> [!NOTE]
>  Non è necessario accedere una delle proprietà tra le chiamate al lettore le <xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> metodo fino a quando il metodo restituisce il valore `0`.  
  
 Questo metodo presenta il comportamento seguente:  
  
-   <xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> Restituisce il valore `0` quando ha raggiunto la fine del flusso di byte su cui è stato eseguito. Il reader è posizionato sul primo nodo non di contenuto.  
  
-   Se si richiede un numero inferiore o uguale al numero dei byte vengono lasciati nel flusso, il lettore resta nella posizione corrente.  
  
-   <xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> non è supportato nei tipi di nodo XML seguenti: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation, Entity`, `DocumentFragment`.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadContentAsBinHexAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">L'indice nel buffer oppure la somma di indice e numero è superiore alla dimensione del buffer allocato.</exception>
        <exception cref="T:System.NotSupportedException">L'implementazione di <see cref="T:System.Xml.XmlReader" /> non supporta questo metodo.</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadContentAsBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsBinHexAsync (buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadContentAsBinHexAsync(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.ReadContentAsBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="xmlReader.ReadContentAsBinHexAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge in modo asincrono il contenuto e restituisce dati binari con decodifica <see langword="BinHex" />.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadContentAsBinHex%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadContentAsBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadContentAsBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadContentAsBoolean();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsBoolean : unit -&gt; bool&#xA;override this.ReadContentAsBoolean : unit -&gt; bool" Usage="xmlReader.ReadContentAsBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come <see langword="Boolean" />.</summary>
        <returns>Contenuto di testo come oggetto <see cref="T:System.Boolean" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato `xsd:boolean`, il lettore di testo restituisce un tipo unboxed <xref:System.Boolean> oggetto. Se il contenuto non è tipizzato `xsd:boolean`, il lettore tenta di convertirlo in un <xref:System.Boolean> oggetto in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlReader.ReadContentAsBoolean%2A> metodo per leggere l'attributo come un B`oolean` valore.  
  
 [!code-csharp[XmlReader.ReadContentAs#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadContentAs/CS/readContentAs.cs#1)]
 [!code-vb[XmlReader.ReadContentAs#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadContentAs/VB/readContentAs.vb#1)]  
  
 Nell'esempio viene utilizzato il file `dataFile_2.xml` come input.  
  
 [!code-xml[XmlReader.ReadContentAs#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadContentAs/XML/dataFile_2.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadContentAsDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadContentAsDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ReadContentAsDateTime();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsDateTime : unit -&gt; DateTime&#xA;override this.ReadContentAsDateTime : unit -&gt; DateTime" Usage="xmlReader.ReadContentAsDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come oggetto <see cref="T:System.DateTime" />.</summary>
        <returns>Contenuto di testo come oggetto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato `xsd:dateTime`, il lettore di testo restituisce un tipo unboxed <xref:System.DateTime> oggetto. Se il contenuto non è tipizzato `xsd:dateTime`, il lettore tenta di convertirlo in un <xref:System.DateTime> oggetto in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
> [!NOTE]
>  Non è possibile usare il valore <xref:System.DateTime.Year%2A?displayProperty=nameWithType> quando il contenuto è tipizzato come `xsd:gMonthDay`. <xref:System.Xml.XmlReader> imposta sempre la <xref:System.DateTime.Year%2A?displayProperty=nameWithType> valore in questo caso su 1904.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDateTimeOffset">
      <MemberSignature Language="C#" Value="public virtual DateTimeOffset ReadContentAsDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTimeOffset ReadContentAsDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTimeOffset ReadContentAsDateTimeOffset();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsDateTimeOffset : unit -&gt; DateTimeOffset&#xA;override this.ReadContentAsDateTimeOffset : unit -&gt; DateTimeOffset" Usage="xmlReader.ReadContentAsDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come oggetto <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Contenuto di testo come oggetto <see cref="T:System.DateTimeOffset" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadContentAsDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadContentAsDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Decimal ReadContentAsDecimal();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsDecimal : unit -&gt; decimal&#xA;override this.ReadContentAsDecimal : unit -&gt; decimal" Usage="xmlReader.ReadContentAsDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come oggetto <see cref="T:System.Decimal" />.</summary>
        <returns>Contenuto di testo nella posizione corrente come oggetto <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato `xsd:decimal`, il lettore di testo restituisce un tipo unboxed <xref:System.Decimal> oggetto. Se il contenuto non è tipizzato `xsd:decimal`, il lettore tenta di convertirlo in un <xref:System.Decimal> oggetto in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadContentAsDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadContentAsDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDouble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual double ReadContentAsDouble();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsDouble : unit -&gt; double&#xA;override this.ReadContentAsDouble : unit -&gt; double" Usage="xmlReader.ReadContentAsDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come numero a virgola mobile e precisione doppia.</summary>
        <returns>Contenuto di testo come numero a virgola mobile e precisione doppia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato `xsd:double`, il lettore di testo restituisce un numero a virgola mobile a precisione doppia. Se il contenuto non è tipizzato `xsd:double`, il lettore tenta di convertirlo in un numero a virgola mobile a precisione doppia in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadContentAsFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadContentAsFloat() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsFloat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsFloat () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual float ReadContentAsFloat();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsFloat : unit -&gt; single&#xA;override this.ReadContentAsFloat : unit -&gt; single" Usage="xmlReader.ReadContentAsFloat " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come numero a virgola mobile e precisione singola.</summary>
        <returns>Contenuto di testo nella posizione corrente come numero a virgola mobile e precisione singola.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato `xsd:float`, il lettore di testo restituisce un tipo unboxed un numero a virgola mobile a precisione singola. Se il contenuto non è tipizzato `xsd:float`, il lettore tenta di convertirlo in un numero a virgola mobile e precisione singola in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsInt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsInt () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadContentAsInt();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsInt : unit -&gt; int&#xA;override this.ReadContentAsInt : unit -&gt; int" Usage="xmlReader.ReadContentAsInt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come valore intero con segno a 32 bit.</summary>
        <returns>Contenuto di testo come valore intero con segno a 32 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato `xsd:integer`, il lettore restituisce un intero con segno a 32 bit unboxed. Se il contenuto non è tipizzato `xsd:integer`, il lettore tenta di convertirlo in un intero con segno a 32 bit in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadContentAsLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadContentAsLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsLong" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsLong () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long ReadContentAsLong();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsLong : unit -&gt; int64&#xA;override this.ReadContentAsLong : unit -&gt; int64" Usage="xmlReader.ReadContentAsLong " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come valore intero con segno a 64 bit.</summary>
        <returns>Contenuto di testo come valore intero con segno a 64 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato `xsd:long`, il lettore restituisce un intero con segno a 64 bit unboxed. Se il contenuto non è tipizzato `xsd:long`, il lettore tenta di convertirlo in un intero con segno a 64 bit in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Nella tabella seguente descrive questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Uguale allo `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resti nella posizione corrente|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadContentAsObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadContentAsObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsObject" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsObject () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ReadContentAsObject();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsObject : unit -&gt; obj&#xA;override this.ReadContentAsObject : unit -&gt; obj" Usage="xmlReader.ReadContentAsObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come <see cref="T:System.Object" />.</summary>
        <returns>Contenuto di testo come oggetto CLR (Common Language Runtime) più appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Se il contenuto è tipizzato, il lettore restituisce un oggetto CLR boxed del tipo più appropriato, specificato da di <xref:System.Xml.XmlReader.ValueType%2A> proprietà. Se il contenuto è un tipo di elenco, il lettore restituisce una matrice di oggetti boxed del tipo appropriato.  
  
> [!NOTE]
>  Se si verifica un errore di convalida durante l'analisi del contenuto e il lettore è un' <xref:System.Xml.XmlReader> oggetto creato tramite il <xref:System.Xml.XmlReader.Create%2A> metodo, il lettore restituisce il contenuto sotto forma di stringa. In altre parole quando un errore di convalida o un avviso si verifica, il contenuto viene considerato per essere non tipizzato.  
  
 Se il contenuto non è tipizzato, il lettore restituirà il contenuto come stringa.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resti nella posizione corrente|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Il valore dell'elemento se il lettore è uno schema di convalida di lettura (<xref:System.Xml.XmlReaderSettings.ValidationType%2A> è impostata su <xref:System.Xml.ValidationType.Schema>); in caso contrario una stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadContentAsObjectAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsObjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsObjectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadContentAsObjectAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsObjectAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsObjectAsync () As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ ReadContentAsObjectAsync();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsObjectAsync : unit -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.ReadContentAsObjectAsync : unit -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlReader.ReadContentAsObjectAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge in modo asincrono il contenuto di testo nella posizione corrente come oggetto <see cref="T:System.Object" />.</summary>
        <returns>Contenuto di testo come oggetto CLR (Common Language Runtime) più appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadContentAsObject%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadContentAsString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadContentAsString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadContentAsString();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsString : unit -&gt; string&#xA;override this.ReadContentAsString : unit -&gt; string" Usage="xmlReader.ReadContentAsString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il contenuto di testo nella posizione corrente come oggetto <see cref="T:System.String" />.</summary>
        <returns>Contenuto di testo come oggetto <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di concatenare testo, gli spazi vuoti, gli spazi vuoti significativi e le sezioni CDATA e ignora eventuali commenti o istruzioni di elaborazione. I riferimenti alle entità vengono risolti automaticamente.  
  
 Questo metodo può essere utilizzato convertire i valori tipizzati in una stringa o per leggere il contenuto di testo ignorando commenti e le istruzioni di elaborazione.  
  
 La tabella seguente descrive come questo metodo considera ogni tipo di nodo.  
  
|XmlNodeType|Valore restituito|Comportamento del lettore|  
|-----------------|------------------|---------------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|Contenuto concatenato di nodi di tipo text, CDATA, spazi vuoti e spazi vuoti significativi convertiti nel tipo richiesto.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`Attribute`|Equivale a chiamare `XmlConvert.ToXxx` sul valore dell'attributo.|Il lettore resta nella posizione corrente.|  
|`Comment`<br /><br /> `ProcessingInstruction`|Ignora l'istruzione di elaborazione (PI, Processing Instruction) o il commento e legge il contenuto del testo concatenato successivo all'istruzione di elaborazione o al commento.|Si sposta al successivo tag di fine o di inizio dell'elemento. I riferimenti a entità vengono espansi automaticamente.|  
|`EndElement`|Stringa vuota.|Il lettore resta nella posizione corrente.|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|Viene generato un tipo <xref:System.InvalidOperationException>.|Non definito, sebbene in genere il lettore resti nella posizione corrente.|  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadContentAsStringAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Il tentativo di cast non è valido.</exception>
        <exception cref="T:System.FormatException">Il formato della stringa non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadContentAsStringAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadContentAsStringAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsStringAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadContentAsStringAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadContentAsStringAsync();" />
      <MemberSignature Language="F#" Value="abstract member ReadContentAsStringAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.ReadContentAsStringAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="xmlReader.ReadContentAsStringAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge in modo asincrono il contenuto di testo nella posizione corrente come oggetto <see cref="T:System.String" />.</summary>
        <returns>Contenuto di testo come oggetto <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadContentAsString%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAs">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge l'elemento corrente e restituisce il contenuto come oggetto del tipo specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAs (returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ReadElementContentAs(Type ^ returnType, System::Xml::IXmlNamespaceResolver ^ namespaceResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAs : Type * System.Xml.IXmlNamespaceResolver -&gt; obj&#xA;override this.ReadElementContentAs : Type * System.Xml.IXmlNamespaceResolver -&gt; obj" Usage="xmlReader.ReadElementContentAs (returnType, namespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">Tipo di valore da restituire.  
  
 **Nota** Con il rilascio di .NET Framework 3.5, il valore del parametro <paramref name="returnType" /> ora può essere il tipo <see cref="T:System.DateTimeOffset" />.</param>
        <param name="namespaceResolver">Oggetto <see cref="T:System.Xml.IXmlNamespaceResolver" /> usato per risolvere qualsiasi prefisso di spazio dei nomi correlato al tipo di conversione.</param>
        <summary>Legge il contenuto dell'elemento come il tipo richiesto.</summary>
        <returns>Contenuto dell'elemento convertito nell'oggetto tipizzato richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadElementContentAsAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlReader.ReadElementContentAs%2A> metodo per leggere il contenuto del `date` nodo.  
  
 [!code-csharp[XmlReader.ReadElementContentAs#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#5)]
 [!code-vb[XmlReader.ReadElementContentAs#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#5)]  
  
 Nell'esempio viene utilizzato il file `dataFile.xml` come input.  
  
 [!code-xml[XmlReader.ReadElementContentAs#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito nel tipo richiesto.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">Leggere <see langword="Decimal.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAs (returnType As Type, namespaceResolver As IXmlNamespaceResolver, localName As String, namespaceURI As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ReadElementContentAs(Type ^ returnType, System::Xml::IXmlNamespaceResolver ^ namespaceResolver, System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAs : Type * System.Xml.IXmlNamespaceResolver * string * string -&gt; obj&#xA;override this.ReadElementContentAs : Type * System.Xml.IXmlNamespaceResolver * string * string -&gt; obj" Usage="xmlReader.ReadElementContentAs (returnType, namespaceResolver, localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="returnType">Tipo di valore da restituire.  
  
 **Nota** Con il rilascio di .NET Framework 3.5, il valore del parametro <paramref name="returnType" /> ora può essere il tipo <see cref="T:System.DateTimeOffset" />.</param>
        <param name="namespaceResolver">Oggetto <see cref="T:System.Xml.IXmlNamespaceResolver" /> usato per risolvere qualsiasi prefisso di spazio dei nomi correlato al tipo di conversione.</param>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge il contenuto dell'elemento come il tipo richiesto.</summary>
        <returns>Contenuto dell'elemento convertito nell'oggetto tipizzato richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito nel tipo richiesto.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
        <exception cref="T:System.OverflowException">Leggere <see langword="Decimal.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadElementContentAsAsync(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsAsync (returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ ReadElementContentAsAsync(Type ^ returnType, System::Xml::IXmlNamespaceResolver ^ namespaceResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsAsync : Type * System.Xml.IXmlNamespaceResolver -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.ReadElementContentAsAsync : Type * System.Xml.IXmlNamespaceResolver -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlReader.ReadElementContentAsAsync (returnType, namespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">Tipo di valore da restituire.</param>
        <param name="namespaceResolver">Oggetto <see cref="T:System.Xml.IXmlNamespaceResolver" /> usato per risolvere qualsiasi prefisso di spazio dei nomi correlato al tipo di conversione.</param>
        <summary>Legge in modo asincrono il contenuto dell'elemento come il tipo richiesto.</summary>
        <returns>Contenuto dell'elemento convertito nell'oggetto tipizzato richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadElementContentAs%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsBase64 : byte[] * int * int -&gt; int&#xA;override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge l'elemento e decodifica il contenuto <see langword="Base64" />.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il contenuto dell'elemento, decodifica usando `Base64` codifica e restituisce i byte binari decodificati (ad esempio, un inline `Base64`-immagine GIF codificati) nel buffer. Per altre informazioni, vedere RFC 1521, "parte MIME (Multipurpose Internet Mail Extensions) uno: Meccanismi per la specifica e che descrive il formato dei corpi dei messaggi Internet". È possibile ottenere RFC dal [richiesta per il sito Web di commenti](https://go.microsoft.com/fwlink/?LinkId=37119).  
  
 <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A> può solo leggere elementi con contenuto semplice. L'elemento può contenere testo, gli spazi vuoti, gli spazi vuoti significativi, sezioni CDATA, commenti e istruzioni di elaborazione. Può inoltre contenere i riferimenti alle entità, vengono espansi automaticamente. L'elemento non può avere elementi figlio.  
  
 Questo metodo è molto simile al <xref:System.Xml.XmlReader.ReadContentAsBase64%2A> metodo ad eccezione del fatto che può essere chiamato solo su tipi di nodo elemento.  
  
 Se il `count` valore è maggiore del numero di byte nel documento, o se è uguale al numero di byte nel documento, il <xref:System.Xml.XmlReader> legge tutti i byte rimanenti del documento e restituisce il numero di byte letti. La prossima <xref:System.Xml.XmlReader> chiamata al metodo restituisce zero e si sposta il lettore al nodo successivo le `EndElement`.  
  
 Se si chiama <xref:System.Xml.XmlReader.Read%2A> prima di tutto il contenuto dell'elemento viene utilizzato, il lettore potrebbe comportarsi come se fosse stato utilizzato il primo contenuto e quindi il <xref:System.Xml.XmlReader.Read%2A> metodo è stato chiamato. Ciò significa che il lettore leggerà tutto il testo fino a quando non viene rilevato l'elemento finale. Verrà quindi leggere il nodo di tag di fine, leggere il nodo successivo e quindi si posizionerà sul prossimo nodo successivo.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadElementContentAsBase64Async%2A>.  
  
   
  
## Examples  
 L'esempio seguente legge un inline `Base64` immagine codificati. Il `Base64` i dati sono incorporati all'interno di `<image>` elemento. Oggetto <xref:System.IO.BinaryWriter> viene usato per creare un nuovo file di dati binari.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#4)]
 [!code-vb[XmlReader_Read_Write_Binary#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">L'indice nel buffer oppure la somma di indice e numero è superiore alla dimensione del buffer allocato.</exception>
        <exception cref="T:System.NotSupportedException">L'implementazione di <see cref="T:System.Xml.XmlReader" /> non supporta questo metodo.</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento include contenuto misto.</exception>
        <exception cref="T:System.FormatException">Il contenuto non può essere convertito nel tipo richiesto.</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadElementContentAsBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsBase64Async (buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadElementContentAsBase64Async(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.ReadElementContentAsBase64Async : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="xmlReader.ReadElementContentAsBase64Async (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge in modo asincrono l'elemento e decodifica il contenuto <see langword="Base64" />.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsBinHex : byte[] * int * int -&gt; int&#xA;override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge l'elemento e decodifica il contenuto <see langword="BinHex" />.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il contenuto dell'elemento, decodifica usando `BinHex` codifica e restituisce i byte binari decodificati (ad esempio, un inline `BinHex`-immagine GIF codificati) nel buffer.  
  
 Questo metodo può solo leggere elementi con contenuto semplice. L'elemento può contenere testo, gli spazi vuoti, gli spazi vuoti significativi, sezioni CDATA, commenti e istruzioni di elaborazione. Può inoltre contenere i riferimenti alle entità, vengono espansi automaticamente. L'elemento non può avere elementi figlio.  
  
 Questo metodo è molto simile al <xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> metodo ad eccezione del fatto che può essere chiamato solo su tipi di nodo elemento.  
  
 Se il `count` valore è maggiore del numero di byte nel documento, o se è uguale al numero di byte nel documento, il <xref:System.Xml.XmlReader> legge tutti i byte rimanenti del documento e restituisce il numero di byte letti. La prossima <xref:System.Xml.XmlReader> chiamata al metodo restituisce zero e si sposta il lettore al nodo successivo le `EndElement`.  
  
 Se si chiama <xref:System.Xml.XmlReader.Read%2A> prima di tutto il contenuto dell'elemento viene utilizzato, il lettore potrebbe comportarsi come se fosse stato utilizzato il primo contenuto e quindi il <xref:System.Xml.XmlReader.Read%2A> metodo è stato chiamato. Ciò significa che il lettore leggerà tutto il testo fino a quando non viene rilevato l'elemento finale. Verrà quindi leggere il nodo di tag di fine, leggere il nodo successivo e quindi si posizionerà sul prossimo nodo successivo.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadElementContentAsBinHexAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente legge un inline `BinHex` immagine codificati. Il `BinHex` i dati sono incorporati all'interno di `<image>` elemento. Oggetto <xref:System.IO.BinaryWriter> viene usato per creare un nuovo file di dati binari.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#2)]
 [!code-vb[XmlReader_Read_Write_Binary#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">L'indice nel buffer oppure la somma di indice e numero è superiore alla dimensione del buffer allocato.</exception>
        <exception cref="T:System.NotSupportedException">L'implementazione di <see cref="T:System.Xml.XmlReader" /> non supporta questo metodo.</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento include contenuto misto.</exception>
        <exception cref="T:System.FormatException">Il contenuto non può essere convertito nel tipo richiesto.</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadElementContentAsBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsBinHexAsync (buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadElementContentAsBinHexAsync(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.ReadElementContentAsBinHexAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="xmlReader.ReadElementContentAsBinHexAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Buffer in cui copiare il testo risultante. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset nel buffer a partire da cui iniziare a copiare il risultato.</param>
        <param name="count">Numero massimo di byte da copiare nel buffer. Il numero effettivo di byte copiati viene restituito da questo metodo.</param>
        <summary>Legge in modo asincrono l'elemento e decodifica il contenuto <see langword="BinHex" />.</summary>
        <returns>Numero di byte scritti nel buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsBoolean">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge il valore dell'elemento corrente come oggetto <see cref="T:System.Boolean" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadElementContentAsBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadElementContentAsBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadElementContentAsBoolean();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsBoolean : unit -&gt; bool&#xA;override this.ReadElementContentAsBoolean : unit -&gt; bool" Usage="xmlReader.ReadElementContentAsBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.Boolean" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.Boolean" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto dell'elemento è stato digitato `xsd:boolean`, il lettore di testo restituisce un tipo unboxed <xref:System.Boolean> oggetto. Se il contenuto non è tipizzato `xsd:boolean`, il lettore tenta di convertirlo in un <xref:System.Boolean> oggetto in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
oppure 
Il contenuto dell'elemento non può essere convertito in un oggetto <see cref="T:System.Boolean" />.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadElementContentAsBoolean (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadElementContentAsBoolean(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsBoolean (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadElementContentAsBoolean(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsBoolean : string * string -&gt; bool&#xA;override this.ReadElementContentAsBoolean : string * string -&gt; bool" Usage="xmlReader.ReadElementContentAsBoolean (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come oggetto <see cref="T:System.Boolean" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.Boolean" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:boolean`, il lettore di testo restituisce un tipo unboxed <xref:System.Boolean> oggetto. Se il contenuto non è tipizzato `xsd:boolean`, il lettore tenta di convertirlo in un <xref:System.Boolean> oggetto in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito nel tipo richiesto.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsDateTime">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.DateTime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadElementContentAsDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadElementContentAsDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ReadElementContentAsDateTime();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsDateTime : unit -&gt; DateTime&#xA;override this.ReadElementContentAsDateTime : unit -&gt; DateTime" Usage="xmlReader.ReadElementContentAsDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.DateTime" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:dateTime`, il lettore di testo restituisce un tipo unboxed <xref:System.DateTime> oggetto. Se il contenuto non è tipizzato `xsd:dateTime`, il lettore tenta di convertirlo in un <xref:System.DateTime> oggetto in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
> [!NOTE]
>  Non è possibile usare il valore <xref:System.DateTime.Year%2A?displayProperty=nameWithType> quando il contenuto è tipizzato come `xsd:gMonthDay`. <xref:System.Xml.XmlReader> imposta sempre la <xref:System.DateTime.Year%2A?displayProperty=nameWithType> valore in questo caso su 1904.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A> metodo per leggere il contenuto del `date` elemento.  
  
 [!code-csharp[XmlReader.ReadElementContentAs#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#4)]
 [!code-vb[XmlReader.ReadElementContentAs#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#4)]  
  
 Nell'esempio viene utilizzato il file `dataFile.xml` come input.  
  
 [!code-xml[XmlReader.ReadElementContentAs#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito in un oggetto <see cref="T:System.DateTime" />.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadElementContentAsDateTime (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadElementContentAsDateTime(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsDateTime (localName As String, namespaceURI As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ReadElementContentAsDateTime(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsDateTime : string * string -&gt; DateTime&#xA;override this.ReadElementContentAsDateTime : string * string -&gt; DateTime" Usage="xmlReader.ReadElementContentAsDateTime (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come oggetto <see cref="T:System.DateTime" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:dateTime`, il lettore di testo restituisce un tipo unboxed <xref:System.DateTime> oggetto. Se il contenuto non è tipizzato `xsd:dateTime`, il lettore tenta di convertirlo in un <xref:System.DateTime> oggetto in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
> [!NOTE]
>  Non è possibile usare il valore <xref:System.DateTime.Year%2A?displayProperty=nameWithType> quando il contenuto è tipizzato come `xsd:gMonthDay`. <xref:System.Xml.XmlReader> imposta sempre la <xref:System.DateTime.Year%2A?displayProperty=nameWithType> valore in questo caso su 1904.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
oppure 
Il contenuto dell'elemento non può essere convertito nel tipo richiesto.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsDecimal">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge il valore dell'elemento corrente come oggetto <see cref="T:System.Decimal" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadElementContentAsDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadElementContentAsDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Decimal ReadElementContentAsDecimal();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsDecimal : unit -&gt; decimal&#xA;override this.ReadElementContentAsDecimal : unit -&gt; decimal" Usage="xmlReader.ReadElementContentAsDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.Decimal" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Il lettore tenta di convertire il contenuto dell'elemento in un <xref:System.Decimal> oggetti in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
oppure 
Il contenuto dell'elemento non può essere convertito in un oggetto <see cref="T:System.Decimal" />.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadElementContentAsDecimal (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadElementContentAsDecimal(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsDecimal (localName As String, namespaceURI As String) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Decimal ReadElementContentAsDecimal(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsDecimal : string * string -&gt; decimal&#xA;override this.ReadElementContentAsDecimal : string * string -&gt; decimal" Usage="xmlReader.ReadElementContentAsDecimal (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come oggetto <see cref="T:System.Decimal" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Il lettore tenta di convertire il contenuto dell'elemento in un <xref:System.Decimal> oggetti in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito in un oggetto <see cref="T:System.Decimal" />.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsDouble">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge l'elemento corrente e restituisce il contenuto come numero a virgola mobile e precisione doppia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadElementContentAsDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadElementContentAsDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDouble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual double ReadElementContentAsDouble();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsDouble : unit -&gt; double&#xA;override this.ReadElementContentAsDouble : unit -&gt; double" Usage="xmlReader.ReadElementContentAsDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come numero a virgola mobile e precisione doppia.</summary>
        <returns>Contenuto dell'elemento come numero a virgola mobile e precisione doppia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:double`, il lettore di testo restituisce un numero a virgola mobile a precisione doppia. Se il contenuto non è tipizzato `xsd:double`, il lettore tenta di convertirlo in un numero a virgola mobile a precisione doppia in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
   
  
## Examples  
 L'esempio seguente usa il metodo per restituire il contenuto dell'elemento come numero a virgola mobile a precisione doppia.  
  
 [!code-csharp[XmlReader.ReadElementContentAs#7](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#7)]
 [!code-vb[XmlReader.ReadElementContentAs#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#7)]  
  
 Nell'esempio viene utilizzato il file `dataFile.xml` come input.  
  
 [!code-xml[XmlReader.ReadElementContentAs#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
oppure 
Il contenuto dell'elemento non può essere convertito come numero a virgola mobile e precisione doppia.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadElementContentAsDouble (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadElementContentAsDouble(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsDouble (localName As String, namespaceURI As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual double ReadElementContentAsDouble(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsDouble : string * string -&gt; double&#xA;override this.ReadElementContentAsDouble : string * string -&gt; double" Usage="xmlReader.ReadElementContentAsDouble (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come numero a virgola mobile e precisione doppia.</summary>
        <returns>Contenuto dell'elemento come numero a virgola mobile e precisione doppia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:double`, il lettore di testo restituisce un numero a virgola mobile a precisione doppia. Se il contenuto non è tipizzato `xsd:double`, il lettore tenta di convertirlo in un numero a virgola mobile a precisione doppia in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito nel tipo richiesto.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsFloat">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge il valore dell'elemento corrente come numero a virgola mobile e precisione singola.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadElementContentAsFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadElementContentAsFloat() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsFloat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsFloat () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual float ReadElementContentAsFloat();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsFloat : unit -&gt; single&#xA;override this.ReadElementContentAsFloat : unit -&gt; single" Usage="xmlReader.ReadElementContentAsFloat " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come numero a virgola mobile e precisione singola.</summary>
        <returns>Contenuto dell'elemento come numero a virgola mobile e precisione singola.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Il lettore tenta di convertire il contenuto dell'elemento a un numero a virgola mobile e precisione singola in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
oppure 
Il contenuto dell'elemento non può essere convertito come numero a virgola mobile e precisione singola.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadElementContentAsFloat (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadElementContentAsFloat(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsFloat (localName As String, namespaceURI As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual float ReadElementContentAsFloat(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsFloat : string * string -&gt; single&#xA;override this.ReadElementContentAsFloat : string * string -&gt; single" Usage="xmlReader.ReadElementContentAsFloat (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come numero a virgola mobile e precisione singola.</summary>
        <returns>Contenuto dell'elemento come numero a virgola mobile e precisione singola.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Il lettore tenta di convertire il contenuto dell'elemento a un numero a virgola mobile e precisione singola in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito come numero a virgola mobile e precisione singola.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsInt">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge l'elemento corrente e restituisce il contenuto come valore intero con segno a 32 bit.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsInt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsInt () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadElementContentAsInt();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsInt : unit -&gt; int&#xA;override this.ReadElementContentAsInt : unit -&gt; int" Usage="xmlReader.ReadElementContentAsInt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come valore intero con segno a 32 bit.</summary>
        <returns>Contenuto dell'elemento come valore intero con segno a 32 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:integer`, il lettore restituisce un intero con segno a 32 bit unboxed. Se il contenuto non è tipizzato `xsd:integer`, il lettore tenta di convertirlo in un intero con segno a 32 bit in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito in un valore intero con segno a 32 bit.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsInt (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsInt(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsInt (localName As String, namespaceURI As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadElementContentAsInt(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsInt : string * string -&gt; int&#xA;override this.ReadElementContentAsInt : string * string -&gt; int" Usage="xmlReader.ReadElementContentAsInt (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come valore intero con segno a 32 bit.</summary>
        <returns>Contenuto dell'elemento come valore intero con segno a 32 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:integer`, il lettore restituisce un intero con segno a 32 bit unboxed. Se il contenuto non è tipizzato `xsd:integer`, il lettore tenta di convertirlo in un intero con segno a 32 bit in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito in un valore intero con segno a 32 bit.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsLong">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge l'elemento corrente e restituisce il contenuto come valore intero con segno a 64 bit.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadElementContentAsLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadElementContentAsLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsLong" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsLong () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long ReadElementContentAsLong();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsLong : unit -&gt; int64&#xA;override this.ReadElementContentAsLong : unit -&gt; int64" Usage="xmlReader.ReadElementContentAsLong " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come valore intero con segno a 64 bit.</summary>
        <returns>Contenuto dell'elemento come valore intero con segno a 64 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:long`, il lettore restituisce un intero con segno a 64 bit unboxed. Se il contenuto non è tipizzato `xsd:long`, il lettore tenta di convertirlo in un intero con segno a 64 bit in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Xml.XmlReader.ReadElementContentAsLong%2A> metodo per leggere il contenuto del `longValue` elemento.  
  
 [!code-csharp[XmlReader.ReadElementContentAs#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#3)]
 [!code-vb[XmlReader.ReadElementContentAs#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#3)]  
  
 Nell'esempio viene utilizzato il file `dataFile.xml` come input.  
  
 [!code-xml[XmlReader.ReadElementContentAs#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito in un intero con segno a 64 bit.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadElementContentAsLong (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadElementContentAsLong(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsLong (localName As String, namespaceURI As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long ReadElementContentAsLong(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsLong : string * string -&gt; int64&#xA;override this.ReadElementContentAsLong : string * string -&gt; int64" Usage="xmlReader.ReadElementContentAsLong (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come valore intero con segno a 64 bit.</summary>
        <returns>Contenuto dell'elemento come valore intero con segno a 64 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Se il contenuto è tipizzato `xsd:long`, il lettore restituisce un intero con segno a 64 bit unboxed. Se il contenuto non è tipizzato `xsd:long`, il lettore tenta di convertirlo in un intero con segno a 64 bit in base alle regole definite nella raccomandazione di [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
oppure 
Il contenuto dell'elemento non può essere convertito in un intero con segno a 64 bit.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsObject">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge l'elemento corrente e restituisce il contenuto come <see cref="T:System.Object" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAsObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAsObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsObject" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsObject () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ReadElementContentAsObject();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsObject : unit -&gt; obj&#xA;override this.ReadElementContentAsObject : unit -&gt; obj" Usage="xmlReader.ReadElementContentAsObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come <see cref="T:System.Object" />.</summary>
        <returns>Oggetto CLR (Common Language Runtime) boxed del tipo più appropriato. La proprietà <see cref="P:System.Xml.XmlReader.ValueType" /> determina il tipo CLR appropriato. Se il contenuto è tipizzato come tipo di elenco, il metodo restituisce una matrice di oggetti boxed del tipo appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadElementContentAsObjectAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente usa il metodo per leggere il contenuto del `price` nodo. Il lettore utilizza le informazioni dello schema per eseguire il mapping del contenuto per il tipo di dati corretto.  
  
 [!code-csharp[XmlReader.ReadElementContentAs#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#6)]
 [!code-vb[XmlReader.ReadElementContentAs#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#6)]  
  
 L'esempio Usa i due file seguenti come input.  
  
 `item.xml`  
  
 [!code-xml[XmlReader.ReadElementContentAs#11](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/item.xml#11)]  
  
 `item.xsd`  
  
 [!code-xml[XmlReader.ReadElementContentAs#12](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/item.xsd#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito nel tipo richiesto.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAsObject (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAsObject(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsObject (localName As String, namespaceURI As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ReadElementContentAsObject(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsObject : string * string -&gt; obj&#xA;override this.ReadElementContentAsObject : string * string -&gt; obj" Usage="xmlReader.ReadElementContentAsObject (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi corrispondano a quelli dell'elemento corrente, quindi legge l'elemento corrente e restituisce il contenuto come <see cref="T:System.Object" />.</summary>
        <returns>Oggetto CLR (Common Language Runtime) boxed del tipo più appropriato. La proprietà <see cref="P:System.Xml.XmlReader.ValueType" /> determina il tipo CLR appropriato. Se il contenuto è tipizzato come tipo di elenco, il metodo restituisce una matrice di oggetti boxed del tipo appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
oppure 
Il contenuto dell'elemento non può essere convertito nel tipo richiesto.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsObjectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadElementContentAsObjectAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsObjectAsync () As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ ReadElementContentAsObjectAsync();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsObjectAsync : unit -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.ReadElementContentAsObjectAsync : unit -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlReader.ReadElementContentAsObjectAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge in modo asincrono l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.Object" />.</summary>
        <returns>Oggetto CLR (Common Language Runtime) boxed del tipo più appropriato. La proprietà <see cref="P:System.Xml.XmlReader.ValueType" /> determina il tipo CLR appropriato. Se il contenuto è tipizzato come tipo di elenco, il metodo restituisce una matrice di oggetti boxed del tipo appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadElementContentAsObject%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.String" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementContentAsString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementContentAsString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadElementContentAsString();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsString : unit -&gt; string&#xA;override this.ReadElementContentAsString : unit -&gt; string" Usage="xmlReader.ReadElementContentAsString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.String" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadElementContentAsStringAsync%2A>.  
  
   
  
## Examples  
 L'esempio seguente legge il `stringValue` elemento e restituisce il contenuto di testo (ignorando il commento e l'istruzione di elaborazione).  
  
 [!code-csharp[XmlReader.ReadElementContentAs#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#1)]
 [!code-vb[XmlReader.ReadElementContentAs#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#1)]  
  
 Nell'esempio viene utilizzato il file `dataFile.xml` come input.  
  
 [!code-xml[XmlReader.ReadElementContentAs#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito in un oggetto <see cref="T:System.String" />.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementContentAsString (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementContentAsString(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsString (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadElementContentAsString(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsString : string * string -&gt; string&#xA;override this.ReadElementContentAsString : string * string -&gt; string" Usage="xmlReader.ReadElementContentAsString (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nome locale e l'URI dello spazio dei nomi specificati corrispondano a quelli dell'elemento corrente, quindi legge l'elemento e restituisce il contenuto come oggetto <see cref="T:System.String" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge il tag di inizio, il contenuto dell'elemento e si sposta il lettore oltre il tag di fine dell'elemento. Espande le entità e i commenti e istruzioni di elaborazione vengono ignorati. L'elemento può contenere solo contenuto semplice. Vale a dire, non può avere elementi figlio.  
  
 Per altre informazioni, vedere la sezione Osservazioni del <xref:System.Xml.XmlReader> pagina di riferimento e il [W3C XML Schema Part 2: Tipi di dati](https://go.microsoft.com/fwlink/?LinkId=4871) raccomandazione.  
  
   
  
## Examples  
 L'esempio seguente legge il `stringValue` elemento e restituisce il contenuto di testo (ignorando il commento e l'istruzione di elaborazione).  
  
 [!code-csharp[XmlReader.ReadElementContentAs#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#2)]
 [!code-vb[XmlReader.ReadElementContentAs#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#2)]  
  
 Nell'esempio viene utilizzato il file `dataFile.xml` come input.  
  
 [!code-xml[XmlReader.ReadElementContentAs#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.Xml.XmlException">L'elemento corrente contiene elementi figlio.  
  
-oppure- 
Il contenuto dell'elemento non può essere convertito in un oggetto <see cref="T:System.String" />.</exception>
        <exception cref="T:System.ArgumentNullException">Il metodo è stato chiamato con argomenti <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome locale e l'URI dello spazio dei nomi specificati non corrispondono a quelli dell'elemento corrente da leggere.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadElementContentAsStringAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadElementContentAsStringAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsStringAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementContentAsStringAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadElementContentAsStringAsync();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementContentAsStringAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.ReadElementContentAsStringAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="xmlReader.ReadElementContentAsStringAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge in modo asincrono l'elemento corrente e restituisce il contenuto come oggetto <see cref="T:System.String" />.</summary>
        <returns>Contenuto dell'elemento come oggetto <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadElementContentAsString%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge gli elementi semplici di solo testo. È tuttavia consigliabile usare il metodo <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" />, perché fornisce un modo più diretto per gestire questa operazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È consigliabile usare il <xref:System.Xml.XmlReader.ReadElementContentAsString%2A> metodo per leggere un elemento di testo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadElementString();" />
      <MemberSignature Language="F#" Value="abstract member ReadElementString : unit -&gt; string&#xA;override this.ReadElementString : unit -&gt; string" Usage="xmlReader.ReadElementString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge un elemento di solo testo. È tuttavia consigliabile usare il metodo <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />, perché fornisce un modo più diretto per gestire questa operazione.</summary>
        <returns>Testo contenuto nell'elemento che è stato letto. Se l'elemento è vuoto viene restituita una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È consigliabile usare il <xref:System.Xml.XmlReader.ReadElementContentAsString> metodo per leggere un elemento di testo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Il nodo del contenuto successivo non è un tag di inizio oppure l'elemento trovato non contiene un valore di testo normale.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementString (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadElementString(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementString : string -&gt; string&#xA;override this.ReadElementString : string -&gt; string" Usage="xmlReader.ReadElementString name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome da verificare.</param>
        <summary>Verifica che la proprietà <see cref="P:System.Xml.XmlReader.Name" /> dell'elemento trovato corrisponda alla stringa specificata prima di leggere un elemento di solo testo. È tuttavia consigliabile usare il metodo <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />, perché fornisce un modo più diretto per gestire questa operazione.</summary>
        <returns>Testo contenuto nell'elemento che è stato letto. Se l'elemento è vuoto viene restituita una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È consigliabile usare il <xref:System.Xml.XmlReader.ReadElementContentAsString> metodo per leggere un elemento di testo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Se il nodo del contenuto successivo non è un tag di inizio, se l'elemento <see langword="Name" /> non corrisponde all'argomento specificato oppure se l'elemento trovato non contiene un valore di testo normale.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementString (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString(string localname, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadElementString (localname As String, ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadElementString(System::String ^ localname, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member ReadElementString : string * string -&gt; string&#xA;override this.ReadElementString : string * string -&gt; string" Usage="xmlReader.ReadElementString (localname, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localname">Nome locale da verificare.</param>
        <param name="ns">URI dello spazio dei nomi da verificare.</param>
        <summary>Verifica che le proprietà <see cref="P:System.Xml.XmlReader.LocalName" /> e <see cref="P:System.Xml.XmlReader.NamespaceURI" /> dell'elemento corrispondano alle stringhe specificate prima di leggere un elemento di solo testo. È tuttavia consigliabile usare il metodo <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />, perché fornisce un modo più diretto per gestire questa operazione.</summary>
        <returns>Testo contenuto nell'elemento che è stato letto. Se l'elemento è vuoto viene restituita una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È consigliabile usare il <xref:System.Xml.XmlReader.ReadElementContentAsString%28System.String%2CSystem.String%29> metodo per leggere un elemento di testo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Se il nodo del contenuto successivo non è un tag di inizio, se l'elemento <see langword="LocalName" /> o <see langword="NamespaceURI" /> non corrisponde agli argomenti specificati oppure se l'elemento trovato non contiene un valore di testo normale.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEndElement">
      <MemberSignature Language="C#" Value="public virtual void ReadEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReadEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReadEndElement();" />
      <MemberSignature Language="F#" Value="abstract member ReadEndElement : unit -&gt; unit&#xA;override this.ReadEndElement : unit -&gt; unit" Usage="xmlReader.ReadEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verifica che il nodo di contenuto corrente sia un tag di fine e sposta il lettore al nodo successivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente consente di visualizzare il contenuto di testo di ogni elemento.  
  
 [!code-csharp[XmlReaderBasic#11](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#11)]
 [!code-vb[XmlReaderBasic#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#11)]  
  
 Nell'esempio viene usato il `book3.xml` file.  
  
 [!code-xml[XML_Core_Files#6](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book3.xml#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Il nodo corrente non è un tag di fine oppure è stata rilevata una stringa di codice XML non corretta nel flusso di input.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadStartElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadInnerXml">
      <MemberSignature Language="C#" Value="public virtual string ReadInnerXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadInnerXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadInnerXml" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadInnerXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadInnerXml();" />
      <MemberSignature Language="F#" Value="abstract member ReadInnerXml : unit -&gt; string&#xA;override this.ReadInnerXml : unit -&gt; string" Usage="xmlReader.ReadInnerXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, legge tutto il contenuto come stringa, incluso il markup.</summary>
        <returns>Tutto il contenuto XML del nodo corrente, incluso il markup. Se il nodo corrente non ha elementi figlio, viene restituita una stringa vuota.  
  
Se il nodo corrente non è né un elemento né un attributo, verrà restituita una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce tutto il contenuto del nodo corrente inclusi i markup. Il nodo corrente, ovvero il tag di inizio, e il corrispondente nodo o tag di fine non vengono restituiti. Ad esempio, se si dispone di quanto segue:  
  
```xml  
<node>  
 this <child id="123"/>  
</node>  
```  
  
 `ReadInnerXml` restituisce `this <child id="123"/>`  
  
 Questo metodo gestisce i nodi di elementi e attributi nel modo seguente:  
  
|Tipo di nodo|Posizione prima della chiamata|Frammento XML|Valore restituito|Posizione dopo la chiamata|  
|---------------|------------------------------|------------------|------------------|-----------------------------|  
|`Element`|In corrispondenza del tag di inizio `item1`.|\<item1>text1\</item1>\<item2>text2\</item2>|text1|In corrispondenza del tag di inizio `item2`.|  
|`Attribute`|In corrispondenza del nodo Attribute `attr1`.|\<item attr1="val1" attr2="val2">text\</item>|val1|Rimane in corrispondenza del nodo Attribute `attr1`.|  
  
 Se il lettore è posizionato in corrispondenza di un nodo foglia, la chiamata al metodo `ReadInnerXml` equivarrà alla chiamata al metodo <xref:System.Xml.XmlReader.Read%2A>. Il metodo restituisce `String.Empty` (tranne che per i nodi attributo, nel qual caso viene restituito il valore dell'attributo).  
  
 Questo metodo controlla XML ben formato. Se `ReadInnerXml` viene chiamato da un <xref:System.Xml.XmlValidatingReader>, questo metodo convalida inoltre il contenuto restituito.  
  
 Come è implementato nel <xref:System.Xml.XmlNodeReader>, <xref:System.Xml.XmlTextReader> e `XmlValidatingReader` classi il `ReadOuterXml` metodo è compatibile con lo spazio dei nomi.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadInnerXmlAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontate le `ReadInnerXml` e <xref:System.Xml.XmlReader.ReadOuterXml%2A> metodi.  
  
 [!code-csharp[XmlReaderBasic#12](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#12)]
 [!code-vb[XmlReaderBasic#12](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#12)]  
  
 L'esempio Usa `2books.xml` file come input.  
  
 [!code-xml[XML_Core_Files#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">L'XML non è in formato corretto oppure si è verificato un errore durante l'analisi dell'XML.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInnerXmlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadInnerXmlAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadInnerXmlAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadInnerXmlAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadInnerXmlAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadInnerXmlAsync();" />
      <MemberSignature Language="F#" Value="abstract member ReadInnerXmlAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.ReadInnerXmlAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="xmlReader.ReadInnerXmlAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge in modo asincrono tutto il contenuto, incluso il markup, come stringa.</summary>
        <returns>Tutto il contenuto XML del nodo corrente, incluso il markup. Se il nodo corrente non ha elementi figlio, viene restituita una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadInnerXml%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadOuterXml">
      <MemberSignature Language="C#" Value="public virtual string ReadOuterXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadOuterXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadOuterXml" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadOuterXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadOuterXml();" />
      <MemberSignature Language="F#" Value="abstract member ReadOuterXml : unit -&gt; string&#xA;override this.ReadOuterXml : unit -&gt; string" Usage="xmlReader.ReadOuterXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, legge il contenuto, incluso il markup, che rappresenta questo nodo e tutti i relativi nodi figlio.</summary>
        <returns>Se il lettore è posizionato su un nodo elemento o attributo, il metodo restituisce tutto il contenuto XML, incluso il markup, del nodo corrente e di tutti i relativi nodi figlio; in caso contrario, restituisce una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è simile a <xref:System.Xml.XmlReader.ReadInnerXml%2A> ad eccezione del fatto che restituisce anche i tag di inizio e fine.  
  
 Questo metodo gestisce i nodi di elementi e attributi nel modo seguente:  
  
|Tipo di nodo|Posizione prima della chiamata|Frammento XML|Valore restituito|Posizione dopo la chiamata|  
|---------------|------------------------------|------------------|------------------|-----------------------------|  
|`Element`|In corrispondenza del tag di inizio `item1`.|\<item1>text1\</item1>\<item2>text2\</item2>|\<item1>text1\</item1>|In corrispondenza del tag di inizio `item2`.|  
|`Attribute`|In corrispondenza del nodo Attribute `attr1`.|\<item attr1="val1" attr2="val2">text\</item>|attr1="val1"|Rimane in corrispondenza del nodo Attribute `attr1`.|  
  
 Se il lettore è posizionato in corrispondenza di un nodo foglia, la chiamata al metodo `ReadOuterXml` equivarrà alla chiamata al metodo <xref:System.Xml.XmlReader.Read%2A>. Il metodo restituisce `String.Empty` (tranne che per i nodi attributo, nel qual caso viene restituito il codice di attributo).  
  
 Questo metodo controlla XML ben formato. Se `ReadOuterXml` viene chiamato da un <xref:System.Xml.XmlValidatingReader>, questo metodo convalida inoltre il contenuto restituito  
  
 Come è implementato nel <xref:System.Xml.XmlNodeReader>, <xref:System.Xml.XmlTextReader> e `XmlValidatingReader` classi il `ReadOuterXml` metodo è compatibile con lo spazio dei nomi. Dato il testo XML seguente `<A xmlns:S="urn:1"><S:B>hello</S:B></A>`, se il lettore fosse posizionato sul `S:B` tag di apertura `ReadOuterXml` restituisce `<S:B xmlns:S="urn:1">hello<S:B/>`.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadOuterXmlAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontate le `ReadInnerXml` e `ReadOuterXml` metodi.  
  
 [!code-csharp[XmlReaderBasic#12](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#12)]
 [!code-vb[XmlReaderBasic#12](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#12)]  
  
 L'esempio Usa `2books.xml` file come input.  
  
 [!code-xml[XML_Core_Files#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">L'XML non è in formato corretto oppure si è verificato un errore durante l'analisi dell'XML.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadOuterXmlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadOuterXmlAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadOuterXmlAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadOuterXmlAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadOuterXmlAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadOuterXmlAsync();" />
      <MemberSignature Language="F#" Value="abstract member ReadOuterXmlAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.ReadOuterXmlAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="xmlReader.ReadOuterXmlAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge in modo asincrono il contenuto, incluso il markup, che rappresenta il nodo e tutti i relativi nodi figlio.</summary>
        <returns>Se il lettore è posizionato su un nodo elemento o attributo, il metodo restituisce tutto il contenuto XML, incluso il markup, del nodo corrente e di tutti i relativi nodi figlio; in caso contrario, restituisce una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadOuterXml%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Verifica se il nodo corrente è un elemento e sposta il lettore al nodo successivo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadStartElement" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReadStartElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReadStartElement();" />
      <MemberSignature Language="F#" Value="abstract member ReadStartElement : unit -&gt; unit&#xA;override this.ReadStartElement : unit -&gt; unit" Usage="xmlReader.ReadStartElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verifica se il nodo corrente è un elemento e sposta il lettore al nodo successivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo chiama <xref:System.Xml.XmlReader.IsStartElement%2A> seguita da <xref:System.Xml.XmlReader.Read%2A> è posizionare il contenuto dell'elemento rilevato nel flusso di input.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">È stata rilevata una stringa XML non corretta nel flusso di input.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadEndElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadStartElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReadStartElement (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReadStartElement(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member ReadStartElement : string -&gt; unit&#xA;override this.ReadStartElement : string -&gt; unit" Usage="xmlReader.ReadStartElement name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'elemento.</param>
        <summary>Verifica che il nodo di contenuto corrente sia un elemento con la proprietà <see cref="P:System.Xml.XmlReader.Name" /> specificata e passa il lettore al nodo successivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una chiamata a questo metodo corrisponde a una chiamata a <xref:System.Xml.XmlReader.IsStartElement%2A> seguita da una chiamata a <xref:System.Xml.XmlReader.Read%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare il contenuto di testo di ogni elemento.  
  
 [!code-csharp[XmlReaderBasic#11](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#11)]
 [!code-vb[XmlReaderBasic#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#11)]  
  
 Nell'esempio viene usato il `book3.xml` file.  
  
 [!code-xml[XML_Core_Files#6](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book3.xml#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">È stata rilevata una stringa XML non corretta nel flusso di input.  
  
oppure 
Il <see cref="P:System.Xml.XmlReader.Name" /> dell'elemento non corrisponde al <paramref name="name" /> specificato.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadEndElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement(string localname, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReadStartElement (localname As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReadStartElement(System::String ^ localname, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="abstract member ReadStartElement : string * string -&gt; unit&#xA;override this.ReadStartElement : string * string -&gt; unit" Usage="xmlReader.ReadStartElement (localname, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localname">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Verifica che il nodo di contenuto corrente sia un elemento con le proprietà <see cref="P:System.Xml.XmlReader.LocalName" /> e <see cref="P:System.Xml.XmlReader.NamespaceURI" /> specificate e passa il lettore al nodo successivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una chiamata a questo metodo corrisponde a una chiamata a <xref:System.Xml.XmlReader.IsStartElement%2A> seguita da una chiamata a <xref:System.Xml.XmlReader.Read%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">È stata rilevata una stringa XML non corretta nel flusso di input.  
  
oppure 
Le proprietà <see cref="P:System.Xml.XmlReader.LocalName" /> e <see cref="P:System.Xml.XmlReader.NamespaceURI" /> dell'elemento trovato non corrispondono agli argomenti specificati.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadEndElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene lo stato del lettore.</summary>
        <value>Uno dei valori di enumerazione che specifica lo stato del lettore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlReader.ReadState%2A> proprietà può assumere uno dei valori seguenti:  
  
-   <xref:System.Xml.ReadState.Initial>, quando il <xref:System.Xml.XmlReader.Read%2A?displayProperty=nameWithType> viene chiamato il metodo.  
  
-   <xref:System.Xml.ReadState.Interactive>, quando il <xref:System.Xml.XmlReader.Read%2A?displayProperty=nameWithType> chiamata al metodo e metodi aggiuntivi possono essere chiamati nel lettore.  
  
-   <xref:System.Xml.ReadState.EndOfFile>, quando raggiunta la fine del documento XML è stata correttamente.  
  
-   <xref:System.Xml.ReadState.Closed>, quando il <xref:System.Xml.XmlReader.Close%2A?displayProperty=nameWithType> viene chiamato il metodo.  
  
-   <xref:System.Xml.ReadState.Error>, quando un errore impedisce l'operazione di lettura non potrà continuare.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public virtual string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="abstract member ReadString : unit -&gt; string&#xA;override this.ReadString : unit -&gt; string" Usage="xmlReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, legge il contenuto di un nodo elemento o testo come se si trattasse di una stringa. È tuttavia consigliabile usare il metodo <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" />, perché fornisce un modo più diretto per gestire questa operazione.</summary>
        <returns>Contenuto dell'elemento oppure una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È consigliabile usare il <xref:System.Xml.XmlReader.ReadElementContentAsString%2A> metodo per leggere il contenuto di un nodo elemento o testo come stringa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Errore durante l'analisi del codice XML.</exception>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xml.XmlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xml.XmlReader" Usage="xmlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una nuova istanza di <see langword="XmlReader" /> che può essere usata per leggere il nodo corrente e tutti i relativi discendenti.</summary>
        <returns>Nuova istanza del lettore XML impostata su <see cref="F:System.Xml.ReadState.Initial" />. La chiamata al metodo <see cref="M:System.Xml.XmlReader.Read" /> posiziona il nuovo lettore sul nodo che era il nodo corrente prima della chiamata al metodo <see cref="M:System.Xml.XmlReader.ReadSubtree" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReader.ReadSubtree%2A> può essere chiamato solo in nodi elemento. Quando è stato letto l'intero sottoalbero, le chiamate al <xref:System.Xml.XmlReader.Read%2A> restituzione del metodo `false`. Quando è stato chiuso il nuovo lettore XML, l'originale readeris posizionato in corrispondenza di `EndElement` sottoalbero del nodo. Di conseguenza, se è stato chiamato il <xref:System.Xml.XmlReader.ReadSubtree%2A> metodo sul tag di inizio dell'elemento libro, dopo che la sottostruttura ad albero è stato in lettura e il nuovo lettore XML è stata chiusa, il lettore XML originale viene posizionato sul tag di fine dell'elemento libro.  
  
 Non devono essere eseguite operazioni sul lettore originale fino a quando non è stato chiuso il nuovo lettore. Questo tipo di azione non è supportato è può causare un comportamento imprevisto.  
  
> [!NOTE]
>  Il <xref:System.Xml.XmlReader.ReadSubtree%2A> metodo non è destinato a creatingcopies dei dati XML che è possibile lavorare in modo indipendente. È progettata appositamente per creare un limite attorno a un elemento XML. Ciò è utile se si desidera passare dati a un altro componente per l'elaborazione e si vuole limitare la quantità di dati può accedere il componente. Quando si passa un lettore XML restituito dal <xref:System.Xml.XmlReader.ReadSubtree%2A> metodo a un'altra applicazione, l'applicazione può accedere solo all'elemento XML, non l'intero documento XML.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il metodo <xref:System.Xml.XmlReader.ReadSubtree%2A>.  
  
 [!code-csharp[XmlReaderBasic#13](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#13)]
 [!code-vb[XmlReaderBasic#13](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#13)]  
  
 Usare i dati XML seguenti per eseguire gli esempi in questo argomento:  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<Books>  
  <Book>  
    <Title>A Brief History of Time</Title>  
  </Book>  
  <Book>  
    <Title>Principle Of Relativity</Title>  
  </Book>  
  <Book>  
    <Title>Victory of Reason</Title>  
  </Book>  
  <Book>  
    <Title>The Unicorn that did not Fail</Title>  
  </Book>  
  <Book>  
    <Title>Rational Ontology</Title>  
  </Book>  
  <Book>  
    <Title>The Meaning of Pizza</Title>  
  </Book>  
</Books>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToDescendant">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Sposta l'oggetto <see cref="T:System.Xml.XmlReader" /> al successivo elemento discendente corrispondente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToDescendant">
      <MemberSignature Language="C#" Value="public virtual bool ReadToDescendant (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToDescendant(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToDescendant (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadToDescendant(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member ReadToDescendant : string -&gt; bool&#xA;override this.ReadToDescendant : string -&gt; bool" Usage="xmlReader.ReadToDescendant name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'elemento a cui spostarsi.</param>
        <summary>Sposta l'oggetto <see cref="T:System.Xml.XmlReader" /> al successivo elemento discendente con il nome completo specificato.</summary>
        <returns><see langword="true" /> se viene trovato un elemento discendente corrispondente; in caso contrario, <see langword="false" />. Se non viene trovato un elemento figlio corrispondente, l'oggetto <see cref="T:System.Xml.XmlReader" /> viene posizionato in corrispondenza del tag di fine (<see cref="P:System.Xml.XmlReader.NodeType" /> è <see langword="XmlNodeType.EndElement" />) dell'elemento.  
  
Se <see cref="T:System.Xml.XmlReader" /> non viene posizionato in corrispondenza di un elemento quando viene chiamato <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />, questo metodo restituisce <see langword="false" /> e la posizione di <see cref="T:System.Xml.XmlReader" /> non viene modificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente analizza il secondo nodo libro.  
  
 [!code-csharp[XmlReaderBasic#14](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#14)]
 [!code-vb[XmlReaderBasic#14](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#14)]  
  
 L'esempio Usa il file, `2books.xml`, come input.  
  
 [!code-xml[XML_Core_Files#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il parametro è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToDescendant">
      <MemberSignature Language="C#" Value="public virtual bool ReadToDescendant (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToDescendant(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToDescendant (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadToDescendant(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadToDescendant : string * string -&gt; bool&#xA;override this.ReadToDescendant : string * string -&gt; bool" Usage="xmlReader.ReadToDescendant (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento a cui spostarsi.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento a cui spostarsi.</param>
        <summary>Sposta l'oggetto <see cref="T:System.Xml.XmlReader" /> al successivo elemento discendente con il nome locale e l'URI dello spazio dei nomi specificati.</summary>
        <returns><see langword="true" /> se viene trovato un elemento discendente corrispondente; in caso contrario, <see langword="false" />. Se non viene trovato un elemento figlio corrispondente, l'oggetto <see cref="T:System.Xml.XmlReader" /> viene posizionato in corrispondenza del tag di fine (<see cref="P:System.Xml.XmlReader.NodeType" /> è <see langword="XmlNodeType.EndElement" />) dell'elemento.  
  
Se <see cref="T:System.Xml.XmlReader" /> non viene posizionato in corrispondenza di un elemento quando viene chiamato <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />, questo metodo restituisce <see langword="false" /> e la posizione di <see cref="T:System.Xml.XmlReader" /> non viene modificata.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentNullException">Entrambi i valori del parametro sono <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToFollowing">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Legge fino a trovare l'elemento denominato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool ReadToFollowing (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToFollowing(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToFollowing(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToFollowing (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadToFollowing(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member ReadToFollowing : string -&gt; bool&#xA;override this.ReadToFollowing : string -&gt; bool" Usage="xmlReader.ReadToFollowing name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'elemento.</param>
        <summary>Legge fino a trovare un elemento con il nome completo specificato.</summary>
        <returns><see langword="true" /> se viene trovato un elemento corrispondente; in caso contrario, <see langword="false" /> e l'oggetto <see cref="T:System.Xml.XmlReader" /> si trova nello stato fine del file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è funzionalmente equivalente l'esecuzione di `following::name` espressione XPath del nodo corrente. Fornisce un modo rapido per trovare un elemento denominato nel documento XML. Sposta il lettore all'elemento successivo che corrisponde al nome specificato e restituisce `true` se viene trovato un elemento corrispondente. Usa l'esempio seguente, il lettore leggerebbe alla prima istanza dell'elemento specificato durante la lettura in avanti.  
  
```xml  
<!--"sample.xml"-->  
<?xmlversion="1.0">  
   <items>  
      <item xmls="urn:1"/>  
   </items>  
</xml>  
  
```  
  
```csharp  
XmlTextReader reader = newXmlTextReader("sample.xml");  
  
reader.ReadToFollowing("item");  
  
```  
  
 Questo metodo può essere chiamato su tutti i tipi di nodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il parametro è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool ReadToFollowing (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToFollowing(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToFollowing (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadToFollowing(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadToFollowing : string * string -&gt; bool&#xA;override this.ReadToFollowing : string * string -&gt; bool" Usage="xmlReader.ReadToFollowing (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Legge fino a trovare un elemento con il nome locale e l'URI dello spazio dei nomi specificati.</summary>
        <returns><see langword="true" /> se viene trovato un elemento corrispondente; in caso contrario, <see langword="false" /> e l'oggetto <see cref="T:System.Xml.XmlReader" /> si trova nello stato fine del file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è funzionalmente equivalente l'esecuzione di `following::name` espressione XPath del nodo corrente. Fornisce un modo rapido per trovare un elemento denominato nel documento XML. Sposta il lettore all'elemento successivo che corrisponde al nome specificato e restituisce `true` se viene trovato un elemento corrispondente.  
  
```xml  
<!--"sample.xml"-->  
<?xmlversion="1.0">  
   <items>  
      <item xmls="urn:1"/>  
   </items>  
</xml>  
  
```  
  
```csharp  
XmlTextReader reader = newXmlTextReader("sample.xml");  
  
reader.ReadToFollowing("item", "urn:1");  
  
```  
  
 Questo metodo può essere chiamato su tutti i tipi di nodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentNullException">Entrambi i valori del parametro sono <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToNextSibling">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <summary>Sposta l'oggetto <see langword="XmlReader" /> al successivo elemento corrispondente di pari livello.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToNextSibling">
      <MemberSignature Language="C#" Value="public virtual bool ReadToNextSibling (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToNextSibling(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToNextSibling(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToNextSibling (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadToNextSibling(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member ReadToNextSibling : string -&gt; bool&#xA;override this.ReadToNextSibling : string -&gt; bool" Usage="xmlReader.ReadToNextSibling name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'elemento di pari livello a cui spostarsi.</param>
        <summary>Sposta l'oggetto <see langword="XmlReader" /> al successivo elemento di pari livello con il nome completo specificato.</summary>
        <returns><see langword="true" /> se viene trovato un elemento di pari livello corrispondente; in caso contrario, <see langword="false" />. Se non viene trovato un elemento corrispondente di pari livello, l'oggetto <see langword="XmlReader" /> viene posizionato in corrispondenza del tag di fine (<see cref="P:System.Xml.XmlReader.NodeType" /> è <see langword="XmlNodeType.EndElement" />) dell'elemento padre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Non chiamare <xref:System.Xml.XmlReader.ReadToNextSibling%2A> quando il `XmlReader` è uno stato iniziale (<xref:System.Xml.XmlReader.ReadState%2A> è <xref:System.Xml.ReadState.Initial>). È possibile chiamare <xref:System.Xml.XmlReader.Read%2A> per passare il `XmlReader` e quindi chiamare il <xref:System.Xml.XmlReader.ReadToNextSibling%2A> (metodo).  
  
   
  
## Examples  
 L'esempio seguente legge l'attributo ISBN in ogni nodo libro.  
  
 [!code-csharp[XmlReaderBasic#15](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#15)]
 [!code-vb[XmlReaderBasic#15](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentException">Il parametro è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToNextSibling">
      <MemberSignature Language="C#" Value="public virtual bool ReadToNextSibling (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToNextSibling(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToNextSibling (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadToNextSibling(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="abstract member ReadToNextSibling : string * string -&gt; bool&#xA;override this.ReadToNextSibling : string * string -&gt; bool" Usage="xmlReader.ReadToNextSibling (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale dell'elemento di pari livello a cui spostarsi.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento di pari livello a cui spostarsi.</param>
        <summary>Sposta l'oggetto <see langword="XmlReader" /> al successivo elemento di pari livello con il nome locale e l'URI dello spazio dei nomi specificati.</summary>
        <returns><see langword="true" /> se viene trovato un elemento di pari livello corrispondente; in caso contrario, <see langword="false" />. Se non viene trovato un elemento corrispondente di pari livello, l'oggetto <see langword="XmlReader" /> viene posizionato in corrispondenza del tag di fine (<see cref="P:System.Xml.XmlReader.NodeType" /> è <see langword="XmlNodeType.EndElement" />) dell'elemento padre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Non chiamare <xref:System.Xml.XmlReader.ReadToNextSibling%2A> quando il `XmlReader` è uno stato iniziale (<xref:System.Xml.XmlReader.ReadState%2A> è <xref:System.Xml.ReadState.Initial>). È possibile chiamare <xref:System.Xml.XmlReader.Read%2A> per passare il `XmlReader` e quindi chiamare il <xref:System.Xml.XmlReader.ReadToNextSibling%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentNullException">Entrambi i valori del parametro sono <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadValueChunk">
      <MemberSignature Language="C#" Value="public virtual int ReadValueChunk (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadValueChunk(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadValueChunk (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadValueChunk(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadValueChunk : char[] * int * int -&gt; int&#xA;override this.ReadValueChunk : char[] * int * int -&gt; int" Usage="xmlReader.ReadValueChunk (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che funge da buffer in cui viene scritto il contenuto di testo. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset all'interno del buffer in cui il <see cref="T:System.Xml.XmlReader" /> può iniziare a copiare i risultati.</param>
        <param name="count">Numero massimo di caratteri da copiare nel buffer. Il numero effettivo di caratteri copiati viene restituito da questo metodo.</param>
        <summary>Legge flussi di testo di grandi dimensioni incorporati in un documento XML.</summary>
        <returns>Numero di caratteri letti nel buffer. Quando non è più disponibile contenuto di testo, viene restituito il valore zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente la lettura di dimensioni molto grandi flussi di testo incorporato in un documento XML in modalità flusso, vale a dire, un numero ridotto di caratteri in un momento invece di allocare una sola stringa per l'intero valore. Questo metodo può essere chiamato su qualsiasi nodo che ha un valore (<xref:System.Xml.XmlReader.HasValue%2A> è `true`), ma lo streaming effettivo del valore del nodo si verifica solo quando viene chiamato su un testo, gli spazi vuoti e i nodi spazi vuoti significativi. Altri valori di tipo di nodo vengono memorizzati nella cache, inclusi gli attributi e i nodi CDATA.  
  
 Questo metodo restituisce solo il contenuto del <xref:System.Xml.XmlReader.Value%2A> proprietà e non si sposta il <xref:System.Xml.XmlReader>.  
  
 Questo metodo legge il numero specificato di caratteri (`count`) del valore del nodo in un buffer di caratteri (`buffer`) a un offset specificato (`index`) e restituisce il numero di caratteri scritti nel buffer. Restituisce il `0` quando ha raggiunto la fine del valore. Non può essere riavviato per leggere nuovamente tramite il valore.  
  
 Tra le chiamate a <xref:System.Xml.XmlReader.ReadValueChunk%2A> il <xref:System.Xml.XmlReader> proprietà non eseguire alcuna modifica, ad eccezione del <xref:System.Xml.XmlReader.Value%2A> proprietà. Quando la <xref:System.Xml.XmlReader.Value%2A> si accede alla proprietà possibile che venga restituito un valore parziale (con i caratteri non ancora restituiti da <xref:System.Xml.XmlReader.ReadValueChunk%2A>) o un valore a seconda dell'implementazione completo. Tutti il <xref:System.Xml.XmlReader> implementazioni nel <xref:System.Xml> dello spazio dei nomi restituiscono un valore parziale per il <xref:System.Xml.XmlReader.Value%2A> implementazione della proprietà.  
  
 Qualsiasi operazione di lettura è possibile chiamare tra le chiamate a metodo <xref:System.Xml.XmlReader.ReadValueChunk%2A>. In questo caso, il <xref:System.Xml.XmlReader> passa alla successiva <xref:System.Xml.XmlNodeType> del flusso e gli eventuali caratteri non ancora restituiti vengono ignorati.  
  
 Potrebbe esserci un caso quando <xref:System.Xml.XmlReader.ReadValueChunk%2A> restituisce inferiore al numero richiesto di caratteri. Ad esempio, se si dispone di un valore 200 caratteri con una coppia di surrogati in corrispondenza delle posizioni 128 e 127 ed è stato chiamato <xref:System.Xml.XmlReader.ReadValueChunk%2A> con un buffer di 128 caratteri, la chiamata al metodo restituirebbe 127 caratteri anziché i 128 richiesti. Viene restituita la coppia di surrogati entro i prossimi <xref:System.Xml.XmlReader.ReadValueChunk%2A> chiamare. In questo caso, <xref:System.Xml.XmlReader.ReadValueChunk%2A> non ha restituito i 128 caratteri richiesti in quanto si sarebbe ottenuto come risultato una coppia di surrogati non completate alla fine del buffer.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.ReadValueChunkAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">L'indice nel buffer oppure la somma di indice e numero è superiore alla dimensione del buffer allocato.</exception>
        <exception cref="T:System.NotSupportedException">L'implementazione di <see cref="T:System.Xml.XmlReader" /> non supporta questo metodo.</exception>
        <exception cref="T:System.Xml.XmlException">Il formato dei dati XML non è corretto.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadValueChunkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadValueChunkAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadValueChunkAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadValueChunkAsync (buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadValueChunkAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadValueChunkAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.ReadValueChunkAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="xmlReader.ReadValueChunkAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che funge da buffer in cui viene scritto il contenuto di testo. Questo valore non può essere <see langword="null" />.</param>
        <param name="index">Offset all'interno del buffer in cui il <see cref="T:System.Xml.XmlReader" /> può iniziare a copiare i risultati.</param>
        <param name="count">Numero massimo di caratteri da copiare nel buffer. Il numero effettivo di caratteri copiati viene restituito da questo metodo.</param>
        <summary>Legge in modo asincrono flussi di testo di grandi dimensioni incorporati in un documento XML.</summary>
        <returns>Numero di caratteri letti nel buffer. Quando non è più disponibile contenuto di testo, viene restituito il valore zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.ReadValueChunk%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public abstract void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ResolveEntity();" />
      <MemberSignature Language="F#" Value="abstract member ResolveEntity : unit -&gt; unit" Usage="xmlReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, risolve il riferimento a entità per i nodi <see langword="EntityReference" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il reader è posizionato su un `EntityReference` nodo (`XmlNodeType.EntityReference`), se <xref:System.Xml.XmlReader.Read%2A> viene chiamato dopo avere chiamato questo metodo, il testo di sostituzione di entità viene analizzato. Al termine, il testo di sostituzione entità un `EndEntity` nodo viene restituito per chiudere l'ambito di riferimento di entità.  
  
> [!NOTE]
>  Dopo aver chiamato questo metodo, se l'entità è parte di un valore di attributo, è necessario chiamare <xref:System.Xml.XmlReader.ReadAttributeValue%2A> al passaggio all'interno dell'entità.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="P:System.Xml.XmlReader.CanResolveEntity" />
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.SchemaInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SchemaInfo As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Schema::IXmlSchemaInfo ^ SchemaInfo { System::Xml::Schema::IXmlSchemaInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaInfo : System.Xml.Schema.IXmlSchemaInfo" Usage="System.Xml.XmlReader.SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le informazioni sullo schema assegnate al nodo corrente in seguito alla convalida dello schema.</summary>
        <value>Oggetto <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> contenente le informazioni sullo schema per il nodo corrente. Le informazioni sullo schema possono essere impostate su elementi, attributi o nodi di testo con la proprietà <see cref="P:System.Xml.XmlReader.ValueType" /> non Null (valori tipizzati).  
  
Se il nodo corrente non è uno dei tipi di nodo precedenti o se l'istanza di <see langword="XmlReader" /> non segnala informazioni sullo schema, la proprietà restituisce <see langword="null" />.  
  
Se la proprietà viene chiamata da un oggetto <see cref="T:System.Xml.XmlTextReader" /> o <see cref="T:System.Xml.XmlValidatingReader" />, restituisce sempre <see langword="null" />. Queste implementazioni di <see langword="XmlReader" /> non espongono informazioni sullo schema tramite la proprietà <see langword="SchemaInfo" />.  
  
 <block subset="none" type="note"><para>  
 Se è necessario ottenere il set di informazioni dopo la convalida dello schema (PSVI) per un elemento, posizionare il lettore sul tag di fine dell'elemento, piuttosto che sul tag di inizio. Il PSVI si ottiene tramite la proprietà <see langword="SchemaInfo" /> del lettore. Il lettore di convalida creato tramite <see cref="Overload:System.Xml.XmlReader.Create" /> con la proprietà <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> impostata su <see cref="F:System.Xml.ValidationType.Schema" /> ha un PSVI completo per un elemento solo se il lettore è posizionato sul tag di fine di un elemento.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Schema.IXmlSchemaInfo> interfaccia espone un subset dei Post Schema convalida Infoset (PSVI) associata a un nodo XML.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Xml.XmlReaderSettings" /> usato per creare questa istanza di <see cref="T:System.Xml.XmlReader" />.</summary>
        <value>Oggetto <see cref="T:System.Xml.XmlReaderSettings" /> usato per creare questa istanza del lettore. Se il lettore non è stato creato con il metodo <see cref="Overload:System.Xml.XmlReader.Create" />, la proprietà restituisce <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Il <xref:System.Xml.XmlReaderSettings> oggetto può contenere informazioni riservate, ad esempio le credenziali dell'utente. Le applicazioni devono prestare attenzione quando la memorizzazione nella cache l'oggetto o il passaggio a un altro componente.  
  
 Il <xref:System.Xml.XmlReaderSettings> classe viene utilizzata per specificare il set di funzionalità da supportare nell'istanza del lettore creato. Il <xref:System.Xml.XmlReaderSettings> oggetto restituito da questa proprietà non può essere modificato. Qualsiasi tentativo di modificare i risultati delle singole impostazioni, viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xmlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ignora gli elementi figlio del nodo corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nel seguente codice XML di input se il reader è posizionato in corrispondenza di `<a>` nodo o uno qualsiasi dei suoi attributi, chiamando `Skip` posizionerà il lettore di `<b>` nodo.  
  
 Se il reader è posizionato su un nodo foglia già (ad esempio la `<x>` nodo o il nodo di testo `abc`), la chiamata `Skip` è uguale alla chiamata al metodo <xref:System.Xml.XmlReader.Read%2A>.  
  
```xml  
<a name="bob" age="123">  
 <x/>abc<y/>  
</a>  
<b>  
...  
</b>  
```  
  
 Questo metodo controlla XML ben formato.  
  
 Se il reader si trova un <xref:System.Xml.XmlValidatingReader>, questo metodo convalida inoltre il contenuto ignorato.  
  
 Il `XmlReader` implementazione determina o meno il `Skip` metodo espanderà le entità esterne. Nella tabella seguente viene indicato se le entità esterne vengono espanse per i vari tipi di `XmlReader` oggetti.  
  
|Tipo della classe XmlReader|Espande le entità esterne|  
|-----------------------|-------------------------------|  
|<xref:System.Xml.XmlTextReader>|No.|  
|<xref:System.Xml.XmlReader> istanza creata dal <xref:System.Xml.XmlReader.Create%2A> metodo che legge i dati di testo.|No.|  
|<xref:System.Xml.XmlReader> istanza creata dal <xref:System.Xml.XmlReader.Create%2A> metodo che legge i dati binari.|Non applicabile.|  
|Un oggetto di convalida dello schema <xref:System.Xml.XmlReader> istanza creata dal <xref:System.Xml.XmlReader.Create%2A> (metodo).|Sì.|  
|<xref:System.Xml.XmlValidatingReader>|Sì.|  
|<xref:System.Xml.XmlReader> l'istanza restituita da un <xref:System.Xml.XPath.XPathNavigator> oggetto.|Non applicabile.|  
|<xref:System.Xml.XmlNodeReader>|No.|  
|<xref:System.Xml.XmlReader> wrapping di un'altra istanza <xref:System.Xml.XmlReader> istanza.|Dipende dall'implementazione dell'oggetto sottostante <xref:System.Xml.XmlReader>. (Il `Skip` metodo sottostante <xref:System.Xml.XmlReader> viene chiamato).|  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlReader.SkipAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente consente di analizzare un file XML a partire dal secondo nodo libro.  
  
 [!code-csharp[XmlReaderBasic#14](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#14)]
 [!code-vb[XmlReaderBasic#14](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#14)]  
  
 L'esempio Usa il file, `2books.xml`, come input.  
  
 [!code-xml[XML_Core_Files#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SkipAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SkipAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.SkipAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SkipAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ SkipAsync();" />
      <MemberSignature Language="F#" Value="abstract member SkipAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.SkipAsync : unit -&gt; System.Threading.Tasks.Task" Usage="xmlReader.SkipAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ignora in modo asincrono gli elementi figlio del nodo corrente.</summary>
        <returns>Nodo corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlReader.Skip%2A>, con la stessa funzionalità. Per usare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo asincrono della classe <see cref="T:System.Xml.XmlReader" /> senza l'impostazione del flag <see cref="P:System.Xml.XmlReaderSettings.Async" /> su <see langword="true" />. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "Per utilizzare i metodi asincroni, impostare XmlReaderSettings.Async su true".</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmazione asincrona con Async e Await (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.IDisposable.Dispose" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Xml.XmlReader> a un'interfaccia <xref:System.IDisposable>.

Questo membro può avere un comportamento diverso quando viene usata in un [libreria di classi portabile](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) progetto. Per altre informazioni, vedere [differenze tra API nella libreria di classi portabile](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/gg597392(v=vs.100)).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il valore del testo del nodo corrente.</summary>
        <value>Il valore restituito dipende dalla proprietà <see cref="P:System.Xml.XmlReader.NodeType" /> del nodo. La tabella seguente elenca i tipi di nodo che hanno un valore da restituire. Tutti gli altri tipi di nodo restituiscono <see langword="String.Empty" />.  
  
 <list type="table"><listheader><term> Tipo di nodo 
 </term><description> Value 
 </description></listheader><item><term><see langword="Attribute" /></term><description> Valore dell'attributo.  
  
 </description></item><item><term><see langword="CDATA" /></term><description> Contenuto della sezione CDATA.  
  
 </description></item><item><term><see langword="Comment" /></term><description> Contenuto del commento.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> Sottoinsieme interno.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> Intero contenuto, esclusa la destinazione.  
  
 </description></item><item><term><see langword="SignificantWhitespace" /></term><description> Spazio vuoto tra markup in un modello con contenuto misto.  
  
 </description></item><item><term><see langword="Text" /></term><description> Contenuto del nodo di testo.  
  
 </description></item><item><term><see langword="Whitespace" /></term><description> Spazio vuoto tra markup.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> Contenuto della dichiarazione.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la versione asincrona di questa proprietà, vedere il <xref:System.Xml.XmlReader.GetValueAsync%2A> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente legge un file XML e vengono visualizzati tutti i nodi.  
  
 [!code-csharp[XmlReaderBasic#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 L'esempio Usa il `items.xml` file.  
  
 [!code-xml[XML_Core_Files#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueType">
      <MemberSignature Language="C#" Value="public virtual Type ValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValueType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.ValueType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ValueType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ValueType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueType : Type" Usage="System.Xml.XmlReader.ValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il tipo CLR (Common Language Runtime) per il nodo corrente.</summary>
        <value>Tipo CLR che corrisponde al valore tipizzato del nodo. Il valore predefinito è <see langword="System.String" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visualizzare [supporto dei tipi di dati nelle classi System. XML](~/docs/standard/data/xml/type-support-in-the-system-xml-classes.md) per un elenco dei mapping predefiniti.  
  
 Un elemento di tipo `xs:int` ha un `ValueType` di `System.Int32` per impostazione predefinita. Tuttavia, il `ValueType` potrebbe essere uno dei tipi validi che possono essere mappati a `xs:int`, ad esempio `System.Int16` o `System.Double`.  
  
 Se un nodo non è tipizzato, o se il nodo è un elemento che include contenuto misto, il valore del nodo viene eseguito il mapping per il `System.String` tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <block subset="none" type="overrides"><para>Gli implementatori devono fornire un' <see langword="ValueType" /> per ogni nodo, anche se è solo il <see langword="System.String" /> tipo.</para></block>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene l'ambito <see langword="xml:lang" /> corrente.</summary>
        <value>Ambito <see langword="xml:lang" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà rappresenta il `xml:lang` definire l'ambito in cui si trova il nodo corrente. Ad esempio, ecco un frammento XML con `xml:lang` impostata su inglese Stati Uniti nell'elemento radice:  
  
```xml  
<root xml:lang="en-us">   
<name>Fred</name>   
</root>   
```  
  
 Quando il lettore è posizionato in corrispondenza di `name` elemento, è possibile usare questa proprietà per verificare che si trovi nell'ambito di un inglese Americano `xml:lang` attributo.  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlTextReader.XmlLang%2A?displayProperty=nameWithType> per un esempio di utilizzo di questa proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="P:System.Xml.XmlReader.XmlSpace" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene l'ambito <see langword="xml:space" /> corrente.</summary>
        <value>Uno dei valori di <see cref="T:System.Xml.XmlSpace" />. Se non esiste alcun ambito <see langword="xml:space" />, alla proprietà viene applicata l'impostazione predefinita <see langword="XmlSpace.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Visualizzare <xref:System.Xml.XmlTextReader.XmlSpace%2A> (nel `XmlTextReader` classe) per un esempio di utilizzo di questa proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato un metodo della classe <see cref="T:System.Xml.XmlReader" /> prima del completamento di un'operazione asincrona precedente. In questo caso, viene generata l'eccezione <see cref="T:System.InvalidOperationException" /> con il messaggio "È già in corso un'operazione asincrona".</exception>
        <altmember cref="P:System.Xml.XmlReader.XmlLang" />
      </Docs>
    </Member>
  </Members>
</Type>