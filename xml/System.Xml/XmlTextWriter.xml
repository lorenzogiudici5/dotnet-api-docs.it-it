<Type Name="XmlTextWriter" FullName="System.Xml.XmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e069a59896777c40f8f8def9c7e997570500cb1" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061557" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlTextWriter : System.Xml.XmlWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextWriter extends System.Xml.XmlWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextWriter&#xA;Inherits XmlWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextWriter : System::Xml::XmlWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un writer che fornisce un modo veloce, non in cache e di tipo forward-only di generare flussi o file che contengono dati XML conformi alle raccomandazioni W3C Extensible Markup Language (XML) 1.0 e Namespaces in XML.  
  
 A partire da .NET Framework 2.0, è consigliabile usare la classe <see cref="T:System.Xml.XmlWriter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe implementa la <xref:System.Xml.XmlWriter> classe.  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 `XmlTextWriter` gestisce uno stack di spazio dei nomi corrispondenti a tutti gli spazi dei nomi definiti nello stack dell'elemento corrente. Utilizzando `XmlTextWriter` è possibile dichiarare spazi dei nomi manualmente.  
  
```csharp  
w.WriteStartElement("root");  
w.WriteAttributeString("xmlns", "x", null, "urn:1");  
 w.WriteStartElement("item","urn:1");  
 w.WriteEndElement();  
 w.WriteStartElement("item","urn:1");  
 w.WriteEndElement();  
w.WriteEndElement();  
```  
  
 Il codice c# sopra riportato produce il seguente output: `XmlTextWriter` promuove la dichiarazione dello spazio dei nomi per l'elemento radice per evitare la duplicazione nei due elementi figlio. Il prefisso dalla dichiarazione di spazio dei nomi selezionare gli elementi figlio.  
  
```xml  
<root xmlns:x="urn:1">  
 <x:item/>  
 <x:item/>  
</x:root>  
```  
  
 `XmlTextWriter` consente inoltre di eseguire l'override della dichiarazione dello spazio dei nomi corrente. Nell'esempio seguente, lo spazio dei nomi URI "123" è sottoposto a override da "abc" per produrre l'elemento XML `<x:node xmlns:x="abc"/>`.  
  
```csharp  
w.WriteStartElement("x","node","123");  
w.WriteAttributeString("xmlns","x",null,"abc");  
```  
  
 Utilizzando i metodi di scrittura che accettano un prefisso come argomento è anche possibile specificare il prefisso da utilizzare. Nell'esempio seguente, due diversi prefissi vengono associati allo spazio dei nomi stesso URI per ottenere il testo XML `<x:root xmlns:x="urn:1"><y:item xmlns:y="urn:1"/></x:root>`.  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.WriteStartElement("x","root","urn:1");  
 w.WriteStartElement("y","item","urn:1");  
 w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 Se sono presenti più dichiarazioni dello spazio dei nomi il mapping diversi prefissi allo stesso spazio dei nomi URI, `XmlTextWriter` esamina lo stack di dichiarazioni dello spazio dei nomi precedenti e seleziona il più vicino.  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.Formatting = Formatting.Indented;  
w.WriteStartElement("x","root","urn:1");  
w.WriteStartElement("y","item","urn:1");  
w.WriteAttributeString("attr","urn:1","123");  
w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 Nel precedente esempio c#, perché il `WriteAttributeString` chiamata non specifica un prefisso, viene utilizzato il prefisso ultimo nello stack di spazio dei nomi, il writer e produce il seguente codice XML:  
  
```xml  
<x:root xmlns:x="urn:1">  
 <y:item y:attr="123" xmlns:y="urn:1" />  
</x:root>  
```  
  
 Se si verificano conflitti di spazio dei nomi, `XmlTextWriter` vengono risolti tramite la generazione di prefissi alternativi. Ad esempio, se dispone di un attributo e un elemento lo stesso prefisso, spazi dei nomi diversi ma `XmlWriter` genererà un prefisso alternativo per l'attributo. I prefissi generati vengono denominati `n{i}` dove `i` è un numero che inizia da 1. Il numero viene reimpostato su 1 per ogni elemento.  
  
 Gli attributi che sono associati a un URI dello spazio dei nomi deve essere un prefisso (impostazione predefinita gli spazi dei nomi non sono valide per gli attributi). Ciò è conforme alla sezione 5.2 gli spazi dei nomi nella raccomandazione XML W3C. Se un attributo fa riferimento a un URI dello spazio dei nomi, ma non specifica un prefisso, il writer genera un prefisso per l'attributo.  
  
 Quando si scrive un elemento vuoto, viene aggiunto un ulteriore spazio tra il nome di tag e il tag di chiusura, ad esempio `<item />`. Ciò garantisce la compatibilità con i browser meno recenti.  
  
 Quando un `String` viene utilizzato come parametro del metodo, `null` e `String.Empty` sono equivalenti. `String.Empty` segue le regole di W3C.  
  
 Per scrivere dati fortemente tipizzati, utilizzare la <xref:System.Xml.XmlConvert> classe per convertire i tipi di dati stringa. Ad esempio, il codice c# seguente converte i dati da `Double` a `String` e scrive l'elemento `<price>19.95</price>`.  
  
```csharp  
Double price = 19.95;  
writer.WriteElementString("price", XmlConvert.ToString(price));  
```  
  
 `XmlTextWriter` non verificare quanto segue:  
  
-   Caratteri non validi nei nomi di attributi ed elementi.  
  
-   Caratteri Unicode che non corrispondono alla codifica specificata. Se i caratteri Unicode non corrispondono alla codifica specificata, il `XmlTextWriter` non effettua l'escape dei caratteri Unicode in entità carattere.  
  
-   Attributi duplicati.  
  
-   Caratteri nell'identificatore pubblico DOCTYPE o identificatore di sistema.  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Gli elementi seguenti sono aspetti da considerare quando si lavora con la <xref:System.Xml.XmlTextWriter> classe.  
  
-   Le eccezioni generate dal <xref:System.Xml.XmlTextWriter> possono rivelare informazioni sul percorso che non si desidera propagare all'applicazione. Le applicazioni devono intercettare le eccezioni ed elaborarle in modo adeguato.  
  
-   Quando si passa il tipo <xref:System.Xml.XmlTextWriter> a un'altra applicazione, il flusso sottostante è esposto all'applicazione. Se si deve passare l'oggetto <xref:System.Xml.XmlTextWriter> a un'applicazione con attendibilità parziale, è invece necessario utilizzare un oggetto <xref:System.Xml.XmlWriter> creato dal metodo <xref:System.Xml.XmlWriter.Create%2A>.  
  
-   Il <xref:System.Xml.XmlTextWriter> non convalida i dati che viene passati per il <xref:System.Xml.XmlTextWriter.WriteDocType%2A> o <xref:System.Xml.XmlTextWriter.WriteRaw%2A> metodi. Non passare dati arbitrari a questi metodi.  
  
-   Se vengono modificate le impostazioni predefinite, non c'è garanzia che l'output generato è ben formati dati XML.  
  
-   Non accettare componenti di supporto, ad esempio un <xref:System.Text.Encoding> oggetto proveniente da un'origine non attendibile.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un'istanza della classe <see langword="XmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.TextWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (w As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::TextWriter ^ w);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <see langword="TextWriter" /> in cui scrivere. Si presuppone che il costruttore <see langword="TextWriter" /> sia già impostato sulla codifica corretta.</param>
        <summary>Crea un'istanza della classe <see langword="XmlTextWriter" /> utilizzando l'oggetto <see cref="T:System.IO.TextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.Stream w, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream w, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::Stream ^ w, System::Text::Encoding ^ encoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="w">Flusso in cui scrivere.</param>
        <param name="encoding">Codifica da generare. Se la codifica è <see langword="null" />, il flusso viene scritto come UTF-8 e l'attributo di codifica viene omesso dall'oggetto <see langword="ProcessingInstruction" />.</param>
        <summary>Crea un'istanza della classe <see langword="XmlTextWriter" /> utilizzando la codifica e il flusso specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La codifica non è supportata oppure non è possibile scrivere nel flusso.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="w" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (string filename, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::String ^ filename, System::Text::Encoding ^ encoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="filename">Nome file in cui scrivere. Se il file è esistente, viene troncato e sovrascritto con il nuovo contenuto.</param>
        <param name="encoding">Codifica da generare. Se la codifica è <see langword="null" />, il file viene scritto come UTF-8 e l'attributo di codifica viene omesso dall'oggetto <see langword="ProcessingInstruction" />.</param>
        <summary>Crea un'istanza della classe <see cref="T:System.Xml.XmlTextWriter" /> utilizzando il file specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La codifica non è supportata; il nome file è vuoto, contiene solo spazi oppure contiene uno o più caratteri non validi.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Accesso negato.</exception>
        <exception cref="T:System.ArgumentNullException">Il nome file è <see langword="null" /> .</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Impossibile trovare la directory su cui scrivere.</exception>
        <exception cref="T:System.IO.IOException">Il nome file include una sintassi non corretta o non valida per il nome file, il nome della directory o l'etichetta del volume.</exception>
        <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto flusso sottostante.</summary>
        <value>Flusso in cui il costruttore <see langword="XmlTextWriter" /> scrive o <see langword="null" /> se la classe <see langword="XmlTextWriter" /> è stata creata mediante un oggetto <see cref="T:System.IO.TextWriter" /> che non eredita dalla classe <see cref="T:System.IO.StreamWriter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se il writer è stato creato mediante un `TextWriter` che deriva dal `StreamWriter` (classe), questa proprietà è equivalente al <xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType> proprietà. Se il writer è stato creato mediante un <xref:System.IO.Stream>, questa proprietà restituisce il `Stream` passato al costruttore. Se il writer è stato creato usando un nome file, questa proprietà restituisce il `Stream` che rappresenta il file.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude questo flusso e quello sottostante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Qualsiasi elemento o attributo lasciati aperti viene chiusi automaticamente.  
  
 Questo metodo non genera eccezioni.  
  
   
  
## Examples  
 Nell'esempio seguente viene scritto un frammento XML.  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica il contenuto del buffer nei flussi sottostanti e scarica anche il flusso sottostante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Si tratta invece di <xref:System.Xml.XmlTextWriter.Close%2A> quando si desidera scrivere informazioni nel flusso sottostante senza perdere il contenuto del buffer.  
  
   
  
## Examples  
 Nell'esempio seguente scrive i due frammenti XML.  
  
 [!code-cpp[XmlTextWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextWriter.Flush/CPP/write2docs.cpp#1)]
 [!code-csharp[XmlTextWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextWriter.Flush/CS/write2docs.cs#1)]
 [!code-vb[XmlTextWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextWriter.Flush/VB/write2docs.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Formatting">
      <MemberSignature Language="C#" Value="public System.Xml.Formatting Formatting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Formatting Formatting" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Formatting" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatting As Formatting" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Formatting Formatting { System::Xml::Formatting get(); void set(System::Xml::Formatting value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Formatting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica come viene formattato l'output.</summary>
        <value>Uno dei valori di <see cref="T:System.Xml.Formatting" />. Il valore predefinito è <see langword="Formatting.None" /> (nessuna formattazione speciale).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se il `Indented` opzione è impostata, gli elementi figlio vengono rientrati utilizzando il <xref:System.Xml.XmlTextWriter.Indentation%2A> e <xref:System.Xml.XmlTextWriter.IndentChar%2A> proprietà. Solo il contenuto dell'elemento viene rientrato. Gli elementi HTML contenuto misto scrive il codice c# seguente:  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);   
 w.Formatting = Formatting.Indented;   
 w.WriteStartElement("ol");   
 w.WriteStartElement("li");   
 w.WriteString("The big "); // This means "li" now has a mixed content model.  
 w.WriteElementString("b", "E");   
 w.WriteElementString("i", "lephant");   
 w.WriteString(" walks slowly.");   
 w.WriteEndElement();   
 w.WriteEndElement();  
```  
  
 Il codice precedente produce il seguente output:  
  
```xml  
<ol>   
  <li>The big <b>E</b><i>lephant</i> walks slowly.</li>   
</ol>  
```  
  
 Quando questo viene visualizzato in formato HTML appare alcuno spazio tra gli elementi in grassetto e corsivo. In realtà, in questo esempio, se è stato aggiunto il rientro tra questi elementi la parola "Elephant" sarebbe interrotta in modo non corretto.  
  
> [!NOTE]
>  Scrittura di qualsiasi tipo di contenuto, escludendo `String.Empty` attiva per l'elemento in modalità a contenuto misto. Gli elementi figlio non ereditano lo stato "mista". Un elemento figlio di un elemento "misto" non rientri, a meno che non è inoltre contenuto "misto". Contenuto dell'elemento (http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content) e contenuto misto (http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content) sono definiti in base alle definizioni XML 1.0 di questi termini.  
  
   
  
## Examples  
 Nell'esempio seguente viene scritto un frammento XML.  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="Indentation">
      <MemberSignature Language="C#" Value="public int Indentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indentation" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Indentation" />
      <MemberSignature Language="VB.NET" Value="Public Property Indentation As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indentation { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero di oggetti IndentChars da scrivere per ciascun livello nella gerarchia quando la proprietà <see cref="P:System.Xml.XmlTextWriter.Formatting" /> è impostata su <see langword="Formatting.Indented" />.</summary>
        <value>Numero di oggetti <see langword="IndentChars" /> per ciascun livello. Il valore predefinito è 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Il rientro è applicato ai seguenti tipi di nodo: `DocumentType`, `Element`, `Comment`, `ProcessingInstruction`, e `CDATASection`. Tutti gli altri tipi di nodo non sono interessati. Il `XmlTextWriter` non applica un rientro al sottoinsieme DTD interno. Tuttavia, è possibile eseguire le operazioni seguenti per applicare la formattazione al sottoinsieme DTD interno.  
  
```csharp  
String name = "Employees";  
String pubid = null;  
String sysid = null;  
String subset =  
@"  
    <!ELEMENT Employees (Employee)+>  
    <!ELEMENT Employee EMPTY>  
    <!ATTLIST Employee firstname CDATA #REQUIRED>  
    <!ENTITY Company 'Microsoft'>]>  
";  
XmlTextWriter tw = new XmlTextWriter(Console.Out);  
tw.WriteDocType(name, pubid, sysid, subset);  
```  
  
   
  
## Examples  
 Nell'esempio seguente viene scritto un frammento XML.  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Impostazione della proprietà su un valore negativo.</exception>
        <altmember cref="P:System.Xml.XmlTextWriter.IndentChar" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="IndentChar">
      <MemberSignature Language="C#" Value="public char IndentChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char IndentChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.IndentChar" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char IndentChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il carattere da utilizzare per il rientro quando la proprietà <see cref="P:System.Xml.XmlTextWriter.Formatting" /> è impostata su <see langword="Formatting.Indented" />.</summary>
        <value>Carattere da usare per il rientro. Il valore predefinito è lo spazio.  
  
 <block subset="none" type="note"><para>  
 La classe <see langword="XmlTextWriter" /> consente di impostare questa proprietà su qualsiasi carattere. Per garantire che il codice XML sia valido, è necessario specificare un carattere valido per lo spazio vuoto, ossia 0x9, 0x10, 0x13 o 0x20.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlTextWriter.Indentation" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public override string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">URI dello spazio dei nomi di cui si desidera individuare il prefisso.</param>
        <summary>Restituisce il prefisso più vicino definito nell'ambito dello spazio dei nomi corrente per l'URI dello spazio dei nomi.</summary>
        <returns>Prefisso corrispondente. oppure <see langword="null" /> se non viene individuato un URI dello spazio dei nomi corrispondente nell'ambito corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ns" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se supportare gli spazi dei nomi.</summary>
        <value>
          <see langword="true" /> per supportare lo spazio dei nomi; in caso contrario, <see langword="false" />.  
  
 Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questa proprietà determina se il writer supporta gli spazi dei nomi W3C nella raccomandazione XML disponibile all'indirizzo www.w3.org/TR/REC-xml-names.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È possibile modificare questa proprietà solo se <see langword="WriteState.Start" /> è lo stato attivo.</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public char QuoteChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char QuoteChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il carattere da usare per racchiudere tra virgolette i valori degli attributi.</summary>
        <value>Carattere da usare per racchiudere tra virgolette i valori degli attributi. Deve trattarsi di una virgoletta singola (&amp;#39;) o una virgoletta doppia (&amp;#34;). Il valore predefinito è rappresentato dalle virgolette doppie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Impostazione della proprietà su un valore diverso dalle virgolette singole o doppie.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public override void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di byte da codificare.</param>
        <param name="index">Posizione all'interno del buffer che indica l'inizio dei byte da scrivere.</param>
        <param name="count">Numero di byte da scrivere.</param>
        <summary>Codifica i byte binari specificati come valori Base64 e scrive il testo risultante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
   
  
## Examples  
 Nell'esempio seguente consente di codificare un file di input utilizzando `WriteBase64` e genera un file XML temporaneo. Il file XML temporaneo viene decodificato usando il <xref:System.Xml.XmlTextReader.ReadBase64%2A> metodo e confrontato con il file originale.  
  
 [!code-cpp[XmlWriter.WriteBase64#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteBase64/CPP/writebase64.cpp#1)]
 [!code-csharp[XmlWriter.WriteBase64#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteBase64/CS/writebase64.cs#1)]
 [!code-vb[XmlWriter.WriteBase64#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteBase64/VB/writebase64.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La lunghezza del buffer meno <paramref name="index" /> è minore di <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="P:System.Xml.XmlTextWriter.WriteState" /> è <see langword="Closed" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public override void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di byte da codificare.</param>
        <param name="index">Posizione nel buffer che indica l'inizio dei byte da scrivere.</param>
        <param name="count">Numero di byte da scrivere.</param>
        <summary>Codifica i byte binari specificati come valori BinHex e scrive il testo risultante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La lunghezza del buffer meno <paramref name="index" /> è minore di <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Xml.XmlTextWriter.WriteState" /> ha valore Closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public override void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCData(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da inserire all'interno del blocco CDATA.</param>
        <summary>Scrive un blocco &lt;![CDATA[...]]&gt; contenente il testo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se `text` è `null` o `String.Empty`, questo metodo scrive un blocco CDATA vuoto, ad esempio \<! [ CDATA []]] ><! [CDATA [>.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il testo genera un documento XML di formato non corretto.</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="P:System.Xml.XmlTextWriter.WriteState" /> è <see langword="Closed" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCharEntity(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode per il quale generare l'entità di caratteri.</param>
        <summary>Forza la generazione di un'entità carattere per il valore del carattere Unicode specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo scrive il carattere Unicode in formato di riferimento di entità carattere esadecimale.  
  
   
  
## Examples  
 L'esempio seguente usa il `WriteCharEntity` metodo per scrivere un indirizzo di posta elettronica.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il carattere è contenuto nell'intervallo di caratteri della coppia di surrogati, <see langword="0xd800" /> - <see langword="0xdfff" />; o il testo genera un documento XML di formato non corretto.</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="P:System.Xml.XmlTextWriter.WriteState" /> è <see langword="Closed" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public override void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che contiene il testo da scrivere.</param>
        <param name="index">Posizione nel buffer che indica l'inizio del testo da scrivere.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Il testo viene scritto in un buffer alla volta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo può essere utilizzato per scrivere grandi quantità di un buffer di testo in un momento.  
  
 Una gestione speciale deve essere eseguita per assicurare la `WriteChars` metodo separi i caratteri delle coppie di surrogati in più scritture nel buffer. La specifica XML definisce i valori validi per le coppie di surrogati.  
  
 Se vengono scritti caratteri delle coppie di surrogati che verrebbero i caratteri delle coppie di surrogati nel buffer in corso la suddivisione, viene generata un'eccezione.  
  
   
  
## Examples  
 [!code-csharp[XmlTextWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmltextwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 La lunghezza del buffer meno il parametro <paramref name="index" /> è inferiore al parametro <paramref name="count" />; il risultato della chiamata consiste nella separazione dei caratteri della coppia di surrogati o nella scrittura di una coppia di surrogati non valida.</exception>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Xml.XmlTextWriter.WriteState" /> ha valore Closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public override void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteComment(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da inserire nel commento.</param>
        <summary>Scrive un commento &lt;!--...--&gt; contenente il testo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se `text` è `null` o `String.Empty`, questo metodo scrive un `Comment` senza dati, ad esempio \<!--->.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il testo genera un documento XML di formato non corretto.</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="P:System.Xml.XmlTextWriter.WriteState" /> è <see langword="Closed" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public override void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome per la dichiarazione DOCTYPE. Questo parametro non deve essere vuoto.</param>
        <param name="pubid">Se diverso da Null, scrive anche PUBLIC "pubid" "sysid", dove <c>pubid</c> e <c>sysid</c> vengono sostituiti con il valore degli argomenti specificati.</param>
        <param name="sysid">Se <c>pubid</c> è Null e <c>sysid</c> è diverso da Null, scrive SYSTEM "sysid" dove <c>sysid</c> viene sostituito dal valore di questo argomento.</param>
        <param name="subset">Se diverso da Null, scrive [subset], che viene sostituito dal valore di questo argomento.</param>
        <summary>Scrive la dichiarazione DOCTYPE con il nome e gli attributi opzionali specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo non verifica i caratteri non validi in `pubid`, `sysid` o `subset`. Inoltre non controlla che il sottoinsieme interno è ben formato.  
  
> [!IMPORTANT]
>  Il <xref:System.Xml.XmlTextWriter> non convalida i dati che viene passati per il <xref:System.Xml.XmlTextWriter.WriteDocType%2A> metodo. A questo metodo non passare dati arbitrari.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Questo metodo è stato chiamato fuori dal prologo, ovvero dopo l'elemento radice.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.  
  
 oppure  
  
 Il risultato del valore del parametro <paramref name="name" /> è un documento XML non valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public override void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndAttribute();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude la chiamata al metodo <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> precedente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se si chiama `WriteStartAttribute`, è possibile chiudere l'attributo con questo metodo.  
  
 È anche possibile chiudere l'attributo chiamando `WriteStartAttribute` nuovamente la chiamata <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, o la chiamata <xref:System.Xml.XmlTextWriter.WriteEndElement%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public override void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude qualsiasi elemento o attributo aperto e riporta il writer allo stato di avvio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il documento XML non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public override void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude un elemento e visualizza l'ambito dello spazio dei nomi corrispondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se l'elemento non contiene contenuto short tag di fine "/ >" è scritta. in caso contrario, viene scritto un tag di fine completo.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public override void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEntityRef(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del riferimento a un'entità.</param>
        <summary>Scrive un riferimento a entità con formato <see langword="&amp;name;" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il testo genera un documento XML di formato non corretto oppure il parametro <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public override void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteFullEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude un elemento e visualizza l'ambito dello spazio dei nomi corrispondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo scrive sempre il tag di fine completo. Ciò è utile quando si lavora con gli elementi che devono includere un tag di fine completo. Ad esempio, browser si aspettano di blocchi di script HTML per essere chiuso con " \< /script >".  
  
   
  
## Examples  
 Nell'esempio seguente scrive un elemento senza contenuto. Usa il metodo WriteFullEndElement per scrivere il tag di fine completo dell'elemento.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public override void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome da scrivere.</param>
        <summary>Inserisce il nome specificato, verificando che si tratti di un nome valido in base alla raccomandazione W3C XML 1.0, disponibile all'indirizzo http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se <xref:System.Xml.XmlTextWriter.Namespaces%2A> è impostato su `true`, `WriteName` controlla anche che il nome sia valido in base agli spazi dei nomi W3C raccomandazione XML.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="name" /> non è un nome XML valido oppure il parametro <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public override void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNmToken(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome da scrivere.</param>
        <summary>Inserisce il nome specificato, verificando che si tratti di un oggetto <see langword="NmToken" /> valido in base alla raccomandazione W3C XML 1.0, disponibile all'indirizzo http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="name" /> non è un oggetto <see langword="NmToken" /> valido oppure il parametro <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public override void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome dell'istruzione di elaborazione.</param>
        <param name="text">Testo da includere nell'istruzione di elaborazione.</param>
        <summary>Scrive un'istruzione di elaborazione con uno spazio tra il nome e il testo, come segue: &lt;?name text?&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Se `text` è `null` o `String.Empty`, questo metodo scrive un `ProcessingInstruction` senza dati, ad esempio \<? nome? >.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il testo genera un documento XML di formato non corretto.  
  
 <paramref name="name" /> è <see langword="null" /> o <see langword="String.Empty" />.  
  
 Questo metodo viene utilizzato per creare una dichiarazione XML quando il metodo <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> è stato già chiamato.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public override void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nome locale da scrivere.</param>
        <param name="ns">URI dello spazio dei nomi da associare al nome.</param>
        <summary>Scrive il nome completo dello spazio dei nomi. Questo metodo esegue la ricerca del prefisso incluso nell'ambito dello spazio dei nomi specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Ad esempio, il codice Microsoft Visual c# seguente:  
  
```csharp  
writer.Formatting = Formatting.Indented;  
writer.WriteStartElement("root");  
 writer.WriteAttributeString("xmlns","x",null,"urn:abc");  
 writer.WriteStartElement("item");  
 writer.WriteStartAttribute("href",null);  
 writer.WriteString("#");  
 writer.WriteQualifiedName("test","urn:abc");  
 writer.WriteEndAttribute();  
 writer.WriteEndElement();  
 writer.WriteEndElement();  
 writer.Close();  
```  
  
 Genera il seguente output:  
  
```xml  
<root xmlns:x="urn:abc">  
 <item href="#x:test"/>  
 </root>  
```  
  
 Se `ns` esegue il mapping dello spazio dei nomi predefinito corrente, senza il prefisso viene generato.  
  
 Durante la scrittura di valori di attributo, questo metodo genera un prefisso se `ns` non viene trovato. Quando si scrive il contenuto dell'elemento, genera un'eccezione se `ns` non viene trovato.  
  
 Se questo writer supporta gli spazi dei nomi (<xref:System.Xml.XmlTextWriter.Namespaces%2A> è impostata su `true`), questo metodo controlla inoltre che il nome sia valido secondo la W3C raccomandazione Namespaces in XML (http://www.w3.org/TR/REC-xml-names).  
  
   
  
## Examples  
 Nell'esempio seguente scrive una parte di uno schema XSD.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> è <see langword="null" /> o <see langword="String.Empty" />.  
  
 Il parametro <paramref name="localName" /> non è un nome valido in base alla specifica W3C Namespaces.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive manualmente markup non elaborato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Stringa contenente il testo da scrivere.</param>
        <summary>Scrive manualmente markup non elaborato in base a una stringa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo non effettua l'escape di caratteri speciali.  
  
> [!IMPORTANT]
>  Il <xref:System.Xml.XmlTextWriter> non convalida i dati che viene passati per il <xref:System.Xml.XmlTextWriter.WriteRaw%2A> metodo. A questo metodo non passare dati arbitrari.  
  
   
  
## Examples  
 Nell'esempio seguente scrive una stringa usando il `WriteRaw` metodo.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri che contiene il testo da scrivere.</param>
        <param name="index">Posizione all'interno del buffer che indica l'inizio del testo da scrivere.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Scrive manualmente markup non elaborato in base a un buffer di caratteri.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo non effettua l'escape di caratteri speciali.  
  
> [!IMPORTANT]
>  Il <xref:System.Xml.XmlTextWriter> non convalida i dati che viene passati per il <xref:System.Xml.XmlTextWriter.WriteRaw%2A> metodo. A questo metodo non passare dati arbitrari.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 La lunghezza del buffer meno <paramref name="index" /> è minore di <paramref name="count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public override void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          Prefisso dello <see langword="Namespace" /> dell'attributo.</param>
        <param name="localName">
          <see langword="LocalName" /> dell'attributo.</param>
        <param name="ns">
          <see langword="NamespaceURI" /> dell'attributo.</param>
        <summary>Scrive l'inizio di un attributo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Si tratta di una versione avanzata di <xref:System.Xml.XmlWriter.WriteAttributeString%2A> che consente di scrivere un valore di attributo utilizzando più metodi di scrittura, ad esempio <xref:System.Xml.XmlTextWriter.WriteString%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> è <see langword="null" /> o <see langword="String.Empty" />.</exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive la dichiarazione XML con la versione "1.0".</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive la dichiarazione XML con la versione "1.0".</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Il livello di codifica del documento è determinato dalla modalità di implementazione del writer. Ad esempio, se un <xref:System.Text.Encoding> specificato nel `XmlTextWriter` costruttore, questa impostazione determina il valore dell'attributo di codifica. Questo metodo non crea un attributo autonomo.  
  
 Quando `WriteStartDocument` viene chiamato il writer garantisce che si sta scrivendo un documento XML ben formato. Ad esempio, verifica che la dichiarazione XML sia il primo nodo, che un unico elemento di livello radice esiste e così via. Se non viene chiamato questo metodo, il writer presuppone un frammento XML viene scritto e applica regole di primo livello.  
  
 Se `WriteStartDocument` è stato chiamato e quindi la <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> metodo viene utilizzato per creare un'altra dichiarazione XML, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un file XML che rappresenta un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Non si tratta del primo metodo di scrittura chiamato dopo il costruttore.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument(bool standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Se il parametro ha valore <see langword="true" />, viene scritto "standalone=yes"; se il parametro ha valore <see langword="false" />, viene scritto "standalone=no".</param>
        <summary>Scrive la dichiarazione XML con la versione "1.0" e l'attributo standalone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Il livello di codifica del documento è determinato dalla modalità di implementazione del writer. Ad esempio, se un <xref:System.Text.Encoding> specificato nel `XmlTextWriter` costruttore, questa impostazione determina il valore dell'attributo di codifica.  
  
 Quando `WriteStartDocument` viene chiamato il writer garantisce che si sta scrivendo un documento XML ben formato. Ad esempio, verifica che la dichiarazione XML sia il primo nodo, che un unico elemento di livello radice esiste e così via. Se non viene chiamato questo metodo, il writer presuppone un frammento XML viene scritto e applica regole di primo livello.  
  
 Se `WriteStartDocument` è stato chiamato e quindi la <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> metodo viene utilizzato per creare un'altra dichiarazione XML, viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Non si tratta del primo metodo di scrittura chiamato dopo il costruttore.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public override void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dello spazio dei nomi dell'elemento.</param>
        <param name="localName">Nome locale dell'elemento.</param>
        <param name="ns">URI dello spazio dei nomi da associare all'elemento. Se questo spazio dei nomi si trova già nell'ambito ed è associato a un prefisso, il writer scriverà automaticamente anche tale prefisso.</param>
        <summary>Scrive il tag di inizio specificato e lo associa allo spazio dei nomi e al prefisso indicati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Dopo aver chiamato questo metodo è possibile scrivere attributi o creare contenuti usando <xref:System.Xml.XmlTextWriter.WriteComment%2A>, <xref:System.Xml.XmlTextWriter.WriteString%2A>, o <xref:System.Xml.XmlTextWriter.WriteStartElement%2A> per gli elementi figlio. È possibile chiudere l'elemento con <xref:System.Xml.XmlTextWriter.WriteEndElement%2A> momento in cui viene scritto un tag di fine.  
  
   
  
## Examples  
 Nell'esempio seguente scrive un libro.  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il writer viene chiuso.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public override System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene lo stato del writer.</summary>
        <value>Uno dei valori di <see cref="T:System.Xml.WriteState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public override void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteString(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da scrivere.</param>
        <summary>Scrive il contenuto di testo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 `WriteString` esegue le operazioni seguenti  
  
-   I caratteri `&`, `<`, e `>` vengono sostituite con `&amp;`, `&lt;`, e `&gt;`, rispettivamente.  
  
-   I valori di carattere in x-0x1F l'intervallo compreso tra 0 (esclusi i caratteri di spazio 0x9, 0xA e 0xD) sono sostituiti con entità di caratteri numerici (`&#0;` tramite `&#0x1F`).  
  
-   Se `WriteString` viene chiamato nel contesto di un valore di attributo, le virgolette doppie e singole vengono sostituite con `&quot;` e `&apos;` rispettivamente.  
  
 Ad esempio, questa stringa di input `test<item>test` viene scritto come  
  
```  
test&lt;item&gt;test  
```  
  
 Se `text` è `null` o `String.Empty`, questo metodo non scrive un nodo testo dati.  
  
   
  
## Examples  
 Nell'esempio seguente viene scritto un frammento XML.  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La stringa di testo contiene una coppia di surrogati non valida.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">Surrogato basso. Questo valore deve essere compreso tra <see langword="0xDC00" /> e <see langword="0xDFFF" />.</param>
        <param name="highChar">Surrogato alto. Questo valore deve essere compreso tra <see langword="0xD800" /> e <see langword="0xDBFF" />.</param>
        <summary>Genera e scrive l'entità carattere surrogata per la coppia di caratteri surrogati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo è disponibile solo nei sistemi che utilizzano la codifica UTF-16.  
  
 L'entità di caratteri surrogati viene scritto in formato esadecimale. L'intervallo dei caratteri surrogati `#x10000` a `#x10FFFF`. La formula seguente viene utilizzata per generare l'entità di caratteri surrogati: (`highChar` - `0xD800`) * `0x400` + (`lowChar` - `0xDC00`) + `0x10000`.  
  
 Per HTML e XML, il set di caratteri del documento (e pertanto la notazione di riferimenti a caratteri numerici) si basa sul UCS [ISO 10646]. Un singolo riferimento numerico del carattere in un documento di origine può pertanto in alcuni casi corrisponde a due unità di 16 bit in una stringa (un surrogato alto e un surrogato basso). Queste unità di 16 bit sono definite per una coppia di surrogati.  
  
 Per ulteriori informazioni riguardanti i surrogati o caratteri, fare riferimento alla sezione 3.7 dello Unicode 3.0/Unicode 2.0 standard che si trova in http://www.unicode.org, o sezione 2.2 della raccomandazione W3C XML 1.0 disponibile all'indirizzo http://www.w3.org/TR/REC-xml#charsets.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">È stata passata una coppia di caratteri surrogati non valida.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public override void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteWhitespace(System::String ^ ws);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">Stringa di caratteri spazio vuoto.</param>
        <summary>Scrive lo spazio vuoto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questo metodo viene utilizzato per formattare manualmente il documento. Utilizzare il <xref:System.Xml.XmlTextWriter.Formatting%2A> proprietà formattare automaticamente l'output per il writer.  
  
   
  
## Examples  
 L'esempio seguente usa il `WriteWhitespace` metodo per controllare come il file è formattato correttamente.  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La stringa contiene caratteri di non spazio.</exception>
        <altmember cref="P:System.Xml.XmlTextWriter.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'ambito <see langword="xml:lang" /> corrente.</summary>
        <value>L'attributo <see langword="xml:lang" /> corrente o <see langword="null" />, se non sono disponibili <see langword="xml:lang" /> nell'ambito corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questa proprietà consente a un componente individuare lo stato in cui il writer è stato lasciato da un altro componente. Ad esempio, ad esempio un componente vuole indicare a un altro per generare il testo della Guida linguaggio. Le informazioni sul linguaggio viene comunicati scrivendo un `xml:lang` attributo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Xml.XmlSpace" /> che rappresenta l'ambito <see langword="xml:space" /> corrente.</summary>
        <value>Oggetto <see langword="XmlSpace" /> che rappresenta l'ambito <see langword="xml:space" /> corrente.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Significato  
  
 </description></listheader><item><term> Nessuno  
  
 </term><description> Questo è il valore predefinito se non <see langword="xml:space" /> ambito esistente.  
  
 </description></item><item><term> Impostazione predefinita  
  
 </term><description> L'ambito corrente è <see langword="xml:space" />= "default".  
  
 </description></item><item><term> Mantenere  
  
 </term><description> L'ambito corrente è <see langword="xml:space" />= "preserve".  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partire da .NET Framework 2.0, è consigliabile creare <xref:System.Xml.XmlWriter> istanze utilizzando il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (metodo) e <xref:System.Xml.XmlWriterSettings> classe possa sfruttare i vantaggi delle nuove funzionalità.  
  
 Questa proprietà consente a un componente individuare lo stato di un altro componente ha lasciato il writer in.  
  
   
  
## Examples  
 L'esempio seguente usa il `WriteWhitespace` metodo per controllare come il file è formattato correttamente.  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>