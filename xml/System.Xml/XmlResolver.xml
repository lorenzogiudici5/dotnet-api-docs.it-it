<Type Name="XmlResolver" FullName="System.Xml.XmlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="816ca2b3ec28c47ec29cc8bb108efbfcba7ac66a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433874" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlResolver abstract" />
  <TypeSignature Language="F#" Value="type XmlResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Risolve risorse XML esterne denominate da un URI (Uniform Resource Identifier).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlResolver> tipo viene utilizzato per risolvere risorse XML esterne, ad esempio entità, definizioni dei tipi di documento (DTD) o schemi. È inoltre utilizzato per elaborare di inclusione e importare gli elementi presenti in fogli di stile di foglio di stile XSL (Extensible Language) o schemi XML Schema definition language (XSD).  
  
 <xref:System.Xml.XmlResolver> gestisce tutti gli aspetti della negoziazione della connessione alle risorse, tra cui la gestione delle credenziali di sicurezza, aprire la connessione all'origine dati e la restituzione della risorsa in forma di un flusso o un altro tipo di oggetto. L'oggetto che chiama <xref:System.Xml.XmlResolver> ha il compito di interpretare il flusso.  
  
 Il <xref:System.Xml> spazio dei nomi include due implementazioni concrete del <xref:System.Xml.XmlResolver> classe:  
  
-   <xref:System.Xml.XmlUrlResolver> è il resolver predefinito per tutte le classi di <xref:System.Xml> dello spazio dei nomi. Supporta i protocolli `file://` e `http://` e le richieste dalla classe <xref:System.Net.WebRequest?displayProperty=nameWithType>. Per esempi di estensione della classe per migliorare le prestazioni, vedere il <xref:System.Xml.XmlUrlResolver> pagina di riferimento.  
  
-   <xref:System.Xml.XmlSecureResolver> Consente di proteggere un altro <xref:System.Xml.XmlResolver> oggetto all'oggetto di wrapping e limitando le risorse che può accedere. Ad esempio, il <xref:System.Xml.XmlSecureResolver> può impedire l'accesso a specifici siti Internet o nelle zone.  
  
 È possibile creare e specificare il proprio resolver. Se non si specifica un resolver, il visualizzatore utilizza predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente.  
  
 È possibile specificare il tipo <xref:System.Xml.XmlResolver> da utilizzare impostando la proprietà <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> e passando l'oggetto <xref:System.Xml.XmlReaderSettings> al metodo <xref:System.Xml.XmlReader.Create%2A>.  
  
 Se la risorsa viene archiviata in un sistema che richiede l'autenticazione, utilizzare il <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> proprietà per specificare le credenziali necessarie.  
  
## <a name="supplying-authentication-credentials"></a>Fornire le credenziali di autenticazione  
 Il file che contiene i dati XML da leggere siano presenti criteri di accesso limitato. Se per accedere a una determinata risorsa di rete è necessaria l'autenticazione, utilizzare la proprietà <xref:System.Xml.XmlResolver.Credentials%2A> per specificare le credenziali richieste. Se il <xref:System.Xml.XmlResolver.Credentials%2A> non è impostata, le credenziali vengono impostate su `null`.  
  
 Si supponga, ad esempio, che sono necessarie le credenziali quando si richiedono dati dal web per scopi di autenticazione. A meno che la directory virtuale web consente l'accesso anonimo, è necessario impostare il <xref:System.Xml.XmlResolver.Credentials%2A> proprietà per fornire le credenziali. L'esempio seguente crea un' <xref:System.Xml.XmlReader> oggetto che utilizza un <xref:System.Xml.XmlUrlResolver> con le credenziali predefinite per accedere il http://localhost/bookstore/inventory.xml sito.  
  
 [!code-cpp[XmlReaderSettings.cctor#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 È possibile specificare credenziali diverse per diversi URI e aggiungerle a una cache. Queste credenziali sono utilizzate per verificare l'autenticazione dei diversi URI, indipendentemente dall'origine dell'XML. Nell'esempio seguente viene illustrato come aggiungere le credenziali a una cache.  
  
 [!code-csharp[XslCompiledTransform.Load#11](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#11)]
 [!code-vb[XslCompiledTransform.Load#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#11)]  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Tenere presente quanto segue quando si lavora con la <xref:System.Xml.XmlResolver> classe.  
  
-   Gli oggetti <xref:System.Xml.XmlResolver> possono contenere informazioni sensibili quali le credenziali utente. È necessario prestare attenzione quando la memorizzazione nella cache <xref:System.Xml.XmlResolver> oggetti e non deve essere passato il <xref:System.Xml.XmlResolver> oggetto da un componente non attendibile.  
  
-   Se si progetta una proprietà della classe in cui viene utilizzata la classe <xref:System.Xml.XmlResolver>, è necessario definire tale proprietà come proprietà di sola scrittura. La proprietà può essere specificata in modo tale che venga utilizzata dal tipo <xref:System.Xml.XmlResolver>, tuttavia non può essere utilizzata per restituire un oggetto <xref:System.Xml.XmlResolver>.  
  
-   Se l'applicazione accetta <xref:System.Xml.XmlResolver> oggetti da codice non attendibile, non è possibile presupporre che l'URI passato il <xref:System.Xml.XmlResolver.GetEntity%2A> sarà uguale a quello restituito dal metodo di <xref:System.Xml.XmlResolver.ResolveUri%2A> (metodo). Le classi derivate dalla classe <xref:System.Xml.XmlResolver> consentono di ignorare il metodo <xref:System.Xml.XmlResolver.GetEntity%2A> e di restituire dati diversi da quelli contenuti nell'URI originale.  
  
-   L'applicazione può ridurre i denial memoria delle minacce di servizio per il <xref:System.Xml.XmlResolver.GetEntity%2A> metodo implementando un <xref:System.Runtime.InteropServices.ComTypes.IStream> che limita il numero di byte letti. Ciò aiuta a proteggersi da situazioni in cui codice dannoso tenta di passare un flusso di byte da infinito il <xref:System.Xml.XmlResolver.GetEntity%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Xml.XmlUrlResolver> con le credenziali predefinite. Oggetto <xref:System.Xml.XmlReader> viene utilizzato per leggere e visualizzare il flusso di dati risultante.  
  
 [!code-csharp[XmlResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_ex/CS/XmlResolver_ex.cs#1)]
 [!code-vb[XmlResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_ex/VB/XmlResolver_ex.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.XmlResolver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore viene chiamato da costruttori di classi derivate per inizializzare lo stato in questo tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, imposta le credenziali usate per autenticare le richieste Web.</summary>
        <value>Credenziali usate per autenticare le richieste Web. Se questa proprietà non è impostata, viene usato il valore predefinito <see langword="null" />. Questo significa che <see langword="XmlResolver" /> non ha credenziali utente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la directory virtuale non richiede l'autenticazione, questa proprietà non deve essere impostato. In caso contrario, è necessario fornire le credenziali dell'utente.  
  
 Il codice c# seguente imposta le credenziali nel <xref:System.Xml.XmlResolver> oggetto.  
  
```csharp  
NetworkCredential nc = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = nc;  
```  
  
 È possibile associare diversi URI credenziali diverse e aggiungerle a una cache. È quindi possibile utilizzare le credenziali per verificare l'autenticazione dei diversi URI, indipendentemente dall'origine del codice XML.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> per un esempio che usi questa proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntity : Uri * string * Type -&gt; obj" Usage="xmlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI restituito da <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Attualmente non usato.</param>
        <param name="ofObjectToReturn">Tipo di oggetto da restituire. Nella versione corrente vengono restituiti solo oggetti System.IO.Stream.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, esegue il mapping di un URI a un oggetto che contiene la risorsa effettiva.</summary>
        <returns>Oggetto flusso o <see langword="null" /> se viene specificato un tipo diverso dal flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato quando il chiamante vuole eseguire il mapping di un URI specificato nell'oggetto che contiene la risorsa effettiva che rappresenta l'URI. Il tipo di oggetto restituito è negotiable; Tuttavia, l'implementazione deve supportare sempre <xref:System.IO.Stream?displayProperty=nameWithType>.  
  
 Per la versione asincrona di questo metodo, vedere <xref:System.Xml.XmlResolver.GetEntityAsync%2A>.  
  
> [!IMPORTANT]
>  L'applicazione può ridurre i denial memoria delle minacce di servizio per il <xref:System.Xml.XmlResolver.GetEntity%2A> metodo implementando un <xref:System.Runtime.InteropServices.ComTypes.IStream> che limita il numero di byte letti. Ciò aiuta a proteggersi da situazioni in cui codice dannoso tenta di passare un flusso di byte da infinito il <xref:System.Xml.XmlResolver.GetEntity%2A> metodo.  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> per un esempio di utilizzo di questo metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> non è un tipo <see langword="Stream" />.</exception>
        <exception cref="T:System.UriFormatException">L'URI specificato non è assoluto.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="absoluteUri" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Errore di runtime, ad esempio un'interruzione della connessione al server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI restituito da <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Attualmente non usato.</param>
        <param name="ofObjectToReturn">Tipo di oggetto da restituire. La versione corrente restituisce solo oggetti <see cref="T:System.IO.Stream" />.</param>
        <summary>Esegue in modo asincrono il mapping di un URI a un oggetto contenente la risorsa effettiva.</summary>
        <returns>Oggetto flusso o <see langword="null" /> se viene specificato un tipo diverso dal flusso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta della versione asincrona di <xref:System.Xml.XmlResolver.GetEntity%2A>, con la stessa funzionalità. Per utilizzare questo metodo, è necessario impostare il <xref:System.Xml.XmlReaderSettings.Async%2A> flag su `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public virtual Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="abstract member ResolveUri : Uri * string -&gt; Uri&#xA;override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">URI di base usato per risolvere l'URI relativo.</param>
        <param name="relativeUri">URI da risolvere. L'URI può essere assoluto o relativo. Se assoluto, questo valore sostituisce il valore <c>baseUri</c>. Se relativo, viene combinato con il valore <c>baseUri</c> per ottenere un URI assoluto.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, risolve l'URI assoluto dagli URI di base e relativi.</summary>
        <returns>URI assoluto o <see langword="null" /> se l'URI relativo non può essere risolto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'URI assoluto può essere utilizzato come URI di base per le successive richieste per le entità che riguardano questo URI.  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> per un esempio che utilizza questo metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="relativeUri" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsType">
      <MemberSignature Language="C#" Value="public virtual bool SupportsType (Uri absoluteUri, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsType(class System.Uri absoluteUri, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsType(Uri ^ absoluteUri, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member SupportsType : Uri * Type -&gt; bool&#xA;override this.SupportsType : Uri * Type -&gt; bool" Usage="xmlResolver.SupportsType (absoluteUri, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI.</param>
        <param name="type">Tipo da restituire.</param>
        <summary>Consente al resolver di restituire tipi diversi da <see cref="T:System.IO.Stream" />.</summary>
        <returns>
          <see langword="true" /> e <paramref name="type" /> è supportato; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>