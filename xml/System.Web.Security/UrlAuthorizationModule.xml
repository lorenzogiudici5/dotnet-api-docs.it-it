<Type Name="UrlAuthorizationModule" FullName="System.Web.Security.UrlAuthorizationModule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="be5d071b917e424696668088467a08d983ec9ba0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30545525" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class UrlAuthorizationModule : System.Web.IHttpModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UrlAuthorizationModule extends System.Object implements class System.Web.IHttpModule" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.UrlAuthorizationModule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UrlAuthorizationModule&#xA;Implements IHttpModule" />
  <TypeSignature Language="C++ CLI" Value="public ref class UrlAuthorizationModule sealed : System::Web::IHttpModule" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpModule</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Verifica che l'utente disponga delle autorizzazioni per accedere all'URL richiesto. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.UrlAuthorizationModule> determina se l'utente corrente è autorizzato ad accedere all'URL richiesto, in base all'utente <xref:System.Security.Principal.IIdentity.Name%2A> oppure l'elenco di ruoli che un utente è membro. Per informazioni sulla determinazione il nome utente, vedere [autenticazione ASP.NET](http://msdn.microsoft.com/library/fc10b0ef-4ce4-4a7f-9174-886325221ee1). Per informazioni su come gestire i ruoli utente, vedere [gestione dei ruoli di autorizzazione utilizzando](http://msdn.microsoft.com/library/01954ce4-39a2-487f-8153-a69f6f6f3195).  
  
 Autorizzazione per un utente o un ruolo è gestita mediante l'elemento di configurazione. È possibile consentire o negare a un utente o un ruolo utilizzando il `allow` o `deny` sottoelementi, rispettivamente. Il `allow` e `deny` sottoelementi vengono interpretati in ordine appaiono nella configurazione. Una volta che un elemento specifica che l'accesso è consentito o negato, il <xref:System.Web.Security.UrlAuthorizationModule> viene completato il controllo delle autorizzazioni. Ad esempio, nella sezione seguente da un file Web. config richiede agli utenti di accedere (negando utenti anonimi) e quindi consente solo agli utenti nel ruolo amministratori di accedere. Gli utenti non presenti il ruolo di amministratore vengono negati.  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 Un utente o ruolo deve essere negato in modo specifico per rifiutare l'utente o ruolo l'autorizzazione a un URL. Vale a dire, se l'esempio precedente non fosse stato specificato il `<deny users="*" />` elemento, quindi tutti gli utenti autenticati sarebbe stato consentito l'accesso all'URL richiesto, indipendentemente dal ruolo è un membro di.  
  
   
  
## Examples  
 Esempio di codice seguente concede l'accesso a Kim e ai membri del ruolo amministratori, mentre viene negato a Giorgio e tutti gli utenti anonimi.  
  
```  
<authorization>  
  <allow users="Kim"/>  
  <allow roles="Admins"/>  
  <deny users="John"/>  
  <deny users="?"/>  
</authorization>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UrlAuthorizationModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UrlAuthorizationModule();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea un'istanza della classe <see cref="T:System.Web.Security.UrlAuthorizationModule" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non è destinato a essere chiamato dal codice dell'applicazione.  
  
 In ASP.NET viene chiamato questo costruttore per creare un'istanza di <xref:System.Web.Security.UrlAuthorizationModule> classe. Dopo aver chiamato il costruttore, viene chiamato il <xref:System.Web.Security.UrlAuthorizationModule.Init%2A> metodo per inizializzare la nuova <xref:System.Web.Security.UrlAuthorizationModule> oggetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUrlAccessForPrincipal">
      <MemberSignature Language="C#" Value="public static bool CheckUrlAccessForPrincipal (string virtualPath, System.Security.Principal.IPrincipal user, string verb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CheckUrlAccessForPrincipal(string virtualPath, class System.Security.Principal.IPrincipal user, string verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckUrlAccessForPrincipal (virtualPath As String, user As IPrincipal, verb As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CheckUrlAccessForPrincipal(System::String ^ virtualPath, System::Security::Principal::IPrincipal ^ user, System::String ^ verb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="user" Type="System.Security.Principal.IPrincipal" />
        <Parameter Name="verb" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Percorso virtuale del file.</param>
        <param name="user">Oggetto <see cref="T:System.Security.Principal.IPrincipal" /> che rappresenta l'utente corrente.</param>
        <param name="verb">Verbo HTTP utilizzato per effettuare la richiesta.</param>
        <summary>Determina se l'utente dispone delle autorizzazioni per accedere al file richiesto.</summary>
        <returns>
          <see langword="true" /> se all'utente corrente è consentito accedere al file; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal%2A> metodo controlla se l'utente corrente è concesso l'accesso al file richiesto nel file Web. config per l'applicazione.  
  
 Se il verbo HTTP utilizzato per eseguire la richiesta è `GET`, `POST`, o `HEAD`, <xref:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal%2A> metodo controlla l'accesso in lettura al file. Se si utilizza un qualsiasi altro verbo, la <xref:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal%2A> verifica la presenza di accesso in lettura/scrittura al file.  
  
 Per ulteriori informazioni e un file Web. config di esempio, vedere il <xref:System.Web.Security.UrlAuthorizationModule> documentazione relativa alla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="virtualPath" /> è <see langword="null" />.  
  
 \- oppure -  
  
 <paramref name="user" /> è <see langword="null" />.  
  
 \- oppure -  
  
 <paramref name="verb" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> non è compreso nel percorso della directory radice dell'applicazione.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpModule.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse, diverse dalla memoria, utilizzate da <see cref="T:System.Web.Security.UrlAuthorizationModule" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non deve essere chiamato dal codice dell'applicazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (System.Web.HttpApplication app);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Init(class System.Web.HttpApplication app) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Init (app As HttpApplication)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Init(System::Web::HttpApplication ^ app);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpModule.Init(System.Web.HttpApplication)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="System.Web.HttpApplication" />
      </Parameters>
      <Docs>
        <param name="app">L'istanza <see cref="T:System.Web.HttpApplication" /> corrente.</param>
        <summary>Inizializza l'oggetto <see cref="T:System.Web.Security.UrlAuthorizationModule" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non deve essere chiamato dal codice dell'applicazione.  
  
 Il <xref:System.Web.Security.UrlAuthorizationModule.Init%2A> metodo assicura che il <xref:System.Web.Security.UrlAuthorizationModule> è incluso nell'elaborazione del <xref:System.Web.HttpApplication.AuthorizeRequest> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>