<Type Name="Membership" FullName="System.Web.Security.Membership">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="154b580fad2f113d6f9ace11e7f2e904f5c253df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30551215" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Membership" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Membership extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Membership" />
  <TypeSignature Language="VB.NET" Value="Public Class Membership" />
  <TypeSignature Language="C++ CLI" Value="public ref class Membership abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Convalida le credenziali degli utenti e gestisce le impostazioni utente. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Security.Membership> classe viene utilizzata nelle applicazioni ASP.NET per convalidare le credenziali utente e gestire le impostazioni utente, ad esempio le password e gli indirizzi di posta elettronica. Il <xref:System.Web.Security.Membership> classe può essere utilizzata in modo autonomo o in combinazione con il <xref:System.Web.Security.FormsAuthentication> per creare un sistema completo per l'autenticazione degli utenti di un'applicazione Web o del sito. Il <xref:System.Web.UI.WebControls.Login> controllo incapsula il <xref:System.Web.Security.Membership> classe per fornire un meccanismo efficace per la convalida degli utenti.  
  
> [!NOTE]
>  Se non si ha familiarità con le funzionalità di appartenenza di ASP.NET, vedere [Introduction to Membership](http://msdn.microsoft.com/library/79184d17-f4c7-4c9f-a073-cec4f5543980) prima di continuare. Per un elenco di altri argomenti correlati all'appartenenza, vedere [gestione degli utenti tramite l'appartenenza](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd).  
  
 La <xref:System.Web.Security.Membership> classe fornisce funzionalità per:  
  
-   Creazione di nuovi utenti.  
  
-   L'archiviazione delle informazioni di appartenenza (nomi utente, password, indirizzi di posta elettronica e i dati di supporto) in Microsoft SQL Server o in un archivio dati alternativo.  
  
-   Autenticazione degli utenti che visitano il sito. È possibile autenticare gli utenti a livello di codice oppure è possibile utilizzare il <xref:System.Web.UI.WebControls.Login> controllo per creare un sistema di completare l'autenticazione che richiede il codice senza alcuna.  
  
-   La gestione delle password, che include la creazione, modifica, recupero e reimpostazione e così via. È possibile configurare l'appartenenza ASP.NET per richiedere la password segreta per autenticare le richieste di reimpostare o recuperare la password per gli utenti che hanno dimenticato la password.  
  
 Anche se l'appartenenza ASP.NET è una funzionalità indipendenti di ASP.NET per l'autenticazione, può essere integrato con la gestione dei ruoli ASP.NET per fornire servizi di autorizzazione per il sito. Appartenenza può anche essere integrata con l'utente ASP.NET <xref:System.Web.Profile> per consentire la personalizzazione di specifiche dell'applicazione personalizzata in base a singoli utenti. Per informazioni dettagliate, vedere [informazioni sulla gestione dei ruoli](http://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6) e [Cenni preliminari sulle proprietà di profilo ASP.NET](http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d).  
  
 La <xref:System.Web.Security.Membership> classe si basa sui provider di appartenenze per comunicare con un'origine dati. .NET Framework include un <xref:System.Web.Security.SqlMembershipProvider>, che archivia le informazioni utente in un database di Microsoft SQL Server e un <xref:System.Web.Security.ActiveDirectoryMembershipProvider>, che consente di archiviare informazioni utente in un server Active Directory o Active Directory applicazione Mode (ADAM). È anche possibile implementare un provider di appartenenze personalizzato per comunicare con un'origine dati alternativa che può essere usata per la <xref:System.Web.Security.Membership> classe. Provider di appartenenze personalizzato ereditano la <xref:System.Web.Security.MembershipProvider> classe astratta. Per ulteriori informazioni, vedere [implementa un Provider di appartenenze](http://msdn.microsoft.com/library/d8658b8e-c962-4f64-95e1-4acce35e4582).  
  
 Per impostazione predefinita, l'appartenenza ASP.NET è abilitata per tutte le applicazioni ASP.NET. Il provider di appartenenze predefinito è il <xref:System.Web.Security.SqlMembershipProvider> e viene specificato nella configurazione del computer con il nome `AspNetSqlProvider`. L'istanza predefinita del <xref:System.Web.Security.SqlMembershipProvider> è configurata per connettersi a un'istanza locale di Microsoft SQL Server.  
  
 È possibile modificare le impostazioni predefinite per specificare un <xref:System.Web.Security.SqlMembershipProvider> tranne il `AspNetSqlProvider` istanza come provider predefinito o specificare un'istanza di un provider personalizzato come provider predefinito per l'applicazione ASP.NET utilizzando il file Web. config. È possibile specificare la configurazione di appartenenze ASP.NET per l'applicazione Web utilizzando la sezione di configurazione nel file Web. config. È possibile utilizzare il `providers` sottosezione della sezione per specificare un provider di appartenenze diverso da uno dei provider predefinito. Ad esempio, nella sezione seguente rimuove il provider di appartenenze predefiniti dalla configurazione dell'applicazione corrente e aggiunge un nuovo provider con un nome di `SqlProvider` che si connette a un'istanza di SQL Server denominata `AspSqlServer`.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=AspSqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
   
  
## Examples  
 Esempio di codice seguente mostra la pagina di accesso per un'applicazione ASP.NET configurata per utilizzare l'autenticazione basata su form e le appartenenze di ASP.NET. Se le credenziali utente specificate non sono validi, viene visualizzato un messaggio all'utente. In caso contrario, l'utente viene reindirizzato all'URL richiesto originariamente utilizzando il <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> metodo.  
  
> [!NOTE]
>  I controlli di accesso ASP.NET (<xref:System.Web.UI.WebControls.Login>, <xref:System.Web.UI.WebControls.LoginView>, <xref:System.Web.UI.WebControls.LoginStatus>, <xref:System.Web.UI.WebControls.LoginName>, e <xref:System.Web.UI.WebControls.PasswordRecovery>) incapsulata tutta la logica necessaria per richiedere le credenziali degli utenti e convalidare le credenziali nel sistema di appartenenze e può essere utilizzato al posto di utilizzo di controllo a livello di codice la <xref:System.Web.Security.Membership> classe.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome dell'applicazione.</summary>
        <value>Nome dell'applicazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.ApplicationName%2A> viene utilizzato per identificare gli utenti specifici di un'applicazione. Vale a dire lo stesso nome utente può esistere nel database per più applicazioni ASP.NET che specificano un altro <xref:System.Web.Security.Membership.ApplicationName%2A>. In questo modo più applicazioni di utilizzare lo stesso database per archiviare informazioni utente senza che si verifichino conflitti di nome utente duplicato. In alternativa, più applicazioni ASP.NET possono utilizzare lo stesso database utente specificando lo stesso <xref:System.Web.Security.Membership.ApplicationName%2A>. Il <xref:System.Web.Security.Membership.ApplicationName%2A> può essere impostata a livello di programmazione o in modo dichiarativo nella configurazione per l'applicazione Web.  
  
> [!CAUTION]
>  Poiché un'istanza del provider di appartenenze predefinito singolo viene utilizzata per tutte le richieste gestite da un <xref:System.Web.HttpApplication> oggetto, è possibile disporre di più richieste contemporaneamente e si tenta di impostare il <xref:System.Web.Security.Membership.ApplicationName%2A> valore della proprietà. Il <xref:System.Web.Security.Membership.ApplicationName%2A> proprietà non è thread-safe per più operazioni di scrittura e la modifica di <xref:System.Web.Security.Membership.ApplicationName%2A> valore della proprietà può causare un comportamento imprevisto per più utenti di un'applicazione. Si consiglia di evitare di scrivere codice che consente agli utenti di impostare il <xref:System.Web.Security.Membership.ApplicationName%2A> proprietà, a meno che non è necessario. Un esempio di un'applicazione in cui l'impostazione di <xref:System.Web.Security.Membership.ApplicationName%2A> proprietà potrebbe essere necessario un'applicazione amministrativa che gestisce i dati di appartenenza per più applicazioni. Questo tipo di applicazione deve essere un utente singolo e non è un'applicazione Web.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento nel `system.web` sezione del file Web. config per un'applicazione ASP.NET. Specifica che l'applicazione utilizza un <xref:System.Web.Security.SqlMembershipProvider> istanza e imposta il <xref:System.Web.Security.Membership.ApplicationName%2A> a `MyApplication`.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un nuovo utente all'archivio dati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nome utente per il nuovo utente.</param>
        <param name="password">Password per il nuovo utente.</param>
        <summary>Aggiunge un nuovo utente all'archivio dati.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> per l'utente appena creato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Aggiunge un nuovo utente nell'archivio dati e restituisce un <xref:System.Web.Security.MembershipUser> oggetto per l'utente appena creato. Se la creazione dell'utente non riesce, un <xref:System.Web.Security.MembershipCreateUserException> viene generata un'eccezione. È possibile recuperare un <xref:System.Web.Security.MembershipCreateStatus> valore il <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> proprietà del <xref:System.Web.Security.MembershipCreateUserException> che indica perché la creazione dell'utente non è riuscita.  
  
 Una volta che un utente di appartenenza è stato creato e si dispone di un riferimento a un <xref:System.Web.Security.MembershipUser> dell'oggetto per l'utente, è possibile modificare le impostazioni per l'utente con il <xref:System.Web.Security.MembershipUser> metodi pubblici, ad esempio <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> per le applicazioni in cui <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> è `true`, o impostando i valori delle proprietà di <xref:System.Web.Security.MembershipUser> oggetto e passandoli al <xref:System.Web.Security.Membership.UpdateUser%2A> metodo.  
  
 Se un utente esiste già nell'origine dati per l'applicazione, è possibile ottenere un <xref:System.Web.Security.MembershipUser> oggetto per l'utente esistente con il <xref:System.Web.Security.Membership.GetUser%2A> metodo.  
  
 Il <xref:System.Web.Security.SqlMembershipProvider> offre un'opzione che richiede un indirizzo di posta elettronica univoco per ogni utente. Se il <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> proprietà `true`, sarà necessario utilizzare uno del <xref:System.Web.Security.Membership.CreateUser%2A> overload che consente di specificare un indirizzo di posta elettronica per l'utente da creare. In caso contrario, un <xref:System.Web.Security.MembershipCreateUserException> verrà generata.  
  
 Spazi iniziali e finali vengono rimossi da tutti i valori di parametro.  
  
   
  
## Examples  
 Esempio di codice seguente crea un nuovo utente per un'applicazione ASP.NET configurata per utilizzare l'autenticazione basata su form e le appartenenze di ASP.NET. Se l'utente non è stato creato correttamente, viene visualizzato un messaggio all'utente. In caso contrario, l'utente viene reindirizzato alla pagina di accesso per l'applicazione.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Membership#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">L'utente non è stato creato. Verificare nella proprietà <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> la presenza di un valore <see cref="T:System.Web.Security.MembershipCreateStatus" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nome utente per il nuovo utente.</param>
        <param name="password">Password per il nuovo utente.</param>
        <param name="email">Indirizzo di posta elettronica del nuovo utente.</param>
        <summary>Aggiunge all'archivio dati un nuovo utente con l'indirizzo di posta elettronica specificato.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> per l'utente appena creato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Aggiunge un nuovo utente nell'archivio dati e restituisce un <xref:System.Web.Security.MembershipUser> oggetto per l'utente appena creato. Se la creazione dell'utente non riesce, un <xref:System.Web.Security.MembershipCreateUserException> viene generata un'eccezione. È possibile recuperare un <xref:System.Web.Security.MembershipCreateStatus> valore il <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> proprietà del <xref:System.Web.Security.MembershipCreateUserException> che indica perché la creazione dell'utente non è riuscita.  
  
 Una volta che un utente di appartenenza è stato creato e si dispone di un riferimento a un <xref:System.Web.Security.MembershipUser> dell'oggetto per l'utente, è possibile modificare le impostazioni per l'utente con il <xref:System.Web.Security.MembershipUser> metodi pubblici, ad esempio <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> per le applicazioni in cui <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> è `true`, o impostando i valori delle proprietà di <xref:System.Web.Security.MembershipUser> oggetto e passandoli al <xref:System.Web.Security.Membership.UpdateUser%2A> metodo.  
  
 Se un utente esiste già nell'origine dati per l'applicazione, è possibile ottenere un <xref:System.Web.Security.MembershipUser> oggetto per l'utente esistente con il <xref:System.Web.Security.Membership.GetUser%2A> metodo.  
  
 Spazi iniziali e finali vengono rimossi da tutti i valori di parametro.  
  
   
  
## Examples  
 Esempio di codice seguente crea un nuovo utente per un'applicazione ASP.NET configurata per utilizzare l'autenticazione basata su form e le appartenenze di ASP.NET. Se l'utente non è stato creato correttamente, viene visualizzato un messaggio all'utente. In caso contrario, l'utente viene reindirizzato alla pagina di accesso per l'applicazione.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser1cs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Membership#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">L'utente non è stato creato. Verificare nella proprietà <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> la presenza di un valore <see cref="T:System.Web.Security.MembershipCreateStatus" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">Nome utente per il nuovo utente.</param>
        <param name="password">Password per il nuovo utente.</param>
        <param name="email">Indirizzo di posta elettronica del nuovo utente.</param>
        <param name="passwordQuestion">Domanda per la password dell'utente di appartenenza.</param>
        <param name="passwordAnswer">Risposta per la password dell'utente di appartenenza.</param>
        <param name="isApproved">Parametro booleano che stabilisce se il nuovo utente è autorizzato ad accedere al sistema.</param>
        <param name="status">Oggetto <see cref="T:System.Web.Security.MembershipCreateStatus" /> che indica se l'utente è stato creato correttamente o, in caso contrario, il motivo per cui la creazione ha avuto esito negativo.</param>
        <summary>Aggiunge all'archivio dati un nuovo utente con valori di proprietà specifici e restituisce un parametro di stato che indica se l'utente è stato creato correttamente. In caso contrario, riporta il motivo per cui la creazione dell'utente non è riuscita.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> per l'utente appena creato. Se non è stato creato alcun utente, il metodo restituisce il valore <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Aggiunge un nuovo utente nell'archivio dati e restituisce un <xref:System.Web.Security.MembershipUser> oggetto per l'utente appena creato. Se la creazione dell'utente non riesce, è possibile recuperare un <xref:System.Web.Security.MembershipCreateStatus> valore il `status` parametro di output che indica perché non è riuscita la creazione dell'utente.  
  
 Il <xref:System.Web.Security.Membership.CreateUser%2A> metodo restituirà `null` se `password` è una stringa vuota o `null`, `username` è una stringa vuota o `null` o contiene una virgola (,), `passwordQuestion` non `null` ed è una stringa vuota, o `passwordAnswer` non `null` e contiene una stringa vuota.  
  
 Dopo che un utente di appartenenza è stato creato e si dispone di un riferimento a un <xref:System.Web.Security.MembershipUser> dell'oggetto per l'utente, è possibile modificare le impostazioni per l'utente con il <xref:System.Web.Security.MembershipUser> metodi pubblici e impostando i valori delle proprietà di <xref:System.Web.Security.MembershipUser> oggetto e quindi passare il <xref:System.Web.Security.MembershipUser> dell'oggetto per il <xref:System.Web.Security.Membership.UpdateUser%2A> metodo.  
  
 Se un utente esiste già nell'origine dati per l'applicazione, è possibile ottenere un <xref:System.Web.Security.MembershipUser> oggetto per l'utente esistente con il <xref:System.Web.Security.Membership.GetUser%2A> metodo.  
  
 Spazi iniziali e finali vengono rimossi da tutti i valori di parametro di stringa.  
  
   
  
## Examples  
 Esempio di codice seguente crea un nuovo utente per un'applicazione ASP.NET configurata per utilizzare l'autenticazione basata su form e le appartenenze di ASP.NET. Se l'utente non è stato creato correttamente, viene visualizzato un messaggio all'utente. In caso contrario, l'utente viene reindirizzato alla pagina di accesso per l'applicazione.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, providerUserKey As Object, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, System::Object ^ providerUserKey, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">Nome utente per il nuovo utente.</param>
        <param name="password">Password per il nuovo utente.</param>
        <param name="email">Indirizzo di posta elettronica del nuovo utente.</param>
        <param name="passwordQuestion">Domanda per la password dell'utente di appartenenza.</param>
        <param name="passwordAnswer">Risposta per la password dell'utente di appartenenza.</param>
        <param name="isApproved">Parametro booleano che stabilisce se il nuovo utente è autorizzato ad accedere al sistema.</param>
        <param name="providerUserKey">Identificatore dell'utente da memorizzare nell'archivio dati di appartenenze.</param>
        <param name="status">Oggetto <see cref="T:System.Web.Security.MembershipCreateStatus" /> che indica se l'utente è stato creato correttamente o, in caso contrario, il motivo per cui la creazione ha avuto esito negativo.</param>
        <summary>Aggiunge all'archivio dati un nuovo utente con valori di proprietà specifici e un identificatore univoco, oltre a restituire un parametro di stato che indica se l'utente è stato creato correttamente. In caso contrario, riporta il motivo per cui la creazione dell'utente non è riuscita.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> per l'utente appena creato. Se non è stato creato alcun utente, il metodo restituisce il valore <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Aggiunge un nuovo utente nell'archivio dati e restituisce un <xref:System.Web.Security.MembershipUser> oggetto per l'utente appena creato. Se la creazione dell'utente non riesce, è possibile recuperare un <xref:System.Web.Security.MembershipCreateStatus> valore il `status` parametro di output che indica perché non è riuscita la creazione dell'utente. È possibile specificare un identificatore univoco per l'utente, ad esempio un valore di chiave primaria per un database, tramite il `providerUserKey` parametro.  
  
 Il <xref:System.Web.Security.Membership.CreateUser%2A> metodo restituirà `null` se `password` è una stringa vuota o `null`, `username` è una stringa vuota o `null` o contiene una virgola (,), `passwordQuestion` non `null` e contiene un oggetto vuoto stringa, o `passwordAnswer` non `null` e contiene una stringa vuota.  
  
 Dopo che un utente di appartenenza è stato creato e si dispone di un riferimento a un <xref:System.Web.Security.MembershipUser> dell'oggetto per l'utente, è possibile modificare le impostazioni per l'utente con il <xref:System.Web.Security.MembershipUser> metodi pubblici e impostando i valori delle proprietà di <xref:System.Web.Security.MembershipUser> oggetto e quindi passare il <xref:System.Web.Security.MembershipUser> dell'oggetto per il <xref:System.Web.Security.Membership.UpdateUser%2A> metodo.  
  
 Se un utente esiste già nell'origine dati per l'applicazione, è possibile ottenere un <xref:System.Web.Security.MembershipUser> oggetto per l'utente esistente con il <xref:System.Web.Security.Membership.GetUser%2A> metodo.  
  
 Spazi iniziali e finali vengono rimossi da tutti i valori di parametro di stringa.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Elimina un utente dal database.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nome dell'utente da eliminare.</param>
        <summary>Elimina dal database un utente insieme ai relativi dati.</summary>
        <returns>
          <see langword="true" /> se l'utente è stato eliminato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dati utente archiviati nel database per il <xref:System.Web.Security.Roles>, <xref:System.Web.HttpContext.Profile%2A>, o <xref:System.Web.UI.WebControls.WebParts.WebPart> personalizzazione viene eliminata anche quando si utilizza il <xref:System.Web.Security.SqlRoleProvider>, <xref:System.Web.Profile.SqlProfileProvider>, e <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> gli oggetti per l'archiviazione dei dati.  
  
   
  
## Examples  
 Esempio di codice seguente elimina l'utente attualmente connesso e i relativi dati.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/DeleteUsercs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Membership#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/DeleteUservb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> è una stringa vuota o contiene una virgola (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> è <see langword="null." /></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username, bool deleteAllRelatedData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username, bool deleteAllRelatedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String, deleteAllRelatedData As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username, bool deleteAllRelatedData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="deleteAllRelatedData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">Nome dell'utente da eliminare.</param>
        <param name="deleteAllRelatedData">
          <see langword="true" /> per eliminare i dati relativi all'utente dal database. <see langword="false" /> per lasciare i dati relativi all'utente nel database.</param>
        <summary>Elimina un utente dal database.</summary>
        <returns>
          <see langword="true" /> se l'utente è stato eliminato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli utenti eliminati dal database eliminati solo dall'applicazione configurata `applicationName`.  
  
 Se `deleteAllRelatedData` è `true`, i dati utente archiviati nel database per il <xref:System.Web.Security.Roles>, <xref:System.Web.HttpContext.Profile%2A>, o <xref:System.Web.UI.WebControls.WebParts.WebPart> personalizzazione viene eliminata anche quando si utilizza il <xref:System.Web.Security.SqlRoleProvider>, <xref:System.Web.Profile.SqlProfileProvider>, e <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> gli oggetti per archiviazione dei dati.  
  
   
  
## Examples  
 Esempio di codice seguente elimina l'utente attualmente connesso e i relativi dati.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/DeleteUsercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/DeleteUservb.aspx#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> è una stringa vuota o contiene una virgola (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordReset">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordReset" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordReset" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordReset { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il provider di appartenenze corrente è configurato in modo da consentire agli utenti di reimpostare le loro password.</summary>
        <value>
          <see langword="true" /> se il provider di appartenenze supporta la reimpostazione della password. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Password reset è la possibilità per l'appartenenza ASP.NET sostituire la password corrente per un nome utente con un nuovo oggetto, in modo casuale password generata quando un utente ha dimenticato la password o la password corrente non è più valida. Ciò è particolarmente utile quando il formato della password è impostato su <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, come gli utenti non possono recuperare i valori hash delle password.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento nel `system.web` sezione del file Web. config per un'applicazione ASP.NET. Specifica che l'applicazione utilizza un'istanza di <xref:System.Web.Security.SqlMembershipProvider> e consente la reimpostazione della password.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 Nell'esempio seguente verifica innanzitutto che <xref:System.Web.Security.Membership.EnablePasswordReset%2A> è `true`, reimpostare la password dell'utente e restituisce la nuova password generata automaticamente.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ResetPasswordcs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ResetPasswordvb.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordRetrieval">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordRetrieval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordRetrieval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordRetrieval As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordRetrieval { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il provider di appartenenze corrente è configurato in modo da consentire agli utenti di recuperare le loro password.</summary>
        <value>
          <see langword="true" /> se il provider di appartenenze supporta il recupero della password; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> è `false`, il provider di appartenenze sottostante può generare un <xref:System.Web.HttpException>.  
  
 I provider inclusi in .NET Framework supportano più formati di password per migliorare la protezione delle password. Se il formato della password è impostato su <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, gli utenti non saranno in grado di recuperare la password esistente dal database. Il <xref:System.Web.Security.MembershipPasswordFormat.Hashed> formato di password consente la codifica unidirezionale delle password. Le password sono "hash" e rispetto ai valori archiviati nel database per l'autenticazione. I valori "Hash" non possono essere decodificati per recuperare il valore della password originale. Per ulteriori informazioni, vedere <xref:System.Web.Security.MembershipPasswordFormat>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento nel `system.web` sezione del file Web. config per un'applicazione ASP.NET. Specifica che l'applicazione utilizza un'istanza di <xref:System.Web.Security.SqlMembershipProvider> e consente il recupero della password.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="false"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 Nell'esempio seguente verifica innanzitutto che <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> è `true`, quindi recuperare la password di un nome utente specificato e lo invia all'indirizzo di posta elettronica per l'utente specificato.  
  
> [!IMPORTANT]
>  Non è consigliabile restituire una password in testo non crittografato tramite posta elettronica per i siti che richiedono un elevato livello di sicurezza. Per i siti con sicurezza elevata, è consigliabile che venga restituito password mediante crittografia, ad esempio SSL.  
>   
>  In questo esempio include una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByEmail">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene una raccolta degli utenti di appartenenza in cui l'indirizzo di posta elettronica contiene l'indirizzo specificato di cui verificare la corrispondenza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">Indirizzo di posta elettronica da cercare.</param>
        <summary>Ottiene una raccolta degli utenti di appartenenza in cui l'indirizzo di posta elettronica contiene l'indirizzo specificato di cui verificare la corrispondenza.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUserCollection" /> contenente tutti gli utenti il cui indirizzo di posta elettronica corrisponde a quello indicato nel parametro <paramref name="emailToMatch" />.  
  
 Gli spazi iniziali e finali sono rimossi dal valore del parametro <paramref name="emailToMatch" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> Restituisce un elenco degli utenti di appartenenza in cui l'indirizzo di posta elettronica corrisponde al nome `emailToMatch` per l'applicazione configurata `applicationName`.  
  
 Il <xref:System.Web.Security.SqlMembershipProvider> esegue la ricerca utilizzando una clausola LIKE contro il `emailToMatch` parametro. Tutti i caratteri jolly supportati da SQL Server in, ad esempio possibile utilizzare le clausole nel `emailToMatch` valore del parametro.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.Security.Membership.FindUsersByEmail%2A> metodo per recuperare le informazioni utente di appartenenza dal database di appartenenza in base all'input utente e visualizza i risultati in pagine di dati.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByEmailcs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Membership#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByEmailvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">Indirizzo di posta elettronica da cercare.</param>
        <param name="pageIndex">Indice della pagina di risultati da restituire. <c>pageIndex</c> è in base zero.</param>
        <param name="pageSize">Dimensioni della pagina di risultati da restituire.</param>
        <param name="totalRecords">Numero totale di utenti individuati.</param>
        <summary>Ottiene in una pagina di dati una raccolta di utenti di appartenenza i cui indirizzi di posta elettronica contengono l'indirizzo di posta elettronica specificato per cui verificare la corrispondenza.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUserCollection" /> contenente una pagina di oggetti <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> con inizio alla pagina specificata da <paramref name="pageIndex" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> Restituisce un elenco degli utenti di appartenenza in cui l'indirizzo di posta elettronica corrisponde al nome `emailToMatch` per l'applicazione configurata `applicationName`.  
  
 Il <xref:System.Web.Security.SqlMembershipProvider> esegue la ricerca utilizzando una clausola LIKE contro il `emailToMatch` parametro. Tutti i caratteri jolly supportati da SQL Server in, ad esempio possibile utilizzare le clausole nel `emailToMatch` valore del parametro.  
  
 I risultati restituiti da <xref:System.Web.Security.Membership.FindUsersByEmail%2A> sono limitati dal `pageIndex` e `pageSize` parametri. Il `pageSize` parametro identifica il numero massimo di <xref:System.Web.Security.MembershipUser> oggetti per restituire il <xref:System.Web.Security.MembershipUserCollection>. Il `pageIndex` parametro identifica la pagina di risultati da restituire, dove 0 indica la prima pagina. Il `totalRecords` parametro è un `out` parametro che il numero totale di utenti di appartenenza corrispondente viene impostato il `emailToMatch` valore. Ad esempio, se sono stati rilevati 13 utenti il cui `emailToMatch` corrispondano parte o l'indirizzo di posta elettronica intero e `pageIndex` 1 e un `pageSize` pari a 5, il <xref:System.Web.Security.MembershipUserCollection> restituito conterrebbe dal sesto al decimo utente restituito. `totalRecords` potrebbe essere impostato su 13.  
  
 Gli spazi iniziali e finali sono rimossi dal valore del parametro `emailToMatch`.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.Security.Membership.FindUsersByEmail%2A> metodo per recuperare le informazioni utente di appartenenza dal database di appartenenza in base all'input utente e visualizza i risultati in pagine di dati.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByEmailcs.aspx#13)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByEmailvb.aspx#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> è minore di zero.  
  
 oppure  
  
 <paramref name="pageSize" /> è minore di 1.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByName">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene una raccolta degli utenti di appartenenza in cui il nome utente contiene il nome specificato di cui verificare la corrispondenza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">Nome utente da cercare.</param>
        <summary>Ottiene una raccolta degli utenti di appartenenza in cui il nome utente contiene il nome specificato di cui verificare la corrispondenza.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUserCollection" /> contenente tutti gli utenti il cui indirizzo di posta elettronica corrisponde a quello indicato nel parametro <paramref name="usernameToMatch" />.  
  
 Gli spazi iniziali e finali sono rimossi dal valore del parametro <paramref name="usernameToMatch" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> Restituisce un elenco degli utenti di appartenenza in cui il nome utente corrisponde al nome `usernameToMatch` per l'applicazione configurata `applicationName`.  
  
 Il <xref:System.Web.Security.SqlMembershipProvider> esegue la ricerca utilizzando una clausola LIKE contro il `usernameToMatch` parametro. Tutti i caratteri jolly supportati da SQL Server in, ad esempio possibile utilizzare le clausole nel `usernameToMatch` valore del parametro.  
  
 Spazi iniziali e finali vengono rimossi da tutti i valori di parametro.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.Security.Membership.FindUsersByName%2A> metodo per recuperare le informazioni utente di appartenenza dal database di appartenenza in base all'input utente e visualizza i risultati in pagine di dati.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByNamecs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Membership#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByNamevb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="usernameToMatch" /> è una stringa vuota.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">Nome utente da cercare.</param>
        <param name="pageIndex">Indice della pagina di risultati da restituire. <c>pageIndex</c> è in base zero.</param>
        <param name="pageSize">Dimensioni della pagina di risultati da restituire.</param>
        <param name="totalRecords">Numero totale di utenti individuati.</param>
        <summary>Ottiene e visualizza in una pagina di dati un insieme degli utenti di appartenenza in cui il nome utente contiene il nome utente specificato di cui verificare la corrispondenza.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUserCollection" /> contenente una pagina di oggetti <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> con inizio alla pagina specificata da <paramref name="pageIndex" />.  
  
 Gli spazi iniziali e finali sono rimossi dal valore del parametro <paramref name="usernameToMatch" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> Restituisce un elenco degli utenti di appartenenza in cui il nome utente corrisponde al nome `usernameToMatch` per l'applicazione configurata `applicationName`.  
  
 Il <xref:System.Web.Security.SqlMembershipProvider> esegue la ricerca utilizzando una clausola LIKE contro il `usernameToMatch` parametro. Tutti i caratteri jolly supportati da SQL Server in, ad esempio possibile utilizzare le clausole nel `usernameToMatch` valore del parametro.  
  
 I risultati restituiti da <xref:System.Web.Security.Membership.FindUsersByName%2A> sono limitati dal `pageIndex` e `pageSize` parametri. Il `pageSize` parametro identifica il numero massimo di <xref:System.Web.Security.MembershipUser> oggetti per restituire il <xref:System.Web.Security.MembershipUserCollection>. Il `pageIndex` parametro identifica la pagina di risultati da restituire, dove 0 indica la prima pagina. Il `totalRecords` parametro è un `out` parametro che il numero totale di utenti di appartenenza corrispondente viene impostato il `usernameToMatch` valore. Ad esempio, se sono stati rilevati 13 utenti il cui `usernameToMatch` corrispondano parte o il nome utente e `pageIndex` 1 e un `pageSize` pari a 5, il <xref:System.Web.Security.MembershipUserCollection> restituito conterrebbe dal sesto al decimo utente restituito. `totalRecords` potrebbe essere impostato su 13.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.Security.Membership.FindUsersByName%2A> metodo per recuperare le informazioni utente di appartenenza dal database di appartenenza in base all'input utente e visualizza i risultati in pagine di dati.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByNamecs.aspx#12)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByNamevb.aspx#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="usernameToMatch" /> è una stringa vuota.  
  
 oppure  
  
 <paramref name="pageIndex" /> è minore di zero.  
  
 oppure  
  
 <paramref name="pageSize" /> è minore di 1.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GeneratePassword">
      <MemberSignature Language="C#" Value="public static string GeneratePassword (int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GeneratePassword(int32 length, int32 numberOfNonAlphanumericCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GeneratePassword(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GeneratePassword (length As Integer, numberOfNonAlphanumericCharacters As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GeneratePassword(int length, int numberOfNonAlphanumericCharacters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="numberOfNonAlphanumericCharacters" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">Numero di caratteri della password generata. La lunghezza deve essere compresa fra 1 e 128 caratteri.</param>
        <param name="numberOfNonAlphanumericCharacters">Numero minimo di caratteri non alfanumerici (ad esempio @, #, !, %, &amp;e così via) nella password generata.</param>
        <summary>Genera una password casuale con la lunghezza specificata.</summary>
        <returns>Password casuale avente la lunghezza specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.GeneratePassword%2A> metodo viene utilizzato per generare una password casuale e viene in genere utilizzato per il <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> metodo implementato da un provider di appartenenze per reimpostare la password per un utente su una nuova password temporanea.  
  
 La password generata contiene solo caratteri alfanumerici e i seguenti segni di punteggiatura: `!@#$%^&*()_-+=[{]};:<>|./?`. Nessun carattere di controllo nascosto o non stampabili sono inclusi nella password generata.  
  
> [!NOTE]
>  La password casuale creata dal <xref:System.Web.Security.Membership.GeneratePassword%2A> (metodo) non è garantito da passare all'espressione regolare di <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> proprietà. Tuttavia, la password casuale soddisferà i criteri stabiliti dal <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> proprietà e `numberOfNonAlphanumericCharacters` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente crea un nuovo utente di appartenenza e utilizza il <xref:System.Web.Security.Membership.GeneratePassword%2A> metodo per inizializzare la password per il nuovo utente su un valore casuale, che viene visualizzato all'utente.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/GeneratePasswordcs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Membership#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/GeneratePasswordvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="length" /> è minore di 1 o maggiore di 128 -oppure-  
  
 <paramref name="numberOfNonAlphanumericCharacters" /> è minore di 0 o maggiore di <paramref name="length" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllUsers">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un insieme degli utenti nel database.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers () As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene un insieme di tutti gli utenti nel database.</summary>
        <returns>Insieme <see cref="T:System.Web.Security.MembershipUserCollection" /> di oggetti <see cref="T:System.Web.Security.MembershipUser" /> che rappresentano tutti gli utenti presenti nel database.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetAllUsers%2A> Restituisce le informazioni per tutti gli utenti di appartenenza per un'applicazione come una raccolta di <xref:System.Web.Security.MembershipUser> oggetti. Prestare attenzione quando si utilizza il <xref:System.Web.Security.Membership.GetAllUsers%2A> metodo con i database utente di grandi dimensioni, il valore risultante <xref:System.Web.Security.MembershipUserCollection> ASP.NET pagina può peggiorare le prestazioni dell'applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente restituisce un elenco di utenti con un conteggio del numero di utenti attualmente online.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers (int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers(int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers (pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers(int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pageIndex">Indice della pagina di risultati da restituire. Utilizzare 0 per indicare la prima pagina.</param>
        <param name="pageSize">Dimensioni della pagina di risultati da restituire. <c>pageIndex</c> è in base zero.</param>
        <param name="totalRecords">Numero totale di utenti.</param>
        <summary>Ottiene e restituisce in pagine di dati un insieme di tutti gli utenti nel database.</summary>
        <returns>Insieme <see cref="T:System.Web.Security.MembershipUserCollection" /> di oggetti <see cref="T:System.Web.Security.MembershipUser" /> che rappresentano tutti gli utenti presenti nel database dell'applicazione configurata <see langword="applicationName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I risultati restituiti da <xref:System.Web.Security.Membership.GetAllUsers%2A> sono limitati dal `pageIndex` e `pageSize` parametri. Il `pageSize` parametro identifica il numero massimo di <xref:System.Web.Security.MembershipUser> oggetti per restituire il <xref:System.Web.Security.MembershipUserCollection>. Il `pageIndex` parametro identifica la pagina di risultati da restituire, dove 0 indica la prima pagina. Il `totalRecords` parametro è un `out` parametro impostato sul numero totale degli utenti di appartenenza per l'applicazione configurata `applicationName`. Ad esempio, se sono presenti 13 utenti per l'applicazione configurata `applicationName`e `pageIndex` 1 e un `pageSize` pari a 5, il <xref:System.Web.Security.MembershipUserCollection> restituito conterrebbe dal sesto al decimo utente restituito. `totalRecords` potrebbe essere impostato su 13.  
  
   
  
## Examples  
 Esempio di codice seguente restituisce un elenco di utenti nelle pagine di dati con un conteggio del numero di utenti attualmente online.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> è minore di zero.  
  
 oppure  
  
 <paramref name="pageSize" /> è minore di 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfUsersOnline">
      <MemberSignature Language="C#" Value="public static int GetNumberOfUsersOnline ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNumberOfUsersOnline() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetNumberOfUsersOnline" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumberOfUsersOnline () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetNumberOfUsersOnline();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene il numero corrente di utenti connessi a un'applicazione.</summary>
        <returns>Numero corrente di utenti connessi a un'applicazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.GetNumberOfUsersOnline%2A> Restituisce il numero di utenti per l'oggetto corrente <xref:System.Web.Security.Membership.ApplicationName%2A> in cui la data dell'ultima attività è maggiore rispetto all'ora corrente meno il <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A>. Indicatore data e ora ultima attività viene aggiornato per la data e ora correnti quando le credenziali utente vengono convalidate tramite il <xref:System.Web.Security.Membership.ValidateUser%2A> o <xref:System.Web.Security.Membership.UpdateUser%2A> (metodo) o quando una chiamata a un <xref:System.Web.Security.Membership.GetUser%2A> overload che accetta senza parametri o con uno che utilizza il `userIsOnline`parametro per specificare che l'indicatore di data/ora deve essere aggiornato.  
  
   
  
## Examples  
 Esempio di codice seguente restituisce un elenco di utenti con un conteggio del numero di utenti attualmente online.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene le informazioni di un utente di appartenenza dall'origine dati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser () As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene le informazioni dall'origine dati e aggiorna l'indicatore di ultima data e ora di attività dell'utente di appartenenza correntemente connesso al sistema.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> che rappresenta l'utente correntemente connesso al sistema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser> Recupera le informazioni utente dall'origine dati e crea un <xref:System.Web.Security.MembershipUser> oggetto popolato con i dati restituiti. Se si utilizza uno del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `username` parametro <xref:System.Web.Security.Membership.GetUser%2A> restituisce le informazioni per l'utente connesso appartenenza corrente. L'utente connesso appartenenza corrente è identificato dal <xref:System.Security.Principal.IIdentity.Name%2A> dell'utente nell'oggetto <xref:System.Web.HttpContext>.  
  
 È inoltre possibile specificare se si desidera <xref:System.Web.Security.Membership.GetUser%2A> per aggiornare l'ultima attività indicatore data e ora per l'utente da recuperare mediante il `userIsOnline` parametro. Del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `userIsOnline` parametro `GetUser()` in modo implicito indicatore data e ora ultima attività aggiornamenti per l'utente. `GetUser(System.String)` e `GetUser(System.Object)` non.  
  
   
  
## Examples  
 Gli aggiornamenti di esempio di codice seguente l'ultima attività indicatore di data/ora per l'utente connesso appartenenza corrente e visualizza il nome utente nella pagina ASP.NET.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default1cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Membership#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default1vb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nessun utente di appartenenza è attualmente connesso.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(bool userIsOnline);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userIsOnline">Se <see langword="true" />, aggiorna l'indicatore di ultima data e ora di attività dell'utente specificato.</param>
        <summary>Ottiene dall'origine dati le informazioni dell'utente di appartenenza correntemente connesso al sistema. Se specificato, aggiorna l'indicatore di ultima data e ora di attività dell'utente di appartenenza correntemente connesso al sistema.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> che rappresenta l'utente correntemente connesso al sistema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.GetUser%2A> metodo recupera le informazioni utente dall'origine dati e crea un <xref:System.Web.Security.MembershipUser> oggetto popolato con i dati restituiti. Se si utilizza uno del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `username` parametro <xref:System.Web.Security.Membership.GetUser%2A> restituisce le informazioni per l'utente connesso appartenenza corrente. L'utente connesso appartenenza corrente è identificato dal <xref:System.Security.Principal.IIdentity.Name%2A> dell'utente nell'oggetto <xref:System.Web.HttpContext>.  
  
 È inoltre possibile specificare se si desidera <xref:System.Web.Security.Membership.GetUser%2A> per aggiornare l'ultima attività indicatore data e ora per l'utente da recuperare mediante il `userIsOnline` parametro. Del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `userIsOnline` parametro `GetUser()` in modo implicito indicatore data e ora ultima attività aggiornamenti per l'utente. `GetUser(System.String)` e `GetUser(System.Object)` non.  
  
   
  
## Examples  
 Verrà visualizzato il seguente codice esempio il nome utente per l'utente connesso appartenenza corrente in una pagina ASP.NET senza aggiornare la data e ora dell'utente.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default2cs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Membership#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default2vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nessun utente di appartenenza è attualmente connesso.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">Identificatore univoco dell'utente, ottenuto dall'origine dati di appartenenze dell'utente.</param>
        <summary>Ottiene dall'origine dati le informazioni dell'utente di appartenenza associato all'identificatore univoco specificato.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> che rappresenta l'utente associato all'identificatore univoco specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.GetUser%2A> metodo recupera le informazioni utente dall'origine dati e crea un <xref:System.Web.Security.MembershipUser> oggetto popolato con i dati restituiti. L'utente viene identificato con l'identificatore univoco dell'origine dati specificata tramite il `providerUserKey` parametro.  
  
 È inoltre possibile specificare se si desidera <xref:System.Web.Security.Membership.GetUser%2A> per aggiornare l'ultima attività indicatore data e ora per l'utente da recuperare mediante il `userIsOnline` parametro. Del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `userIsOnline` parametro `GetUser()` in modo implicito indicatore data e ora ultima attività aggiornamenti per l'utente. `GetUser(System.String)` e `GetUser(System.Object)` non  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nome dell'utente da recuperare.</param>
        <summary>Ottiene dall'origine dati le informazioni dell'utente di appartenenza specificato.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> che rappresenta l'utente specificato. Se il parametro <paramref name="username" /> non corrisponde a un utente esistente, questo metodo restituisce <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.GetUser%2A> metodo recupera le informazioni utente dall'origine dati e crea un <xref:System.Web.Security.MembershipUser> oggetto popolato con i dati restituiti. Se si utilizza uno del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `username` parametro <xref:System.Web.Security.Membership.GetUser%2A> restituisce le informazioni per l'utente connesso appartenenza corrente. L'utente connesso appartenenza corrente è identificato dal <xref:System.Security.Principal.IIdentity.Name%2A> dell'utente nell'oggetto <xref:System.Web.HttpContext>.  
  
 È inoltre possibile specificare se si desidera <xref:System.Web.Security.Membership.GetUser%2A> per aggiornare l'ultima attività indicatore data e ora per l'utente da recuperare mediante il `userIsOnline` parametro. Del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `userIsOnline` parametro <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> in modo implicito indicatore data e ora ultima attività aggiornamenti per l'utente. <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> e <xref:System.Web.Security.Membership.GetUser%2A> non.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.Security.Membership.GetUser%2A> per restituire un <xref:System.Web.Security.MembershipUser> oggetto per l'utente corrente connesso e gli aggiornamenti all'indirizzo e-mail per l'utente.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contiene una virgola (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey, bool userIsOnline);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">Identificatore univoco dell'utente, ottenuto dall'origine dati di appartenenze dell'utente.</param>
        <param name="userIsOnline">Se <see langword="true" />, aggiorna l'indicatore di ultima data e ora di attività dell'utente specificato.</param>
        <summary>Ottiene dall'origine dati le informazioni dell'utente di appartenenza associato all'identificatore univoco specificato. Se specificato, aggiorna l'indicatore di ultima data e ora di attività dell'utente.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> che rappresenta l'utente associato all'identificatore univoco specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.GetUser%2A> metodo recupera le informazioni utente dall'origine dati e crea un <xref:System.Web.Security.MembershipUser> oggetto popolato con i dati restituiti. L'utente viene identificato con l'identificatore univoco dall'origine dati specificata nel `providerUserKey` parametro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username, bool userIsOnline);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">Nome dell'utente da recuperare.</param>
        <param name="userIsOnline">Se <see langword="true" />, aggiorna l'indicatore di ultima data e ora di attività dell'utente specificato.</param>
        <summary>Ottiene dall'origine dati le informazioni dell'utente di appartenenza specificato. Se specificato, aggiorna l'indicatore di ultima data e ora di attività dell'utente.</summary>
        <returns>Oggetto <see cref="T:System.Web.Security.MembershipUser" /> che rappresenta l'utente specificato. Se il parametro <paramref name="username" /> non corrisponde a un utente esistente, questo metodo restituisce <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.GetUser%2A> metodo recupera le informazioni utente dall'origine dati e crea un <xref:System.Web.Security.MembershipUser> oggetto popolato con i dati restituiti.  
  
 Se si utilizza uno del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `username` parametro <xref:System.Web.Security.Membership.GetUser%2A> restituisce le informazioni per l'utente connesso appartenenza corrente. L'utente connesso appartenenza corrente è identificato dal <xref:System.Security.Principal.IIdentity.Name%2A> dell'utente nell'oggetto <xref:System.Web.HttpContext>.  
  
 È inoltre possibile specificare se si desidera <xref:System.Web.Security.Membership.GetUser%2A> per aggiornare l'ultima attività indicatore data e ora per l'utente da recuperare mediante il `userIsOnline` parametro. Del <xref:System.Web.Security.Membership.GetUser%2A> overload che accettano un `userIsOnline` parametro <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> in modo implicito indicatore data e ora ultima attività aggiornamenti per l'utente. <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> e <xref:System.Web.Security.Membership.GetUser%2A> non.  
  
   
  
## Examples  
 Esempio di codice seguente consente di recuperare la password per un nome utente specificato e lo invia all'indirizzo di posta elettronica per l'utente specificato. La chiamata a <xref:System.Web.Security.Membership.GetUser%2A> specifica che l'ultima attività indicatore di data/ora per l'utente non deve essere aggiornato.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contiene una virgola (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUserNameByEmail">
      <MemberSignature Language="C#" Value="public static string GetUserNameByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetUserNameByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUserNameByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUserNameByEmail (emailToMatch As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetUserNameByEmail(System::String ^ emailToMatch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">Indirizzo di posta elettronica da cercare.</param>
        <summary>Ottiene il nome di un utente il cui indirizzo di posta elettronica corrisponde all'indirizzo di posta elettronica specificato.</summary>
        <returns>Nome di un utente il cui indirizzo di posta elettronica corrisponde all'indirizzo di posta elettronica specificato. Se la ricerca ha esito negativo, viene restituito il valore <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUserNameByEmail%2A> può essere utilizzato per recuperare il nome utente per un utente di appartenenza nel caso in cui un utente non conosce il nome utente, ma conosca il proprio indirizzo di posta elettronica. Se più di un utente nell'archivio dati ha lo stesso indirizzo di posta elettronica, viene restituito il primo nome utente rilevato.  
  
 Spazi iniziali e finali vengono rimossi da tutti i valori di parametro.  
  
   
  
## Examples  
 Esempio di codice seguente recupera il nome utente per un indirizzo di posta elettronica specificato.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/GetUserByEmailcs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/GetUserByEmailvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithmType">
      <MemberSignature Language="C#" Value="public static string HashAlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string HashAlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.HashAlgorithmType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HashAlgorithmType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ HashAlgorithmType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identificatore dell'algoritmo utilizzato per la codifica hash delle password.</summary>
        <value>Identificatore dell'algoritmo utilizzato per la codifica hash delle password o un valore vuoto per utilizzare l'algoritmo hash predefinito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.HashAlgorithmType%2A> proprietà identifica l'algoritmo hash personalizzato utilizzato dalla <xref:System.Web.Security.Membership> classe. Impostare il <xref:System.Web.Security.Membership.HashAlgorithmType%2A> proprietà utilizzando il `hashAlgorithmType` attributo dell'elemento.  
  
 .NET Framework consente di configurare le classi di crittografia personalizzato utilizzando la sezione di configurazione elemento. Il <xref:System.Web.Security.Membership.HashAlgorithmType%2A> proprietà deve corrispondere il `name` attributo dell'elemento in un elemento. Per ulteriori informazioni, vedere [Mapping di nomi di algoritmi a classi di crittografia](~/docs/framework/configure-apps/map-algorithm-names-to-cryptography-classes.md).  
  
 Se il <xref:System.Web.Security.Membership.HashAlgorithmType%2A> non è impostata, il <xref:System.Web.Security.Membership> classe Usa l'algoritmo hash impostato nel `validation` attributo dell'elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxInvalidPasswordAttempts">
      <MemberSignature Language="C#" Value="public static int MaxInvalidPasswordAttempts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxInvalidPasswordAttempts" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxInvalidPasswordAttempts As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxInvalidPasswordAttempts { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero consentito di tentativi non validi di immissione della password o di risposta alla domanda segreta della password prima che l'utente di appartenenza venga bloccato.</summary>
        <value>Numero consentito di tentativi non validi di immissione della password o di risposta alla domanda segreta della password prima che l'utente di appartenenza venga bloccato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> proprietà viene utilizzata in combinazione con la <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> proprietà salvaguardarsi da un'origine non desiderati utilizzando ripetuti tentativi di indovinare la password o una risposta per la password di un utente di appartenenza.  
  
 Se il numero di password non valida o risposte password immessa per un utente di appartenenza è maggiore o uguale al valore del <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> proprietà entro il numero di minuti specificato mediante il <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> proprietà, quindi l'utente è bloccato per il sito Web da impostazione di <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> proprietà `true` fino a quando l'utente viene sbloccato mediante una chiamata al <xref:System.Web.Security.MembershipUser.UnlockUser%2A> metodo.  
  
 Se viene fornita una password valida o una risposta segreta prima della <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> proprietà viene raggiunto, il contatore che tiene traccia del numero di tentativi non validi è impostato su zero.  
  
 Tentativi di risposta per la password e password non valida vengono registrati separatamente. Ad esempio, se il <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> è impostata su 5, l'utente dispone di un massimo di 5 tentativi per immettere la password corretta e fino a cinque tentativi di immettere una risposta corretta senza essere bloccati.  
  
 Il <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> valore della proprietà è impostato nella configurazione dell'applicazione mediante il `maxInvalidPasswordAttempts` attributo dell'elemento di configurazione.  
  
 Se il <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> proprietà `false`, non vengono registrati i tentativi di immissione della risposta non valido.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento nel `system.web` sezione del file Web. config dell'applicazione. Specifica che l'applicazione utilizza un'istanza del <xref:System.Web.Security.SqlMembershipProvider> classe per fornire servizi di appartenenza e imposta il `maxInvalidPasswordAttempts` attributo a cinque tentativi non validi e `passwordAttemptWindow` a 30 minuti.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredNonAlphanumericCharacters">
      <MemberSignature Language="C#" Value="public static int MinRequiredNonAlphanumericCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredNonAlphanumericCharacters As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredNonAlphanumericCharacters { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero minimo di caratteri speciali che devono essere presenti in una password valida.</summary>
        <value>Numero minimo di caratteri speciali che devono essere presenti in una password valida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> proprietà restituisce il numero minimo di caratteri speciali e non alfanumerici che devono essere immessi per creare una password valida per il provider di appartenenze specificato nella <xref:System.Web.Security.Membership.Provider%2A> proprietà.  
  
 Il <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> valore della proprietà è impostato nella configurazione dell'applicazione mediante il `minRequiredNonAlphanumericCharacters` attributo dell'elemento di configurazione.  
  
 Un carattere non alfanumerico è un carattere per il quale il <xref:System.Char.IsLetterOrDigit%2A> restituisce `false`.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento di configurazione nel `system.web` sezione del file Web. config dell'applicazione. Specifica che l'applicazione utilizza un'istanza di <xref:System.Web.Security.SqlMembershipProvider> classe per fornire servizi di appartenenza e imposta il `minRequiredNonAlphanumericCharacters` attributo su 1 carattere.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredNonAlphanumericCharacters="1"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredPasswordLength">
      <MemberSignature Language="C#" Value="public static int MinRequiredPasswordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredPasswordLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredPasswordLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredPasswordLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la lunghezza minima richiesta per una password.</summary>
        <value>Lunghezza minima richiesta per una password.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> proprietà ottiene il numero minimo di caratteri che devono essere immessi per creare una password valida per il provider di appartenenze specificato nella <xref:System.Web.Security.Membership.Provider%2A> proprietà.  
  
 Il <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> valore della proprietà è impostato nella configurazione dell'applicazione mediante il `minRequiredPasswordLength` attributo dell'elemento di configurazione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento di configurazione nel `system.web` sezione del file Web. config dell'applicazione. Specifica che l'applicazione utilizza un'istanza di <xref:System.Web.Security.SqlMembershipProvider> classe per fornire servizi di appartenenza e imposta il `minRequiredPasswordLength` attributo sette caratteri.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredPasswordLength="7"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordAttemptWindow">
      <MemberSignature Language="C#" Value="public static int PasswordAttemptWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PasswordAttemptWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordAttemptWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int PasswordAttemptWindow { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'intervallo di tempo in cui vengono registrati i tentativi consecutivi non riusciti di fornire una password valida o una risposta per la password.</summary>
        <value>Intervallo di tempo in minuti in cui vengono registrati i tentativi consecutivi non riusciti di fornire una password valida o una risposta per la password. Il valore predefinito è 10 minuti. Se l'intervallo tra il tentativo corrente e l'ultimo tentativo non riusciti è maggiore dell'impostazione della proprietà <see cref="P:System.Web.Security.Membership.PasswordAttemptWindow" />, ogni tentativo non riuscito verrà considerato come il primo tentativo non riuscito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> proprietà viene utilizzata in combinazione con la <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> proprietà per impedire che un'origine indesiderata riesca a indovinare la password o una risposta per la password di un utente di appartenenza attraverso ripetuti tentativi. Quando un utente tenta di accedere, modificare o reimpostare la propria password, solo un determinato numero di tentativi consecutivi consentito all'interno di un intervallo di tempo specificato. La lunghezza di questa finestra ora viene specificata nel <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> proprietà, che identifica il numero di minuti consentiti tra tentativi non validi.  
  
 Se il numero di tentativi consecutivi non riusciti di reimpostazione della password è uguale al valore archiviato nel <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> , proprietà e il tempo trascorso dall'ultimo tentativo non valido è inferiore al numero di minuti specificato nella <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> proprietà, quindi l'utente di appartenenza viene bloccato. L'utente viene bloccato impostando il <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> proprietà `true` fino a quando l'utente viene sbloccato mediante una chiamata al <xref:System.Web.Security.MembershipUser.UnlockUser%2A> metodo.  
  
 Se l'intervallo tra il tentativo corrente e l'ultimo tentativo non riuscito è maggiore di <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> proprietà di impostazione, il tentativo non valido corrente viene conteggiata come prima. Se prima che venga raggiunto il numero massimo di tentativi non validi consentiti, viene fornita una risposta password valida, il numero di tentativi non validi di immissione della risposta è impostato su 0 (zero). Se viene fornita una password valida prima non valido consentiti il numero massimo di tentativi viene raggiunto il numero di tentativi di password non valida e il numero di tentativi di risposta per la password non validi vengono impostati su 0 (zero).  
  
 Tentativi di password e della risposta segreta non validi si accumulano indipendentemente uno da altro. Ad esempio, se il <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> è impostato su 5 e tre tentativi di password non valida vengono effettuati seguiti da due tentativi di immissione della risposta non valida, due tentativi di password non valida (o altri tre tentativi di immissione della risposta non valida) devono essere all'interno <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> per l'utente di appartenenza venga bloccato.  
  
 Il <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> valore della proprietà viene impostato nella configurazione dell'applicazione tramite il `passwordAttemptWindow` attributo della sezione dell'elemento di configurazione.  
  
 Se il <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> è impostata su `false`, non vengono registrati i tentativi di immissione della risposta non valido.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento nel `system.web` sezione del file Web. config per un'applicazione ASP.NET. Specifica che l'applicazione utilizza un'istanza del <xref:System.Web.Security.SqlMembershipProvider> e imposta il `maxInvalidPasswordAttempts` attributo a cinque tentativi non validi e `passwordAttemptWindow` a 30 minuti.  
  
```  
<membership defaultProvider="SqlProvider"   
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordStrengthRegularExpression">
      <MemberSignature Language="C#" Value="public static string PasswordStrengthRegularExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string PasswordStrengthRegularExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordStrengthRegularExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ PasswordStrengthRegularExpression { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'espressione regolare usata per valutare una password.</summary>
        <value>Espressione regolare usata per valutare una password.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> proprietà ottiene l'espressione regolare utilizzata per valutare la complessità delle password dal provider specificata nel <xref:System.Web.Security.Membership.Provider%2A> proprietà.  
  
 Il <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> proprietà è impostata nella configurazione dell'applicazione mediante il `passwordStrengthRegularExpression` attributo dell'elemento di configurazione.  
  
 Per ulteriori informazioni sulle espressioni regolari, vedere [espressioni regolari di .NET Framework](~/docs/standard/base-types/regular-expressions.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento di configurazione nel `system.web` sezione del file Web. config dell'applicazione. Specifica che l'applicazione utilizza un'istanza di <xref:System.Web.Security.SqlMembershipProvider> classe per fornire servizi di appartenenza e imposta il `passwordStrengthRegularExpression` attributo per un'espressione regolare che convalida la password soddisfa i criteri seguenti:  
  
-   È maggiore di sette caratteri.  
  
-   Contiene almeno una cifra.  
  
-   Contiene almeno un carattere speciale (non alfanumerico).  
  
 Se la password non soddisfa questi criteri, la password non viene accettata dal provider di appartenenze.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      passwordStrengthRegularExpression=" @\"(?=.{6,})(?=(.*\d){1,})(?=(.*\W){1,})"  
      />  
   </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As MembershipProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProvider ^ Provider { System::Web::Security::MembershipProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un riferimento al provider di appartenenze predefinito per l'applicazione.</summary>
        <value>Provider di appartenenze predefinito dell'applicazione esposto mediante la classe base astratta <see cref="T:System.Web.Security.MembershipProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.Provider%2A> proprietà consente di fare riferimento direttamente a provider di appartenenze predefinito per un'applicazione. Viene in genere utilizzato per accedere ai membri del provider di appartenenze personalizzati non sono in parte la <xref:System.Web.Security.MembershipProvider> classe base astratta.  
  
   
  
## Examples  
 Esempio di codice seguente consente di accedere il valore predefinito <xref:System.Web.Security.SqlMembershipProvider> abilitata per l'applicazione utilizzando il <xref:System.Web.Security.Membership.Provider%2A> proprietà per determinare il valore personalizzato <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> proprietà.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.Membership#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providervb.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As MembershipProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProviderCollection ^ Providers { System::Web::Security::MembershipProviderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme dei provider di appartenenze per l'applicazione ASP.NET.</summary>
        <value>Oggetto <see cref="T:System.Web.Security.MembershipProviderCollection" /> dei provider di appartenenze configurati per l'applicazione ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.Providers%2A> proprietà fa riferimento a tutti i provider di appartenenze abilitati per un'applicazione, compresi i provider aggiunti nel file Web. config per l'applicazione e nel file Machine. config per tutte le applicazioni. È possibile controllare i provider di appartenenze sono disponibili per un'applicazione mediante il `providers` elemento della sezione di configurazione dell'applicazione. Ad esempio, l'esempio seguente viene mostrata la sezione nel file Web. config per un'applicazione che rimuove il <xref:System.Web.Security.SqlMembershipProvider> istanza (`AspNetSqlProvider`) specificato nel file di configurazione del computer e aggiunge un <xref:System.Web.Security.SqlMembershipProvider> istanza denominata `SqlProvider` come il provider di appartenenze predefinito per l'applicazione.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
          <add name="SqlProvider"  
            type="System.Web.Security.SqlMembershipProvider"  
            connectionStringName="SqlServices"  
            enablePasswordRetrieval="false"  
            enablePasswordReset="true"  
            requiresQuestionAndAnswer="true"  
            passwordFormat="Hashed"  
            applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 Quando si specifica il [membership (Schema delle impostazioni ASP.NET) Element](http://msdn.microsoft.com/library/b9c1ee8f-33ca-4361-8666-b42a0fe86049) sezione, è necessario specificare il `defaultProvider` attributo. Se non si specifica un [membership (Schema delle impostazioni ASP.NET) Element](http://msdn.microsoft.com/library/b9c1ee8f-33ca-4361-8666-b42a0fe86049) sezione nel file Web. config, i valori della configurazione del computer vengono utilizzati e <xref:System.Web.Security.SqlMembershipProvider> istanza denominata `AspNetSqlProvider` è definito come il `defaultProvider`.  
  
 È possibile ottenere un riferimento fortemente tipizzato a un provider di <xref:System.Web.Security.Membership.Providers%2A> raccolta per l'indicizzazione in base al nome del provider di appartenenze e viene eseguito il cast al tipo desiderato.  
  
   
  
## Examples  
 Esempio di codice seguente elenca i provider abilitati per un'applicazione e i relativi tipi.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Membership#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresQuestionAndAnswer">
      <MemberSignature Language="C#" Value="public static bool RequiresQuestionAndAnswer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequiresQuestionAndAnswer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequiresQuestionAndAnswer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequiresQuestionAndAnswer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il provider di appartenenze predefinito richiede agli utenti di rispondere a una domanda per la password prima di consentire la reimpostazione e il recupero della password.</summary>
        <value>
          <see langword="true" /> se occorre fornire una risposta per la password prima di poter reimpostare o recuperare la password; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La richiesta di una password segreta offre un ulteriore livello di sicurezza durante il recupero o la reimpostazione delle password di un utente. Gli utenti possono fornire una domanda e risposta quando viene creato il proprio nome utente che può successivamente usare per recuperare o reimpostare una password dimenticata.  
  
 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> viene verificata quando <xref:System.Web.Security.MembershipUser.ResetPassword%2A> o <xref:System.Web.Security.MembershipUser.GetPassword%2A> viene chiamato. Il provider fornito con .NET Framework genera un <xref:System.NotSupportedException> se <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> è `true` e la risposta segreta fornita è `null`.  
  
 Se <xref:System.Web.Security.Membership.EnablePasswordReset%2A> e <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> sono entrambi `false`, <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> possono comunque essere utilizzati per applicare la creazione di domande e risposte quando vengono creati nuovi utenti; tuttavia, la domanda e la risposta non verrà utilizzati. Sarà possibile recuperare la domanda usando il <xref:System.Web.Security.MembershipUser> classe.  
  
 Per altre informazioni, vedere <xref:System.Web.Security.MembershipUser.ResetPassword%2A> e <xref:System.Web.Security.MembershipUser.GetPassword%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento nel `system.web` sezione del file Web. config per un'applicazione ASP.NET. Specifica che l'applicazione utilizza un'istanza di <xref:System.Web.Security.SqlMembershipProvider>, consente la reimpostazione della password e richiede una risposta segreta quando si esegue una reimpostazione.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 Esempio di codice seguente controlla il valore di <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> e aggiunge i controlli necessari per una domanda e una risposta da fornire durante la creazione di un utente.  
  
> [!IMPORTANT]
>  In questo esempio include una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUser">
      <MemberSignature Language="C#" Value="public static void UpdateUser (System.Web.Security.MembershipUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateUser(class System.Web.Security.MembershipUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.UpdateUser(System.Web.Security.MembershipUser)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UpdateUser (user As MembershipUser)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UpdateUser(System::Web::Security::MembershipUser ^ user);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.Web.Security.MembershipUser" />
      </Parameters>
      <Docs>
        <param name="user">Oggetto <see cref="T:System.Web.Security.MembershipUser" /> che rappresenta l'utente da aggiornare e le informazioni aggiornate relative a tale utente.</param>
        <summary>Aggiorna il database con le informazioni dell'utente specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.UpdateUser%2A> accetta come input, un <xref:System.Web.Security.MembershipUser> oggetto popolato con le informazioni correnti dell'utente di appartenenza e aggiorna l'origine dati con i valori delle proprietà di <xref:System.Web.Security.MembershipUser> oggetto. È possibile costruire un nuovo <xref:System.Web.Security.MembershipUser>, o recuperare un <xref:System.Web.Security.MembershipUser> oggetto popolato con i valori correnti nell'origine dati mediante il <xref:System.Web.Security.Membership.GetUser%2A>, <xref:System.Web.Security.Membership.GetAllUsers%2A>, <xref:System.Web.Security.Membership.FindUsersByName%2A>, o <xref:System.Web.Security.Membership.FindUsersByEmail%2A> metodi.  
  
   
  
## Examples  
 Nell'esempio seguente aggiorna l'indirizzo di posta elettronica per l'utente corrente connesso.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="user" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UserIsOnlineTimeWindow">
      <MemberSignature Language="C#" Value="public static int UserIsOnlineTimeWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 UserIsOnlineTimeWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserIsOnlineTimeWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int UserIsOnlineTimeWindow { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica il lasso di tempo in minuti a partire dall'indicatore di ultima data e ora di attività dell'utente durante il quale l'utente è considerato online.</summary>
        <value>Lasso di tempo in minuti a partire dall'indicatore di ultima data e ora di attività dell'utente durante il quale l'utente è considerato online.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> valore della proprietà è selezionato durante la chiamata a <xref:System.Web.Security.Membership.GetNumberOfUsersOnline%2A>. Se il <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> per un utente è maggiore di data e ora correnti meno il <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> valore in minuti, l'utente è considerato in linea. È possibile determinare se un utente di appartenenza è considerato in linea con il <xref:System.Web.Security.MembershipUser.IsOnline%2A> proprietà la <xref:System.Web.Security.MembershipUser> classe.  
  
 Il <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> per un utente viene aggiornato quando la convalida delle credenziali di un utente mediante correttamente il <xref:System.Web.Security.Membership.ValidateUser%2A> metodo. È inoltre possibile aggiornare il <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> per un utente di appartenenza quando si chiama uno del <xref:System.Web.Security.Membership.GetUser%2A> overload. Se si chiama un <xref:System.Web.Security.Membership.GetUser%2A> overload che accetta un `userIsOnline` parametro, specificare un valore di `true` per aggiornare il <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> per l'utente.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'elemento nel `system.web` sezione del file Web. config per un'applicazione ASP.NET. Specifica che l'applicazione utilizza un'istanza di <xref:System.Web.Security.SqlMembershipProvider> e imposta il `userIsOnlineTimeWindow` attributo su 20 minuti.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUser">
      <MemberSignature Language="C#" Value="public static bool ValidateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ValidateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.ValidateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ValidateUser (username As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ValidateUser(System::String ^ username, System::String ^ password);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nome dell'utente da convalidare.</param>
        <param name="password">Password dell'utente specificato.</param>
        <summary>Verifica che il nome utente e la password forniti siano validi.</summary>
        <returns>
          <see langword="true" /> se nome utente e password specificati sono validi; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.ValidateUser%2A> fornisce un modo semplice per verificare un nome utente e una password dall'origine dati. Si noti che, se il `username` parametro è vuoto o `null`, un <xref:System.Web.HttpException> viene generata un'eccezione.  
  
   
  
## Examples  
 Esempio di codice seguente mostra la pagina di accesso per un'applicazione ASP.NET configurata per utilizzare l'autenticazione basata su form e <xref:System.Web.Security.Membership> classe. Se le credenziali utente specificate non sono validi, viene visualizzato un messaggio all'utente. In caso contrario, l'utente viene reindirizzato all'URL richiesto originariamente il <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> metodo.  
  
> [!IMPORTANT]
>  In questo esempio contiene una casella di testo che accetta l'input dell'utente, ovvero una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatingPassword">
      <MemberSignature Language="C#" Value="public static event System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword" />
      <MemberSignature Language="DocId" Value="E:System.Web.Security.Membership.ValidatingPassword" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ValidatingPassword As MembershipValidatePasswordEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Web::Security::MembershipValidatePasswordEventHandler ^ ValidatingPassword;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipValidatePasswordEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene creato un utente, viene modificata una password o viene reimpostata una password.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Security.MembershipProvider.ValidatingPassword> evento viene generato quando il <xref:System.Web.Security.MembershipProvider.CreateUser%2A> (metodo), il <xref:System.Web.Security.MembershipProvider.ChangePassword%2A> metodo, o <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> viene chiamato metodo del provider di appartenenze.  
  
 È possibile utilizzare il <xref:System.Web.Security.MembershipProvider.ValidatingPassword> evento per convalidare i formati di password e i valori per gli utenti di appartenenza.  
  
 È possibile annullare corrente <xref:System.Web.Security.MembershipProvider.CreateUser%2A>, <xref:System.Web.Security.MembershipProvider.ChangePassword%2A>, o <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> azione impostando il <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> proprietà del metodo <xref:System.Web.Security.ValidatePasswordEventArgs> a `true` durante il <xref:System.Web.Security.MembershipProvider.ValidatingPassword> evento.  
  
 Se si annulla l'azione corrente impostando il <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> proprietà `true`, è possibile impostare il <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> proprietà del metodo <xref:System.Web.Security.ValidatePasswordEventArgs> a un'eccezione che descrive il motivo dell'errore di convalida della password. La chiamata al metodo genererà l'eccezione che il <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> è impostata su. Se il <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> proprietà `null`, il chiamante verrà generata un'eccezione generica di errore di convalida della password.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato un <xref:System.Web.Security.MembershipProvider.ValidatingPassword> evento che convalida il formato della password per un utente e Annulla l'azione se la password non corrisponde al formato richiesto.  
  
 [!code-csharp[System.Web.Security.Membership#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/CreateUser3cs.aspx#11)]
 [!code-vb[System.Web.Security.Membership#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/CreateUser3vb.aspx#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>