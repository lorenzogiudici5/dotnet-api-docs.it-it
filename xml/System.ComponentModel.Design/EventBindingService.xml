<Type Name="EventBindingService" FullName="System.ComponentModel.Design.EventBindingService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfcef6973b23bc649ed3c1d43be40f633ed75ce0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39841655" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EventBindingService : System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventBindingService extends System.Object implements class System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.EventBindingService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventBindingService&#xA;Implements IEventBindingService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventBindingService abstract : System::ComponentModel::Design::IEventBindingService" />
  <TypeSignature Language="F#" Value="type EventBindingService = class&#xA;    interface IEventBindingService" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IEventBindingService</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementazione predefinita dell'interfaccia <see cref="T:System.ComponentModel.Design.IEventBindingService" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fornendo un servizio per la registrazione di gestori eventi per gli eventi del componente, <xref:System.ComponentModel.Design.EventBindingService> fornisce un modo per collegare un gestore eventi con un evento componente dal codice della finestra di progettazione.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet">per l'accesso completo alle risorse di sistema. Valori richiesta: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Stato associato:</permission>
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventBindingService (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventBindingService(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.EventBindingService : IServiceProvider -&gt; System.ComponentModel.Design.EventBindingService" Usage="new System.ComponentModel.Design.EventBindingService provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Il provider del servizio dal quale l'oggetto <see cref="T:System.ComponentModel.Design.EventBindingService" /> esegue la query per i servizi.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.EventBindingService" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="protected abstract string CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueMethodName : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor -&gt; string" Usage="eventBindingService.CreateUniqueMethodName (component, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">Componente per il quale viene creato il nome di metodo.</param>
        <param name="e">Evento per il quale creare un nome.</param>
        <summary>Crea un nome di metodo univoco.</summary>
        <returns>Nome univoco di metodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome restituito dal <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> metodo deve essere compatibile con il linguaggio di scripting in uso e non deve essere in conflitto con altri nomi nel codice.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="component" /> o <paramref name="e" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="FreeMethod">
      <MemberSignature Language="C#" Value="protected virtual void FreeMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FreeMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FreeMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.FreeMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale è associato il metodo.</param>
        <param name="e">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per il gestore eventi.</param>
        <param name="methodName">Nome del metodo da liberare.</param>
        <summary>Fornisce una notifica quando un determinato metodo non viene più utilizzato da un gestore eventi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alcune implementazioni può essere necessario rimuovere il gestore dell'evento quando non viene usato alcun evento. Eseguendo l'override <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> e <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, un'implementazione in grado di dedurre quando un metodo non è più necessario.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="GetCompatibleMethods">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.ICollection GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ICollection GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetCompatibleMethods (e As EventDescriptor) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::ICollection ^ GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GetCompatibleMethods : System.ComponentModel.EventDescriptor -&gt; System.Collections.ICollection" Usage="eventBindingService.GetCompatibleMethods e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> contenente il delegato compatibile.</param>
        <summary>Restituisce un insieme di nomi di metodi compatibili.</summary>
        <returns>Insieme di stringhe che rappresentano nomi di metodi compatibili.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa restituito nella raccolta è il nome del metodo di un metodo la cui firma è compatibile con il delegato contenuto nel `e`. <xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> deve restituire una raccolta vuota se non esistono nomi compatibile.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="eventBindingService.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Tipo di servizio da recuperare.</param>
        <summary>Ottiene il servizio richiesto dal provider del servizio.</summary>
        <returns>Riferimento al servizio specificato dall'oggetto <paramref name="serviceType" /> o dall'oggetto <see langword="null" /> se il servizio richiesto non è disponibile.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Visualizza il codice utente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode();" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : unit -&gt; bool" Usage="eventBindingService.ShowCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visualizza il codice utente.</summary>
        <returns>
          <see langword="true" /> se è possibile visualizzare il codice; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> (metodo) non visualizza alcun codice specifico; in genere viene visualizzato l'ultimo codice digitato dall'utente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (lineNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(int lineNumber);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : int -&gt; bool" Usage="eventBindingService.ShowCode lineNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Numero di riga da visualizzare.</param>
        <summary>Visualizza il codice utente del numero di riga indicato.</summary>
        <returns>
          <see langword="true" /> se è possibile visualizzare il codice; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I numeri di riga sono in base uno.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (component As IComponent, e As EventDescriptor, methodName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; bool" Usage="eventBindingService.ShowCode (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale è associato il metodo.</param>
        <param name="e">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per il gestore eventi.</param>
        <param name="methodName">Nome del metodo per il quale visualizzare il codice.</param>
        <summary>Visualizza il codice utente per il metodo specificato.</summary>
        <returns>
          <see langword="true" /> se è possibile visualizzare il codice; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> metodo visualizza il corpo del codice utente con il nome del metodo specificata.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="string IEventBindingService.CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String Implements IEventBindingService.CreateUniqueMethodName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::CreateUniqueMethodName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">Istanza del componente alla quale è collegato l'evento.</param>
        <param name="e">Evento per il quale creare un nome.</param>
        <summary>Crea un nome univoco per un metodo di gestione degli eventi per il componente e l'evento specificati.</summary>
        <returns>Nome consigliato per il metodo di gestione di questo evento.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="component" /> o <paramref name="e" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IEventBindingService.GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetCompatibleMethods (e As EventDescriptor) As ICollection Implements IEventBindingService.GetCompatibleMethods" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetCompatibleMethods;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">Evento per il quale recuperare i metodi di gestione degli eventi compatibili.</param>
        <summary>Ottiene un insieme di metodi di gestione degli eventi dotati di firme di metodo compatibili con l'evento specificato.</summary>
        <returns>Insieme di stringhe che rappresentano nomi di metodi compatibili.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa restituito nella raccolta è il nome del metodo di un metodo la cui firma è compatibile con il delegato contenuto nel `e`. <xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> deve restituire una raccolta vuota se non esistono nomi compatibile.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEvent">
      <MemberSignature Language="C#" Value="System.ComponentModel.EventDescriptor IEventBindingService.GetEvent (System.ComponentModel.PropertyDescriptor property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(class System.ComponentModel.PropertyDescriptor property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEvent(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEvent (property As PropertyDescriptor) As EventDescriptor Implements IEventBindingService.GetEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::EventDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEvent(System::ComponentModel::PropertyDescriptor ^ property) = System::ComponentModel::Design::IEventBindingService::GetEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.EventDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="property">Proprietà che rappresenta un evento.</param>
        <summary>Ottiene un oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per l'evento rappresentato dal descrittore di proprietà specificato, se la proprietà rappresenta un evento.</summary>
        <returns>Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per l'evento rappresentato dalla proprietà oppure <see langword="null" /> se la proprietà non rappresenta un evento.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection IEventBindingService.GetEventProperties (System.ComponentModel.EventDescriptorCollection events);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(class System.ComponentModel.EventDescriptorCollection events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperties(System.ComponentModel.EventDescriptorCollection)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperties (events As EventDescriptorCollection) As PropertyDescriptorCollection Implements IEventBindingService.GetEventProperties" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptorCollection ^ System.ComponentModel.Design.IEventBindingService.GetEventProperties(System::ComponentModel::EventDescriptorCollection ^ events) = System::ComponentModel::Design::IEventBindingService::GetEventProperties;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.ComponentModel.EventDescriptorCollection" />
      </Parameters>
      <Docs>
        <param name="events">Eventi da convertire in proprietà.</param>
        <summary>Converte un gruppo di descrittori di evento in un gruppo di descrittori di proprietà.</summary>
        <returns>Matrice di oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrivono l'insieme di eventi.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="events" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperty">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptor IEventBindingService.GetEventProperty (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperty(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperty (e As EventDescriptor) As PropertyDescriptor Implements IEventBindingService.GetEventProperty" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEventProperty(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetEventProperty;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">Evento da convertire.</param>
        <summary>Converte un singolo descrittore di evento in un descrittore di proprietà.</summary>
        <returns>Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrive l'evento.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Visualizza il codice utente per la finestra di progettazione.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode () As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode() = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visualizza il codice utente per la finestra di progettazione.</summary>
        <returns>
          <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (lineNumber As Integer) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Numero della riga su cui posizionare il carattere di accento circonflesso.</param>
        <summary>Visualizza il codice utente per la finestra di progettazione corrispondente alla riga specificata.</summary>
        <returns>
          <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (component As IComponent, e As EventDescriptor) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale è collegato l'evento.</param>
        <param name="e">Evento da visualizzare.</param>
        <summary>Visualizza il codice utente per l'evento specificato.</summary>
        <returns>
          <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="events" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseMethod">
      <MemberSignature Language="C#" Value="protected virtual void UseMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.UseMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale è associato il metodo.</param>
        <param name="e">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per il gestore eventi.</param>
        <param name="methodName">Nome del metodo.</param>
        <summary>Indica con una notifica che un determinato metodo viene utilizzato da un gestore eventi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alcune implementazioni può essere necessario rimuovere il gestore dell'evento quando non viene usato alcun evento. Eseguendo l'override <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> e <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, un'implementazione in grado di dedurre quando un metodo non è più necessario.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="ValidateMethodName">
      <MemberSignature Language="C#" Value="protected virtual void ValidateMethodName (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateMethodName(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ValidateMethodName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateMethodName (methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateMethodName(System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ValidateMethodName : string -&gt; unit&#xA;override this.ValidateMethodName : string -&gt; unit" Usage="eventBindingService.ValidateMethodName methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome di metodo da convalidare.</param>
        <summary>Convalida la validità del nome di metodo fornito per il linguaggio o lo script utilizzato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita non esegue alcuna operazione. È possibile eseguire l'override di questo e generare un'eccezione se il nome è valido per l'uso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>