<Type Name="EventBindingService" FullName="System.ComponentModel.Design.EventBindingService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="963e59a2bc9a7f0b6d67a966b8ba4106b0bc9021" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37696348" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EventBindingService : System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventBindingService extends System.Object implements class System.ComponentModel.Design.IEventBindingService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.EventBindingService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventBindingService&#xA;Implements IEventBindingService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventBindingService abstract : System::ComponentModel::Design::IEventBindingService" />
  <TypeSignature Language="F#" Value="type EventBindingService = class&#xA;    interface IEventBindingService" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IEventBindingService</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="47ffe-101">Implementazione predefinita dell'interfaccia <see cref="T:System.ComponentModel.Design.IEventBindingService" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47ffe-101">A default implementation of the <see cref="T:System.ComponentModel.Design.IEventBindingService" /> interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-102">Fornendo un servizio per la registrazione di gestori eventi per gli eventi del componente, <xref:System.ComponentModel.Design.EventBindingService> fornisce un modo per collegare un gestore eventi con un evento componente dal codice della finestra di progettazione.</span><span class="sxs-lookup"><span data-stu-id="47ffe-102">By providing a service for registering event handlers for component events, <xref:System.ComponentModel.Design.EventBindingService> provides a way to link an event handler with a component event from designer code.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet">
      <span data-ttu-id="47ffe-103">per l'accesso completo alle risorse di sistema.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47ffe-103">for full access to system resources.</span>
      </span>
      <span data-ttu-id="47ffe-104">Valori richiesta: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47ffe-104">Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span>
      </span>
      <span data-ttu-id="47ffe-105">Stato associato:</span>
      <span class="sxs-lookup">
        <span data-stu-id="47ffe-105">Associated state:</span>
      </span>
    </permission>
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventBindingService (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventBindingService(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.EventBindingService : IServiceProvider -&gt; System.ComponentModel.Design.EventBindingService" Usage="new System.ComponentModel.Design.EventBindingService provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="47ffe-106">Il provider del servizio dal quale l'oggetto <see cref="T:System.ComponentModel.Design.EventBindingService" /> esegue la query per i servizi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-106">The service provider from which <see cref="T:System.ComponentModel.Design.EventBindingService" /> will query for services.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-107">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.EventBindingService" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-107">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.EventBindingService" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-108">
            <paramref name="provider" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-108">
              <paramref name="provider" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="protected abstract string CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member CreateUniqueMethodName : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor -&gt; string" Usage="eventBindingService.CreateUniqueMethodName (component, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="47ffe-109">Componente per il quale viene creato il nome di metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-109">The component for which the method name will be created.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="47ffe-110">Evento per il quale creare un nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-110">The event to create a name for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-111">Crea un nome di metodo univoco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-111">Creates a unique method name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-112">Nome univoco di metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-112">The unique method name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-113">Il nome restituito dal <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> metodo deve essere compatibile con il linguaggio di scripting in uso e non deve essere in conflitto con altri nomi nel codice.</span><span class="sxs-lookup"><span data-stu-id="47ffe-113">The name returned by the <xref:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName%2A> method must be compatible with the script language being used and it must not conflict with any other name in your code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-114">
            <paramref name="component" /> o <paramref name="e" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-114">
              <paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="FreeMethod">
      <MemberSignature Language="C#" Value="protected virtual void FreeMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FreeMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FreeMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.FreeMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.FreeMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="47ffe-115">Componente al quale Ã¨ associato il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-115">The component to which the method is bound.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="47ffe-116">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per il gestore eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-116">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="47ffe-117">Nome del metodo da liberare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-117">The name of the method to be freed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-118">Fornisce una notifica quando un determinato metodo non viene piÃ¹ utilizzato da un gestore eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-118">Provides a notification that a particular method is no longer being used by an event handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-119">Alcune implementazioni puÃ² essere necessario rimuovere il gestore dell'evento quando non viene usato alcun evento.</span><span class="sxs-lookup"><span data-stu-id="47ffe-119">Some implementations may intend to remove the event hander when no events are using it.</span></span> <span data-ttu-id="47ffe-120">Eseguendo l'override <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> e <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, un'implementazione in grado di dedurre quando un metodo non Ã¨ piÃ¹ necessario.</span><span class="sxs-lookup"><span data-stu-id="47ffe-120">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="GetCompatibleMethods">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.ICollection GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ICollection GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetCompatibleMethods (e As EventDescriptor) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::ICollection ^ GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GetCompatibleMethods : System.ComponentModel.EventDescriptor -&gt; System.Collections.ICollection" Usage="eventBindingService.GetCompatibleMethods e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="47ffe-121">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> contenente il delegato compatibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-121">The <see cref="T:System.ComponentModel.EventDescriptor" /> containing the compatible delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-122">Restituisce un insieme di nomi di metodi compatibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-122">Returns a collection of names of compatible methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-123">Insieme di stringhe che rappresentano nomi di metodi compatibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-123">A collection of strings that are names of compatible methods.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-124">Ogni stringa restituito nella raccolta Ã¨ il nome del metodo di un metodo la cui firma Ã¨ compatibile con il delegato contenuto nel `e`.</span><span class="sxs-lookup"><span data-stu-id="47ffe-124">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="47ffe-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> deve restituire una raccolta vuota se non esistono nomi compatibile.</span><span class="sxs-lookup"><span data-stu-id="47ffe-125"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-126">
            <paramref name="e" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-126">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="eventBindingService.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="47ffe-127">Tipo di servizio da recuperare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-127">The type of service to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-128">Ottiene il servizio richiesto dal provider del servizio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-128">Gets the requested service from the service provider.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-129">Riferimento al servizio specificato dall'oggetto <paramref name="serviceType" /> o dall'oggetto <see langword="null" /> se il servizio richiesto non Ã¨ disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-129">A reference to the service specified by <paramref name="serviceType" />, or <see langword="null" /> if the requested service is not available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="47ffe-130">Visualizza il codice utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-130">Displays user code.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode();" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : unit -&gt; bool" Usage="eventBindingService.ShowCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="47ffe-131">Visualizza il codice utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-131">Displays user code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-132">
            <see langword="true" /> se Ã¨ possibile visualizzare il codice; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-132">
              <see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-133">Il <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> (metodo) non visualizza alcun codice specifico; in genere viene visualizzato l'ultimo codice digitato dall'utente.</span><span class="sxs-lookup"><span data-stu-id="47ffe-133">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method does not display any particular code; generally it displays the last code the user typed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (lineNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(int lineNumber);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : int -&gt; bool" Usage="eventBindingService.ShowCode lineNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">
          <span data-ttu-id="47ffe-134">Numero di riga da visualizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-134">The line number to show.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-135">Visualizza il codice utente del numero di riga indicato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-135">Displays the user code at the given line number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-136">
            <see langword="true" /> se Ã¨ possibile visualizzare il codice; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-136">
              <see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-137">I numeri di riga sono in base uno.</span><span class="sxs-lookup"><span data-stu-id="47ffe-137">Line numbers are one-based.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCode">
      <MemberSignature Language="C#" Value="protected abstract bool ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ShowCode (component As IComponent, e As EventDescriptor, methodName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ShowCode : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; bool" Usage="eventBindingService.ShowCode (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="47ffe-138">Componente al quale Ã¨ associato il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-138">The component to which the method is bound.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="47ffe-139">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per il gestore eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-139">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="47ffe-140">Nome del metodo per il quale visualizzare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-140">The name of the method for which to display code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-141">Visualizza il codice utente per il metodo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-141">Displays the user code for the specified method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-142">
            <see langword="true" /> se Ã¨ possibile visualizzare il codice; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-142">
              <see langword="true" /> if it is possible to display the code; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-143">Il <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> metodo visualizza il corpo del codice utente con il nome del metodo specificata.</span><span class="sxs-lookup"><span data-stu-id="47ffe-143">The <xref:System.ComponentModel.Design.EventBindingService.ShowCode%2A> method displays the body of the user code with the given method name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName">
      <MemberSignature Language="C#" Value="string IEventBindingService.CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function CreateUniqueMethodName (component As IComponent, e As EventDescriptor) As String Implements IEventBindingService.CreateUniqueMethodName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::CreateUniqueMethodName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="47ffe-144">Istanza del componente alla quale Ã¨ collegato l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-144">The component instance the event is connected to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="47ffe-145">Evento per il quale creare un nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-145">The event to create a name for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-146">Crea un nome univoco per un metodo di gestione degli eventi per il componente e l'evento specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-146">Creates a unique name for an event-handler method for the specified component and event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-147">Nome consigliato per il metodo di gestione di questo evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-147">The recommended name for the event-handler method for this event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-148">
            <paramref name="component" /> o <paramref name="e" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-148">
              <paramref name="component" /> or <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IEventBindingService.GetCompatibleMethods (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetCompatibleMethods(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetCompatibleMethods (e As EventDescriptor) As ICollection Implements IEventBindingService.GetCompatibleMethods" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetCompatibleMethods;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="47ffe-149">Evento per il quale recuperare i metodi di gestione degli eventi compatibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-149">The event to get the compatible event-handler methods for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-150">Ottiene un insieme di metodi di gestione degli eventi dotati di firme di metodo compatibili con l'evento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-150">Gets a collection of event-handler methods that have a method signature compatible with the specified event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-151">Insieme di stringhe che rappresentano nomi di metodi compatibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-151">A collection of strings that are names of compatible methods.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-152">Ogni stringa restituito nella raccolta Ã¨ il nome del metodo di un metodo la cui firma Ã¨ compatibile con il delegato contenuto nel `e`.</span><span class="sxs-lookup"><span data-stu-id="47ffe-152">Each string returned in the collection is the method name of a method whose signature is compatible with the delegate contained in `e`.</span></span> <span data-ttu-id="47ffe-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> deve restituire una raccolta vuota se non esistono nomi compatibile.</span><span class="sxs-lookup"><span data-stu-id="47ffe-153"><xref:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods%2A> should return an empty collection if no names are compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-154">
            <paramref name="e" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-154">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEvent">
      <MemberSignature Language="C#" Value="System.ComponentModel.EventDescriptor IEventBindingService.GetEvent (System.ComponentModel.PropertyDescriptor property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(class System.ComponentModel.PropertyDescriptor property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEvent(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEvent (property As PropertyDescriptor) As EventDescriptor Implements IEventBindingService.GetEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::EventDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEvent(System::ComponentModel::PropertyDescriptor ^ property) = System::ComponentModel::Design::IEventBindingService::GetEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.EventDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="property">
          <span data-ttu-id="47ffe-155">ProprietÃ  che rappresenta un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-155">The property that represents an event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-156">Ottiene un oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per l'evento rappresentato dal descrittore di proprietÃ  specificato, se la proprietÃ  rappresenta un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-156">Gets an <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the specified property descriptor represents, if it represents an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-157">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per l'evento rappresentato dalla proprietÃ  oppure <see langword="null" /> se la proprietÃ  non rappresenta un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-157">An <see cref="T:System.ComponentModel.EventDescriptor" /> for the event that the property represents, or <see langword="null" /> if the property does not represent an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection IEventBindingService.GetEventProperties (System.ComponentModel.EventDescriptorCollection events);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(class System.ComponentModel.EventDescriptorCollection events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperties(System.ComponentModel.EventDescriptorCollection)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperties (events As EventDescriptorCollection) As PropertyDescriptorCollection Implements IEventBindingService.GetEventProperties" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptorCollection ^ System.ComponentModel.Design.IEventBindingService.GetEventProperties(System::ComponentModel::EventDescriptorCollection ^ events) = System::ComponentModel::Design::IEventBindingService::GetEventProperties;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.ComponentModel.EventDescriptorCollection" />
      </Parameters>
      <Docs>
        <param name="events">
          <span data-ttu-id="47ffe-158">Eventi da convertire in proprietÃ .</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-158">The events to convert to properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-159">Converte un gruppo di descrittori di evento in un gruppo di descrittori di proprietÃ .</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-159">Converts a set of event descriptors to a set of property descriptors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-160">Matrice di oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrivono l'insieme di eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-160">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that describe the event set.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-161">
            <paramref name="events" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-161">
              <paramref name="events" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.GetEventProperty">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptor IEventBindingService.GetEventProperty (System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperty(System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function GetEventProperty (e As EventDescriptor) As PropertyDescriptor Implements IEventBindingService.GetEventProperty" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::ComponentModel::PropertyDescriptor ^ System.ComponentModel.Design.IEventBindingService.GetEventProperty(System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::GetEventProperty;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="47ffe-162">Evento da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-162">The event to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-163">Converte un singolo descrittore di evento in un descrittore di proprietÃ .</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-163">Converts a single event descriptor to a property descriptor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-164">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrive l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-164">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that describes the event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-165">
            <paramref name="e" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-165">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="47ffe-166">Visualizza il codice utente per la finestra di progettazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-166">Displays the user code for the designer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode () As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode() = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="47ffe-167">Visualizza il codice utente per la finestra di progettazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-167">Displays the user code for the designer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-168">
            <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-168">
              <see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (lineNumber As Integer) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">
          <span data-ttu-id="47ffe-169">Numero della riga su cui posizionare il carattere di accento circonflesso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-169">The line number to place the caret on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-170">Visualizza il codice utente per la finestra di progettazione corrispondente alla riga specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-170">Displays the user code for the designer at the specified line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-171">
            <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-171">
              <see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IEventBindingService.ShowCode">
      <MemberSignature Language="C#" Value="bool IEventBindingService.ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.IEventBindingService.ShowCode(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Function ShowCode (component As IComponent, e As EventDescriptor) As Boolean Implements IEventBindingService.ShowCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ComponentModel.Design.IEventBindingService.ShowCode(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e) = System::ComponentModel::Design::IEventBindingService::ShowCode;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="47ffe-172">Componente al quale Ã¨ collegato l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-172">The component that the event is connected to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="47ffe-173">Evento da visualizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-173">The event to display.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-174">Visualizza il codice utente per l'evento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-174">Displays the user code for the specified event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47ffe-175">
            <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-175">
              <see langword="true" /> if the code is displayed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47ffe-176">
            <paramref name="events" /> Ã¨ <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-176">
              <paramref name="events" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UseMethod">
      <MemberSignature Language="C#" Value="protected virtual void UseMethod (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UseMethod(class System.ComponentModel.IComponent component, class System.ComponentModel.EventDescriptor e, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UseMethod (component As IComponent, e As EventDescriptor, methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UseMethod(System::ComponentModel::IComponent ^ component, System::ComponentModel::EventDescriptor ^ e, System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit&#xA;override this.UseMethod : System.ComponentModel.IComponent * System.ComponentModel.EventDescriptor * string -&gt; unit" Usage="eventBindingService.UseMethod (component, e, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="e" Type="System.ComponentModel.EventDescriptor" />
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="47ffe-177">Componente al quale Ã¨ associato il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-177">The component to which the method is bound.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="47ffe-178">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per il gestore eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-178">The <see cref="T:System.ComponentModel.EventDescriptor" /> for the event handler.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="47ffe-179">Nome del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-179">The name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-180">Indica con una notifica che un determinato metodo viene utilizzato da un gestore eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-180">Provides a notification that a particular method is being used by an event handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-181">Alcune implementazioni puÃ² essere necessario rimuovere il gestore dell'evento quando non viene usato alcun evento.</span><span class="sxs-lookup"><span data-stu-id="47ffe-181">Some implementations may intend to remove the event hander when no events are using it.</span></span> <span data-ttu-id="47ffe-182">Eseguendo l'override <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> e <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, un'implementazione in grado di dedurre quando un metodo non Ã¨ piÃ¹ necessario.</span><span class="sxs-lookup"><span data-stu-id="47ffe-182">By overriding <xref:System.ComponentModel.Design.EventBindingService.UseMethod%2A> and <xref:System.ComponentModel.Design.EventBindingService.FreeMethod%2A>, an implementation can infer when a method is no longer needed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.IComponent" />
      </Docs>
    </Member>
    <Member MemberName="ValidateMethodName">
      <MemberSignature Language="C#" Value="protected virtual void ValidateMethodName (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateMethodName(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.EventBindingService.ValidateMethodName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateMethodName (methodName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateMethodName(System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="abstract member ValidateMethodName : string -&gt; unit&#xA;override this.ValidateMethodName : string -&gt; unit" Usage="eventBindingService.ValidateMethodName methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">
          <span data-ttu-id="47ffe-183">Nome di metodo da convalidare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-183">The method name to validate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47ffe-184">Convalida la validitÃ  del nome di metodo fornito per il linguaggio o lo script utilizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47ffe-184">Validates that the provided method name is valid for the language or script being used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47ffe-185">L'implementazione predefinita non esegue alcuna operazione.</span><span class="sxs-lookup"><span data-stu-id="47ffe-185">The default implementation does nothing.</span></span> <span data-ttu-id="47ffe-186">Ã possibile eseguire l'override di questo e generare un'eccezione se il nome Ã¨ valido per l'uso.</span><span class="sxs-lookup"><span data-stu-id="47ffe-186">You may override this and throw an exception if the name is invalid for your use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>