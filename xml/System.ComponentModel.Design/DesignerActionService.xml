<Type Name="DesignerActionService" FullName="System.ComponentModel.Design.DesignerActionService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="42dcb34d43a78ca3caa207a4d231e6a0f025e330" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39841825" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerActionService : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerActionService extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignerActionService" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerActionService&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerActionService : IDisposable" />
  <TypeSignature Language="F#" Value="type DesignerActionService = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Crea un servizio in fase di progettazione per la gestione della raccolta di oggetti <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> per i componenti.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService> classe è responsabile per la gestione della raccolta di <xref:System.ComponentModel.Design.DesignerActionItem> oggetti per ogni istanza di un componente esistente in un form in fase di progettazione. Questa classe consente a un modello di direct push di creazione di elementi e serve principalmente per l'uso dagli sviluppatori di strumenti in fase di progettazione, anche se può essere utilizzato anche dal componente e gli sviluppatori di controlli personalizzati.  
  
 Gli sviluppatori di strumenti in fase di progettazione saranno necessario determinare l'elenco di elementi da visualizzare per un componente e determinare se questo elenco viene modificato. È anche possibile creare componenti aggiuntivi che operano in combinazione con oggetti del pannello smart tag.  
  
 Advanced componente sviluppatori potrebbe essere necessario controllare in modo dinamico gli elementi associati a un componente, sostituendo o integrando il modello pull standard. Ad esempio, i comandi del pannello possono essere modificati a seconda del contesto del relativo utilizzo e lo stato della fase di progettazione del componente.  
  
> [!NOTE]
>  Il <xref:System.ComponentModel.Design.DesignerActionService> è effettivamente il servizio di controllo protetto da entrambi i modelli push e pull; tuttavia, nel secondo caso funziona in modo implicito.  
  
 <xref:System.ComponentModel.Design.DesignerActionService> fornisce una semplice interfaccia per l'accesso e la modifica degli elementi per ogni componente, inclusi i seguenti metodi ed eventi:  
  
-   Il <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> metodo determina se il <xref:System.ComponentModel.Design.DesignerActionService> gestisce un particolare componente.  
  
-   Il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metodo supporta l'enumerazione degli elenchi di elementi.  
  
-   Il <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> metodo consente l'aggiunta di un <xref:System.ComponentModel.Design.DesignerActionList> o <xref:System.ComponentModel.Design.DesignerActionListCollection> al set di elementi esistenti per un'istanza del componente. Al contrario, il <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metodo rimuove uno o tutti gli elenchi di elementi associati a un componente.  
  
    > [!NOTE]
    >  Il <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> metodo rappresenta il modello push diretto di associare gli elementi del pannello con un componente. Al contrario, il modello pull si basa sull'override di <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> proprietà della classe della finestra di progettazione per il componente. L'ambiente di progettazione è responsabile dell'aggiunta di questi elementi nell'insieme corrente <xref:System.ComponentModel.Design.DesignerActionService> quando viene creato un componente nell'area di progettazione.  
  
    > [!IMPORTANT]
    >  Il <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A>, e <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> metodi solo prendere in considerazione o influire sugli elementi del modello push.  
  
-   Il <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> eventi indica quando la raccolta di elementi cambia per un componente.  
  
 Poiché spesso è preferibile utilizzare alcuni degli stessi elementi di pannello in menu di scelta rapida in fase di progettazione del componente e il relativo pannello, esiste un numero elevato di interoperabilità tra <xref:System.ComponentModel.Design.DesignerActionItem> oggetti e i verbi di progettazione.  
  
 Se una finestra di progettazione del componente non è specificato in modo esplicito un <xref:System.ComponentModel.Design.DesignerActionList> (vale a dire, non contiene un override <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> proprietà), quindi verrà creato un elenco di verbi di progettazione esistenti. I verbi specificati dal <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> proprietà. In questo caso, una classe di elenco di verbi interna viene utilizzata per contenere l'insieme delle voci del pannello elemento verbo.  
  
 Se si desidera che un <xref:System.ComponentModel.Design.DesignerActionMethodItem> per essere utilizzato sia come voce del pannello e una voce di menu di scelta rapida in fase di progettazione, è possibile impostare il `includeAsDesignerVerb` parametro nel costruttore dell'elemento.  
  
 Usare la <xref:System.ComponentModel.Design.DesignerActionUIService> per controllare la visualizzazione della finestra di progettazione <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
    <altmember cref="T:System.ComponentModel.Design.ComponentDesigner" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionItem" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionUIService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionService (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionService(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionService : IServiceProvider -&gt; System.ComponentModel.Design.DesignerActionService" Usage="new System.ComponentModel.Design.DesignerActionService serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Provider del servizio per l'ambiente di progettazione corrente.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un provider di servizi è necessario per il monitoraggio della selezione e modifiche dei componenti. È previsto per supportare le <xref:System.ComponentModel.Design.IDesignerHost> e <xref:System.ComponentModel.Design.IComponentChangeService> tipi. Il <xref:System.ComponentModel.Design.DesignerActionService> classe utilizza una tabella interna per gestire i componenti e i relativi <xref:System.ComponentModel.Design.DesignerActionList> smart tag.  
  
 In genere, gli sviluppatori di componenti non saranno necessario creare un'istanza di questa classe. al contrario, possano acquisire un'istanza esistente mediante una chiamata al <xref:System.ComponentModel.Component.GetService%2A?displayProperty=nameWithType> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
        <altmember cref="M:System.ComponentModel.Component.GetService(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge uno o più oggetti <see cref="T:System.ComponentModel.Design.DesignerActionList" /> all'insieme corrente di smart tag gestiti.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Add (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">Oggetto <see cref="T:System.ComponentModel.IComponent" /> al quale associare gli smart tag.</param>
        <param name="actionList">Oggetto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> contenente i nuovi elementi smart tag da aggiungere.</param>
        <summary>Aggiunge un oggetto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> all'insieme corrente di smart tag gestiti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> metodo rappresenta il modello di push dell'aggiunta di elementi smart tag. Il modello pull alternativi si basa sull'override di <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> proprietà nella finestra di progettazione per il componente corrispondente.  
  
 Quando viene chiamato questo metodo, vengono analizzati gli elenchi da aggiungere per qualsiasi <xref:System.ComponentModel.Design.DesignerActionMethodItem> con il <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> impostata su `true`. Questi elementi vengono aggiunti all'elenco dei verbi di progettazione per questo componente, tramite una chiamata al <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> (metodo).  
  
 In base all'istanza componente vengono gestiti gli smart tag. La raccolta gestita può contenere le voci duplicate.  
  
 Questo metodo genera il <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o entrambi i parametri sono <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionListCollection ^ designerActionListCollection);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.Add (comp, designerActionListCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="designerActionListCollection" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="comp">Oggetto <see cref="T:System.ComponentModel.IComponent" /> al quale associare gli smart tag.</param>
        <param name="designerActionListCollection">Oggetto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> contenente i nuovi elementi smart tag da aggiungere.</param>
        <summary>Aggiunge un oggetto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> all'insieme corrente di smart tag gestiti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> metodo rappresenta il modello di push dell'aggiunta di elementi smart tag. Il modello pull alternativi si basa sull'override di <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> proprietà nella finestra di progettazione per il componente corrispondente.  
  
 Quando viene chiamato questo metodo, vengono analizzati gli elenchi da aggiungere per qualsiasi <xref:System.ComponentModel.Design.DesignerActionMethodItem> con il <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> impostata su `true`. Questi elementi vengono aggiunti all'elenco dei verbi di progettazione per questo componente, tramite una chiamata al <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> (metodo).  
  
 In base all'istanza componente vengono gestiti gli smart tag. La raccolta gestita può contenere le voci duplicate.  
  
 Questo metodo genera il <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o entrambi i parametri sono <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="designerActionService.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutti i componenti dalla gestione e cancella tutti gli elenchi di smart tag del modello push.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> metodo svuota la tabella interna utilizzata per archiviare le informazioni sui componenti e il modello push elenchi di smart tag.  
  
> [!CAUTION]
>  Poiché questo metodo influisce su tutti i componenti gestiti dal servizio corrente e non solo il componente corrente, questo metodo deve essere utilizzato con cautela. In genere, lo sviluppatore di strumento di progettazione viene utilizzato quando la reimpostazione di un'area di progettazione. Gli sviluppatori di componenti devono usare uno del <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metodi invece per rimuovere singoli smart tag degli elementi o elenchi.  
  
 Oggetto <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento viene generato per ogni componente che è stata precedentemente gestite dal servizio corrente.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (comp As IComponent) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.ComponentModel.IComponent -&gt; bool" Usage="designerActionService.Contains comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">Oggetto <see cref="T:System.ComponentModel.IComponent" /> da cercare.</param>
        <summary>Determina se il servizio smart tag corrente gestisce gli elenchi di azioni del componente specificato.</summary>
        <returns>
          <see langword="true" /> se il componente è gestito dal servizio corrente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> metodo riconosce solo gli smart tag modello push associati a un componente con il <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> (metodo).  
  
 Anche se non esiste alcun limite al numero di simultanee strutturale <xref:System.ComponentModel.Design.DesignerActionService> istanze create da uno strumento di progettazione, in genere una sola istanza del servizio viene creata per ogni area di progettazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> è <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="DesignerActionListsChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DesignerActionListsChanged As DesignerActionListsChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::DesignerActionListsChangedEventHandler ^ DesignerActionListsChanged;" />
      <MemberSignature Language="F#" Value="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " Usage="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando si aggiunge o si rimuove un oggetto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> per un componente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente mostra il set di classi specializzate associate di <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento.  
  
|Tipo specializzato|Descrizione|  
|----------------------|-----------------|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs>|Aggiunge le informazioni specifiche alla gestione degli elenchi di smart tag. Questa classe è specializzata da <xref:System.EventArgs>.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventHandler>|Si connette il <xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs> con il relativo gestore.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedType>|Indica se un elenco è stato aggiunto o rimosso.|  
  
 Per altre informazioni sulla gestione degli eventi, vedere [NIB: utilizzo di eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedType" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventHandler" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rilascia le risorse usate da <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="designerActionService.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dalla classe <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> metodo è l'implementazione del metodo solo richieste dal <xref:System.IDisposable> interfaccia. Chiamare questo metodo dopo aver terminato di utilizzare l'oggetto <xref:System.ComponentModel.Design.DesignerActionService>. Esegue due operazioni principali:  
  
-   Rimuove il servizio corrente dall'elenco dei servizi disponibili nell'ambiente di progettazione tramite una chiamata al <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> (metodo).  
  
-   Annulla la sottoscrizioni agli eventi di modifica componente associato <xref:System.ComponentModel.Design.IComponentChangeService> interfaccia.  
  
 Chiamare il metodo <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.ComponentModel.Design.DesignerActionService>. Il metodo <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> lascia l'oggetto <xref:System.ComponentModel.Design.DesignerActionService> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A>, è necessario rilasciare tutti i riferimenti per il <xref:System.ComponentModel.Design.DesignerActionService> in modo che il garbage collector di recuperare la memoria che il <xref:System.ComponentModel.Design.DesignerActionService> occupata. Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementa un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre il metodo <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.ComponentModel.Design.DesignerActionService>. In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.ComponentModel.Design.DesignerActionService> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="designerActionService.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.ComponentModel.Design.DesignerActionService" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> metodo è l'implementazione del metodo solo richieste dal <xref:System.IDisposable> interfaccia. Chiamare questo metodo dopo aver terminato di utilizzare l'oggetto <xref:System.ComponentModel.Design.DesignerActionService>. Esegue due operazioni principali:  
  
-   Rimuove il servizio corrente dall'elenco dei servizi disponibili nell'ambiente di progettazione tramite una chiamata al <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> (metodo).  
  
-   Annulla la sottoscrizioni agli eventi di modifica componente associato <xref:System.ComponentModel.Design.IComponentChangeService> interfaccia.  
  
 Questo metodo viene chiamato da parte del pubblico `Dispose()` metodo e <xref:System.Object.Finalize%2A> (metodo). `Dispose()` richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A> richiama `Dispose` con `disposing` impostato su `false`.  
  
 Se il parametro `disposing` è `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti a cui la classe <xref:System.ComponentModel.Design.DesignerActionService> fa riferimento. Il metodo richiama il metodo `Dispose()` di ciascun oggetto cui viene fatto riferimento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> può essere chiamato più volte da altri oggetti. Quando si esegue l'override <see langword="Dispose(Boolean)" /> prestare attenzione a non fare riferimento agli oggetti che sono stati eliminati in una precedente chiamata a <see langword="Dispose" />. Per altre informazioni su come implementare <see langword="Dispose(Boolean)" />, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  Per altre informazioni sulle <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [override del metodo Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetComponentActions">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce l'insieme degli elenchi di elementi smart tag associati a un componente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComponentActions (component As IComponent) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="member this.GetComponentActions : System.ComponentModel.IComponent -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale sono associati gli smart tag.</param>
        <summary>Restituisce l'insieme degli elenchi di elementi smart tag associati a un componente.</summary>
        <returns>Insieme degli smart tag per il componente specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> è equivalente a una chiamata al metodo il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%28System.ComponentModel.IComponent%2CSystem.ComponentModel.Design.ComponentActionsType%29> metodo usando un `type` parametri di <xref:System.ComponentModel.Design.ComponentActionsType.All>. Pertanto, la raccolta restituita conterrà entrambi gli elenchi di push e pull di smart tag.  
  
 L'oggetto restituito <xref:System.ComponentModel.Design.DesignerActionListCollection> rappresenta l'unione tra gli elenchi di elementi aggiunti tramite il <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> metodi e degli elenchi ottenuto dal <xref:System.ComponentModel.Design.DesignerCommandSet> istanza ottenuti dal sito del componente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="T:System.ComponentModel.Design.DesignerCommandSet" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.ComponentActionsType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component, valuetype System.ComponentModel.Design.ComponentActionsType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentActionsType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetComponentActions (component As IComponent, type As ComponentActionsType) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::ComponentActionsType type);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection&#xA;override this.GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions (component, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="type" Type="System.ComponentModel.Design.ComponentActionsType" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale sono associati gli smart tag.</param>
        <param name="type">Oggetto <see cref="T:System.ComponentModel.Design.ComponentActionsType" /> con il quale filtrare gli smart tag associati.</param>
        <summary>Restituisce l'insieme degli elenchi di elementi smart tag del tipo specificato associati a un componente.</summary>
        <returns>Insieme degli smart tag del tipo specificato per il componente indicato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa versione di overload <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metodo vengono applicati filtri al `type` parametro, che può avere uno dei valori seguenti.  
  
|Valore|Descrizione|  
|-----------|-----------------|  
|<xref:System.ComponentModel.Design.ComponentActionsType.All>|Tutti i relativi smart tag.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Component>|Modello pull solo smart tag.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Service>|Modello push solo smart tag.|  
  
 Se la finestra di progettazione associato per un componente non fornisce un elenco di smart tag modello pull, il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metodo utilizzerà voci di menu di scelta rapida in fase di progettazione della finestra di progettazione dal <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.ComponentActionsType" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentDesignerActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentDesignerActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentDesignerActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentDesignerActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentDesignerActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentDesignerActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale sono associati gli smart tag.</param>
        <param name="actionLists">Insieme al quale aggiungere gli smart tag associati.</param>
        <summary>Recupera gli smart tag del modello pull associati a un componente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> è un metodo di supporto per il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metodi. <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> esegue la ricerca di modello pull smart tag del tipo <xref:System.ComponentModel.Design.ComponentActionsType.Component>e li aggiunge all'oggetto fornito `actionLists` raccolta.  
  
 Se lo sviluppatore del componente non fornisce in modo esplicito una raccolta di smart tag tramite il <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> proprietà della relativa finestra di progettazione, questo metodo riutilizzerà le voci di menu di scelta rapida in fase di progettazione, che vengono ottenute tramite il <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> proprietà del finestra di progettazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o entrambi i parametri sono <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentServiceActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentServiceActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentServiceActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentServiceActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentServiceActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentServiceActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Componente al quale sono associati gli smart tag.</param>
        <param name="actionLists">Insieme al quale aggiungere gli smart tag associati.</param>
        <summary>Recupera gli smart tag del modello push associati a un componente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions%2A> è un metodo di supporto per il <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> metodi. Cerca smart tag del modello push typu <xref:System.ComponentModel.Design.ComponentActionsType.Service>e li aggiunge all'oggetto fornito `actionLists` raccolta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o entrambi i parametri sono <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dissocia uno o più elenchi di smart tag da uno o più componenti.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove actionList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="actionList">Elenco di smart tag da rimuovere.</param>
        <summary>Rimuove l'elenco di smart tag specificato da tutti i componenti gestiti dal servizio corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa versione del <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metodo viene in genere usato dagli sviluppatori di strumenti di progettazione, perché gli sviluppatori di componenti in genere non conosce gli altri componenti presenti nell'area di progettazione corrente.  
  
 Se ha esito positivo, questo metodo genera il <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actionList" /> è <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent -&gt; unit" Usage="designerActionService.Remove comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">Componente dal quale dissociare gli smart tag.</param>
        <summary>Rimuove tutti gli elenchi di smart tag associati al componente specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione riesce, il <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metodo che genera il <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> è <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">Componente dal quale dissociare gli smart tag.</param>
        <param name="actionList">Elenco di smart tag da rimuovere.</param>
        <summary>Rimuove l'elenco di smart tag specificato dal componente indicato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione riesce, il <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> metodo che genera il <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o entrambi i parametri sono <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
  </Members>
</Type>