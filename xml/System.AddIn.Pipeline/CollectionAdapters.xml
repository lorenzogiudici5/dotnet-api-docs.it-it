<Type Name="CollectionAdapters" FullName="System.AddIn.Pipeline.CollectionAdapters">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cda5b936b22052f7b99b2c7e5bd552235a459181" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30359865" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CollectionAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.CollectionAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionAdapters abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente il passaggio degli insiemi da un componente aggiuntivo alla relativa applicazione host e viceversa.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe fornisce metodi che consentono un <xref:System.Collections.Generic.IList%601> raccolta da convertire in un <xref:System.AddIn.Contract.IListContract%601> insieme. Il <xref:System.AddIn.Contract.IListContract%601> raccolta viene passata attraverso il limite di isolamento e riconvertito un <xref:System.Collections.Generic.IList%601> insieme che è possibile utilizzare il componente aggiuntivo o l'applicazione host.  
  
 Gli oggetti nelle raccolte devono essere utilizzabile in remoto. Per ulteriori informazioni sui tipi di oggetto che è possibile passare, vedere [contratti, visualizzazioni e adattatori](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ToIList&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;T&gt; ToIList&lt;T&gt; (System.AddIn.Contract.IListContract&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!T&gt; ToIList&lt;T&gt;(class System.AddIn.Contract.IListContract`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of T) (collection As IListContract(Of T)) As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IList&lt;T&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo di oggetti contenuti nell'elenco. <c>T</c> deve essere serializzabile.</typeparam>
        <param name="collection">Insieme presente sull'altro lato della pipeline.</param>
        <summary>Converte l'insieme <see cref="T:System.AddIn.Contract.IListContract`1" /> specificato in un insieme <see cref="T:System.Collections.Generic.IList`1" />.</summary>
        <returns>Insieme convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'applicazione host o il componente aggiuntivo è possibile utilizzare l'oggetto restituito <xref:System.Collections.Generic.IList%601> insieme. Il <xref:System.Collections.Generic.IList%601> raccolta sarà necessario un token di durata per il controllo remoto <xref:System.AddIn.Contract.IListContract%601> insieme.  
  
 È necessario utilizzare questo overload di metodo solo quando il contenuto del <xref:System.AddIn.Contract.IListContract%601> tipi serializzabili che può essere passato direttamente al componente aggiuntivo e host (anziché da tipi che devono essere convertiti in visualizzazioni).  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato un segmento della pipeline di adattatore sul lato host, come descritto in [procedura dettagliata: passaggio di raccolte tra host e Add-Ins](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5). L'esempio adatta l'oggetto personalizzato `ProcessBooks` metodo effettuando il <xref:System.AddIn.Contract.IListContract%601> insieme passato dal componente aggiuntivo e convertirlo in un <xref:System.Collections.Generic.IList%601> raccolta, quindi è possibile utilizzare l'applicazione host.  
  
 [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]
 [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIList&lt;TContract,TView&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TView&gt; ToIList&lt;TContract,TView&gt; (System.AddIn.Contract.IListContract&lt;TContract&gt; collection, Converter&lt;TContract,TView&gt; contractViewAdapter, Converter&lt;TView,TContract&gt; viewContractAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!TView&gt; ToIList&lt;TContract, TView&gt;(class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; collection, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of TContract, TView) (collection As IListContract(Of TContract), contractViewAdapter As Converter(Of TContract, TView), viewContractAdapter As Converter(Of TView, TContract)) As IList(Of TView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract, typename TView&gt;&#xA; static System::Collections::Generic::IList&lt;TView&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;TContract&gt; ^ collection, Converter&lt;TContract, TView&gt; ^ contractViewAdapter, Converter&lt;TView, TContract&gt; ^ viewContractAdapter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">Il tipo che definisce il contratto per il passaggio di oggetti di tipo <c>TView</c> attraverso il limite di isolamento.</typeparam>
        <typeparam name="TView">Tipo che definisce la visualizzazione degli oggetti nell'elenco.</typeparam>
        <param name="collection">Insieme da passare all'altro lato della pipeline.</param>
        <param name="contractViewAdapter">Convertitore che adatta i dati dal tipo definito nel contratto al tipo previsto nella visualizzazione.</param>
        <param name="viewContractAdapter">Convertitore che adatta i dati dal tipo definito nella visualizzazione al tipo previsto dal contratto.</param>
        <summary>Converte un insieme <see cref="T:System.AddIn.Contract.IListContract`1" /> specificato in un insieme <see cref="T:System.Collections.Generic.IList`1" /> mediante adattatori del convertitore.</summary>
        <returns>Insieme convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo overload del metodo per <xref:System.AddIn.Contract.IListContract%601> le raccolte che contengono tipi che devono essere adattati prima di poter essere passati al componente aggiuntivo o host (anziché da tipi serializzabili semplici che possono essere passati direttamente). L'applicazione host o il componente aggiuntivo è possibile utilizzare l'oggetto restituito <xref:System.Collections.Generic.IList%601> insieme. Disporrà di un token di durata per il controllo remoto <xref:System.AddIn.Contract.IListContract%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;T&gt; ToIListContract&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!T&gt; ToIListContract&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of T) (collection As IList(Of T)) As IListContract(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::AddIn::Contract::IListContract&lt;T&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo di oggetti contenuti nell'elenco. <c>T</c> deve essere serializzabile.</typeparam>
        <param name="collection">Raccolta da convertire.</param>
        <summary>Converte un insieme <see cref="T:System.Collections.Generic.IList`1" /> specificato in un insieme <see cref="T:System.AddIn.Contract.IListContract`1" />.</summary>
        <returns>Insieme convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.AddIn.Contract.IListContract%601> raccolta può essere sottoposto a marshalling attraverso il limite di isolamento tra il componente aggiuntivo e l'applicazione host.  
  
 È necessario utilizzare questo overload di metodo solo quando il contenuto del <xref:System.Collections.Generic.IList%601> raccolta sono tipi serializzabili che possono essere passati direttamente al contratto (anziché da tipi che devono essere convertiti in contratti).  
  
   
  
## Examples  
 Nell'esempio seguente viene implementata la classe che definisce un segmento della pipeline di adattatore sul lato componente aggiuntivo. Adeguarsi personalizzata `ProcessBooks` metodo effettuando il <xref:System.Collections.Generic.IList%601> insieme passato dal segmento di visualizzazione e convertirlo in un <xref:System.AddIn.Contract.IListContract%601> raccolta che può essere sottoposto a marshalling attraverso il limite di isolamento all'host.  
  
 [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]
 [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;TView,TContract&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;TContract&gt; ToIListContract&lt;TView,TContract&gt; (System.Collections.Generic.IList&lt;TView&gt; collection, Converter&lt;TView,TContract&gt; viewContractAdapter, Converter&lt;TContract,TView&gt; contractViewAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; ToIListContract&lt;TView, TContract&gt;(class System.Collections.Generic.IList`1&lt;!!TView&gt; collection, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of TView, TContract) (collection As IList(Of TView), viewContractAdapter As Converter(Of TView, TContract), contractViewAdapter As Converter(Of TContract, TView)) As IListContract(Of TContract)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView, typename TContract&gt;&#xA; static System::AddIn::Contract::IListContract&lt;TContract&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;TView&gt; ^ collection, Converter&lt;TView, TContract&gt; ^ viewContractAdapter, Converter&lt;TContract, TView&gt; ^ contractViewAdapter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;TContract&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Tipo che definisce la visualizzazione degli oggetti nell'elenco.</typeparam>
        <typeparam name="TContract">Il tipo che definisce il contratto per il passaggio di oggetti di tipo <c>TView</c> attraverso il limite di isolamento.</typeparam>
        <param name="collection">Raccolta da convertire.</param>
        <param name="viewContractAdapter">Convertitore che adatta i dati dal tipo definito nella visualizzazione al tipo previsto dal contratto.</param>
        <param name="contractViewAdapter">Convertitore che adatta i dati dal tipo definito nel contratto al tipo previsto nella visualizzazione.</param>
        <summary>Converte un insieme <see cref="T:System.Collections.Generic.IList`1" /> specificato in un insieme <see cref="T:System.AddIn.Contract.IListContract`1" /> mediante adattatori del convertitore.</summary>
        <returns>Insieme convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo overload del metodo per <xref:System.Collections.Generic.IList%601> le raccolte che contengono tipi che devono essere convertiti in contratti prima di poter essere passati al contratto (anziché da tipi serializzabili semplici che possono essere passati direttamente). Il <xref:System.AddIn.Contract.IListContract%601> raccolta può essere sottoposto a marshalling attraverso il limite di isolamento tra un componente aggiuntivo e l'applicazione host.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>