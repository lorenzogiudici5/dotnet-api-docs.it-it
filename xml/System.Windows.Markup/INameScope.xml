<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ae350a552fc26c4cf919e3c7ddd4041a5f79898" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502832" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce un contratto per la modalità di accesso ai nomi degli elementi all'interno di un particolare ambito dei nomi XAML e per come imporre l'univocità dei nomi all'interno di tale ambito dei nomi XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa interfaccia è implementata da classi che includono elementi figlio che sono destinati a essere riutilizzate mediante il modello o rinviare metafora. Modelli, le factory e costrutti simili devono essere univoci NameScope XAML che sono separati da un oggetto principale grafico e una radice XAML. Il principio qui è che non dovrà essere presente alcun conflitti di denominazione quando gli oggetti creati da tali elementi figlio vengono introdotte nel grafico di oggetti di un'applicazione, e in modo che le operazioni DOM e tecniche di riferimento XAML che si basano sull'identificatore del nome possono basarsi sul nome univocità in ogni ambito dei nomi XAML.  
  
 Nelle versioni precedenti di .NET Framework, questa interfaccia esisteva nell'assembly WindowsBase di specifiche di WPF. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> nell'assembly System. Xaml. Per altre informazioni, vedere [tipi migrati da WPF a System. XAML](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Note sull'utilizzo di WPF  
 Questa interfaccia viene implementata dalla classe WPF <xref:System.Windows.NameScope>. La maggior parte delle operazioni di namescope XAML in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funzionano in utilizzando <xref:System.Windows.NameScope> istanze, ma le informazioni vengono talvolta comunicate internamente tramite <xref:System.Windows.Markup.INameScope> riferimenti.  
  
 Sono esempi di classi WPF che utilizzano una factory o rinviare metafora con rappresentazione XAML <xref:System.Windows.Style> e <xref:System.Windows.FrameworkTemplate>. Queste implementazioni di solito si basano su versioni esplicite dei metodi dell'interfaccia ottenibile il <xref:System.Windows.NameScope> classe.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Identificatore del nome per l'oggetto da richiedere.</param>
        <summary>Restituisce un oggetto con il nome identificativo specificato.</summary>
        <returns>Oggetto, se trovato. Restituisce <see langword="null" /> se non è stato trovato alcun oggetto di tale nome.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le stringhe dei nomi valido nel markup XAML devono corrispondere ai requisiti documentati in [grammatica XamlName](~/docs/framework/xaml-services/xamlname-grammar.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Nome da registrare.</param>
        <param name="scopedElement">Elemento specifico cui il parametro <c>name</c> fa riferimento.</param>
        <summary>Registra il nome specificato nell'ambito dei nomi XAML corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non sono consentiti nomi duplicati in un namescope XAML.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Non consente di limitare i nomi duplicati da registrare. Se l'input <paramref name="name" /> è già assegnato a un elemento esistente nella rappresentazione di raccolta interna di ambito dei nomi XAML (anche se ha lo stesso come <paramref name="scopedElement" />), generare un'eccezione.  Considerare inoltre di generare un'eccezione se il nome fornito non è conforme a [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome di cui annullare la registrazione.</param>
        <summary>Annulla la registrazione del nome specificato nell'ambito dei nomi XAML corrente.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Se il nome di input non esiste, generare un'eccezione.  È necessario rimuovere il nome e l'elemento registrato in precedenza che si riferisce a dalla rappresentazione di raccolta del ambito dei nomi XAML, in modo che lo stesso nome potenzialmente sia possibile registrare nuovamente in futuro.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>