<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="949b5d2e6f4e8bbe51d550b6df6cca7d0c9978c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658645" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un tag di lingua da utilizzare nel markup XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tag della lingua o potrebbe non essere registrato <xref:System.Globalization.CultureInfo> presenti nel sistema in cui il codice XAML viene interpretato.  
  
 Questa classe è utile per trattare i valori rappresentati utilizzando `xml:lang` in XML.  
  
 Tag di linguaggio può essere specificato in forma di due caratteri o in un formato di lingua sillabata. Vedere [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454).  
  
 Si noti che la specifica XML consente una stringa vuota per `xml:lang`, anche se non è consentito dallo standard RFC 3066; pertanto, il <xref:System.Windows.Markup.XmlLanguage> consente di digitare "" (stringa di attributo vuota). Un valore predefinito costruito <xref:System.Windows.Markup.XmlLanguage> si comporta come se costruito con "" (stringa vuota).  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *prefix*  
 Prefisso della lingua, utilizzando i valori del prefisso ISO 639-1 language. Ad esempio "en" o "zh". I valori maiuscoli sono accettati e convertiti in caratteri minuscoli. Potrebbe anche trattarsi di un attributo vuoto, "".  
  
 *subcode*  
 Se fornito, deve essere preceduto da un trattino. Quindi, un codice secondario come definito dallo standard RFC 3066. L'utilizzo più comune e quello che viene probabilmente mappato correttamente a un <xref:System.Globalization.CultureInfo>, è ad esempio un paese o regione designazione "-us" o "-hk". I valori maiuscoli sono accettati e convertiti in caratteri minuscoli.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un'istanza <see cref="T:System.Windows.Markup.XmlLanguage" /> statica come se fosse creata da <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> con il tag della lingua come una stringa attributo vuoto.</summary>
        <value>La versione del tag della lingua vuoto di <see cref="T:System.Windows.Markup.XmlLanguage" />, da utilizzare nelle operazioni di confronto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo valore è attiva la <xref:System.Windows.Markup.XmlLanguage> corrispondente a <xref:System.String.Empty?displayProperty=nameWithType>, il cui <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> risultato è <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce l’appropriato equivalente <see cref="T:System.Globalization.CultureInfo" /> per <see cref="T:System.Windows.Markup.XmlLanguage" />, se e solo se un <see cref="T:System.Globalization.CultureInfo" /> è registrato per il valore <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> di <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>
          <see cref="T:System.Globalization.CultureInfo" /> che può essere utilizzato per le chiamate alle API di globalizzazione o localizzazione che accettano tale tipo come argomento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se nessun equivalente <xref:System.Globalization.CultureInfo> può essere prodotta, questo metodo genera un'eccezione. Se non si desidera gestire le eccezioni, chiamare <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A> invece.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Non esiste alcun <see cref="T:System.Globalization.CultureInfo" /> registrato per il <see cref="T:System.Windows.Markup.XmlLanguage" /> fornito, come determinato da una chiamata a <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">Una stringa del linguaggio RFC 3066 o una stringa vuota.</param>
        <summary>Restituisce un'istanza <see cref="T:System.Windows.Markup.XmlLanguage" />, in base a una stringa che rappresenta il linguaggio per RFC 3066.</summary>
        <returns>Un nuovo <see cref="T:System.Windows.Markup.XmlLanguage" /> con la stringa fornita come valore <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è in modo efficace il costruttore.  
  
 La stringa di lingua può essere vuota oppure deve essere conforme alle [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454) regole:  
  
-   Il primo sottotag deve essere costituito solo [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] lettere.  
  
-   Devono essere composta da sottotag aggiuntivi [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] lettere o numeri.  
  
-   Sottotag sono separati da un carattere trattino.  
  
-   Ogni sottotag deve essere da 1 a 8 caratteri.  
  
-   Non sono consentiti trattini iniziali o finali.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Il parametro <paramref name="ietfLanguageTag" /> non può essere null.</exception>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="ietfLanguageTag" /> è non vuoto, ma non è conforme alla sintassi specificata in RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce l’oggetto <see cref="T:System.Globalization.CultureInfo" /> maggiormente correlato non neutro per <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns>Un <see cref="T:System.Globalization.CultureInfo" /> che può essere utilizzato per le chiamate a [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] di globalizzazione o localizzazione che accettano tale tipo come argomento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo <xref:System.Windows.Markup.XmlLanguage> è uguale a <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType> questo metodo restituirà <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 Questo metodo individua registrato <xref:System.Globalization.CultureInfo> corrispondente al prefisso più lungo possibile di questo <xref:System.Windows.Markup.XmlLanguage>. Se registrati <xref:System.Globalization.CultureInfo> neutro (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> è `true`), questo metodo si basa su una chiamata a <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> per eseguire il mapping da un neutro <xref:System.Globalization.CultureInfo> a uno specifico.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nessun oggetto <see cref="T:System.Globalization.CultureInfo" /> correlato non neutro è stato registrato per gli oggetti <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> correnti.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la rappresentazione in forma di stringa del tag della lingua.</summary>
        <value>La rappresentazione in forma di stringa del tag della lingua.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà può restituire una versione normalizzata della stringa specificata in origine come fornita a <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 Questa proprietà può inoltre restituire <xref:System.String.Empty> se è stata fornita una stringa vuota per <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un oggetto <see cref="T:System.String" /> che rappresenta l'elemento <see cref="T:System.Windows.Markup.XmlLanguage" /> corrente.</summary>
        <returns>Oggetto <see cref="T:System.String" /> che rappresenta l'oggetto <see cref="T:System.Windows.Markup.XmlLanguage" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Restituisce il <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> valore dell'oggetto corrente <xref:System.Windows.Markup.XmlLanguage>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>