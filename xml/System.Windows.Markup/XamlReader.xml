<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="576d952bef27932173a6f1898d9b6f595dd80d4a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37502542" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Legge l'input XAML e crea un oggetto grafico utilizzando il reader XAML predefinito di WPF e un writer di oggetti XAML associato.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sincroni <xref:System.Windows.Markup.XamlReader.Load%2A> metodi sono statici, ma asincrona <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> metodi non sono statici e richiedono un'istanza di <xref:System.Windows.Markup.XamlReader> classe da utilizzare.  
  
 L'output del `Load` metodi è un singolo oggetto, che rappresenta l'oggetto radice di un albero di oggetti creata o un oggetto grafico. Gli oggetti grafici che vengono creati da <xref:System.Windows.Markup.XamlReader> vengono generalmente aggiunti all'albero di oggetti esistenti di un'applicazione WPF in fase di esecuzione. In caso contrario, il nuovo oggetto grafico viene considerato disconnesso ai fini del modello dell'applicazione WPF. Ciò significa che non esegue il rendering e non può essere a cui si accede utilizzando una delle tecniche di albero di oggetti come applicato a albero a oggetti principale dell'applicazione WPF (ad esempio, le API <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>). Per altre informazioni su concetti relativi alla struttura ad albero di oggetti, vedere [strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader> supporta gli scenari principali seguenti:  
  
-   **La clonazione/oggetto factory**: senza altri meccanismi, un tipo di riferimento non può essere incluso a livello generale in più di una posizione in un albero di oggetti WPF. (Esempi di meccanismi aggiuntivi che offrono supporto per la condivisione o riutilizzare in WPF gli oggetti che dipendono <xref:System.Windows.Freezable>, o il supporto per oggetti comunemente condivisibili, ad esempio <xref:System.Windows.Media.Brush> cui viene fatto riferimento come un elemento da un <xref:System.Windows.ResourceDictionary>.) Per clonare un oggetto che è già in albero degli oggetti è possibile serializzare l'oggetto usando <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>. Utilizzare quindi la stringa serializzata come input per una chiamata a <xref:System.Windows.Markup.XamlReader.Load%2A>, con un flusso o <xref:System.Xml.XmlReader> come intermediario.  
  
-   **Costruzione di oggetti in base alle informazioni di just-in-time**: spesso esistono altri modi per avere un'associazione tardiva o fornita dall'utente modificano lo stato degli oggetti esistenti. Ad esempio si potrebbe usare lo stesso valore per impostare più di una proprietà oppure usare il data binding. Ma se si dispone di uno scenario in cui anche il tipo di oggetto da creare è determinabile solo in fase di esecuzione o l'intervento dell'utente, quindi la creazione di un oggetto di questo tipo tramite la compilazione di una stringa per <xref:System.Windows.Markup.XamlReader.Load%2A> input è spesso una tecnica utile.  
  
-   **Usando le tecniche di risorse esistenti**: il <xref:System.IO.Stream> tipo viene usato spesso in altri framework o tecnologie per il trasferimento dei dati o oggetti attraverso i limiti dell'applicazione o per situazioni analoghe. È quindi possibile usare il <xref:System.IO.Stream> tecniche per archiviare o ottenere i dati in formato XAML utilizzato alla fine per creare un oggetto come parte dell'applicazione.  
  
-   **Documenti statici:** l'applicazione potrebbe caricare documenti XPS locali o scaricati per l'inclusione in un albero di oggetti dell'applicazione WPF e dell'interfaccia utente.  
  
> [!NOTE]
>  In alcuni casi questa documentazione descrive un oggetto grafico, a differenza di un albero di oggetti. Una relazione padre-figlio strict non sempre esiste in relazioni tra oggetti la fase di esecuzione di un'applicazione WPF fase di esecuzione, in modo che un oggetto grafico è una terminologia più ampiamente applicabile. Tuttavia, poiché WPF include anche due API di concettualizzazione albero diverso (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) la metafora dell'albero è comunque applicabile alla maggior parte dei casi reali in WPF. Dalla prospettiva del linguaggio XAML, tuttavia, l'oggetto grafico è spesso il modo migliore per pensare a come gli oggetti vengono creati da XAML, poiché il linguaggio XAML stesso non specifica necessariamente le metodologie di classe helper che forniscano le relazioni più in un struttura ad albero nuovamente.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Sicurezza dall'accesso di codice e XAML Loose XamlReader  
 XAML è un linguaggio di markup che rappresenta direttamente la creazione di istanze di oggetti e la relativa esecuzione. Gli elementi creati in XAML, pertanto, hanno la stessa capacità di interagire con risorse di sistema (quali accesso di rete e IO file system) del codice generato equivalente.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] supporta il [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] framework di sicurezza [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]. Di conseguenza, il contenuto [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] in esecuzione nell'area Internet dispone di autorizzazioni di esecuzione ridotte. In questa area Internet vengono in genere eseguiti il codice "XAML separato", ovvero pagine di XAML non compilato interpretato in fase di caricamento da parte di un visualizzatore XAML, e l'[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)], che usano lo stesso set di autorizzazioni.  Il codice XAML caricato in un'applicazione completamente attendibile, tuttavia, dispone dello stesso accesso alle risorse di sistema dell'applicazione host. Per altre informazioni, vedere [Sicurezza con attendibilità parziale in WPF](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 Le implicazioni di queste istruzioni per <xref:System.Windows.Markup.XamlReader> è che la progettazione dell'applicazione deve prendere decisioni sull'attendibilità di XAML si decide di carico. Se si sta caricando XAML non attendibile, è consigliabile implementare il proprio tecnica sandboxing per la procedura per caricare l'oggetto grafico risultante.  
  
 <xref:System.Windows.Markup.XamlReader> può anche essere chiamato da codice parzialmente attendibile. In questo caso, area Internet viene applicato per la sicurezza dall'accesso di codice. Se qualsiasi elemento in XAML il caricamento non è valida con area di sicurezza di Internet, viene generata un'eccezione di analisi XAML. Nella sezione XBAP e altri casi che vengono parzialmente attendibile a livello di piattaforma, in cui <xref:System.Windows.Markup.XamlReader> fa parte dell'esecuzione, ottenere lo stesso comportamento di eccezione come con le chiamate esplicite parzialmente attendibili.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>XAML di WPF, i lettori o writer XAML e il controllo delle versioni del linguaggio XAML  
 [!INCLUDE[xaml2009](~/includes/xaml2009-md.md)] include le funzionalità del linguaggio quali e. È possibile usare le firme dei `Load` o `Parse` caricamento XAML che Usa queste funzionalità. Tuttavia, le funzionalità del linguaggio non sono supportati per XAML che deve essere compilato markup (ad esempio XAML per il **pagina** azione in un'applicazione WPF o qualsiasi XAML che coinvolge l'attività di compilazione del markup nelle operazioni di compilazione di compilazione).  
  
 I tipi di WPF e la tecnologia WPF supportano in genere i concetti che si basano sull'accesso a elementi interni WPF. Ad esempio, come WPF implementa le proprietà di dipendenza si basa su tecniche interne per la ricerca efficiente di tipi o membri. Accesso a questi elementi interni è abilitata per il XAML la lettura e la scrittura delle API disponibili in <xref:System.Windows.Markup.XamlWriter> e <xref:System.Windows.Markup.XamlReader> dal <xref:System.Windows.Markup> dello spazio dei nomi e nell'assembly PresentationFramework. Tuttavia, i lettori di basso livello XAML e writer XAML dall'assembly System. XAML (classi di basano <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) non sono disponibili per gli elementi interni WPF. Non è presente alcuna dipendenza da System. XAML a qualsiasi assembly specifiche di WPF. Senza accesso per gli elementi interni WPF, writers e readers System. XAML in modo corretto non è possibile caricare o salvare WPF tutti i tipi o i tipi basano su tipi WPF. In particolare, System. XAML lettori e writer non comprendere concetti, ad esempio la proprietà di dipendenza WPF archivio di proprietà o tutte le specifiche del modo in cui WPF utilizza stili, nei dizionari risorse e modelli sottostante. Pertanto è necessario effettuare una scelta:  
  
-   Se si caricano i tipi di WPF e/o si usa XAML nel modulo BAML in alcun modo, utilizzare i lettori di PresentationFramework XAML e writer XAML.  
  
-   Se non si affidarsi a tutti i tipi WPF o il modulo BAML di XAML e non si usa di un'altra tecnologia specifica reader XAML o implementazione del writer XAML per motivi specifici per tale framework, usare i lettori di XAML System. XAML e writer XAML.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System. XAML in .NET 4 implementazione di supporto  
 <xref:System.Windows.Markup.XamlReader> è la superficie API disponibile per il parser XAML a livello di framework WPF. Il parser XAML sottostante stesso esegue inoltre il XAML in fase di esecuzione, il caricamento e l'analisi per le applicazioni WPF destinate [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] e [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].  
  
 Se la destinazione [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], l'API esterna è lo stesso, ma le parti dell'implementazione si basano sul [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] generale implementazione XAML nell'assembly System. XAML, che migliora molti aspetti tecnici e creazione di report di analisi XAML. Targeting [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] necessariamente i tipi definiti dal comporta inclusi System. XAML come riferimento e i dettagli dell'implementazione, ad esempio le eccezioni segnalate possono provenire da System. Xaml.  
  
## Examples  
 L'esempio seguente converte un <xref:System.Windows.Controls.Button> in una stringa usando il <xref:System.Windows.Markup.XamlWriter> classe.  La stringa viene quindi caricata in un <xref:System.Windows.Controls.Button> usando il metodo statico <xref:System.Windows.Markup.XamlReader.Load%2A> metodo su di <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Interrompe l'operazione di caricamento asincrona corrente, se ne è presente una in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> è un'operazione asincrona; di conseguenza, alcune caricamento può verificarsi prima che l'operazione viene interrotta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un oggetto <see cref="T:System.Xaml.XamlSchemaContext" /> che rappresenta le impostazioni del contesto dello schema WPF per un <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <returns>Oggetto <see cref="T:System.Xaml.XamlSchemaContext" /> che rappresenta le impostazioni del contesto dello schema WPF per un <see cref="T:System.Windows.Markup.XamlReader" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legge l'input XAML e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XAML da caricare in formato di flusso.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce un <see cref="T:System.Object" /> che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente salva una <xref:System.Windows.Controls.Button> in un <xref:System.IO.MemoryStream> usando il <xref:System.Windows.Markup.XamlWriter> classe. Il flusso viene quindi caricato in un <xref:System.Windows.Controls.Button> usando il metodo statico <xref:System.Windows.Markup.XamlReader.Load%2A> metodo su di <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Un oggetto <see cref="T:System.Xaml.XamlReader" />. È previsto che venga inizializzato con l'input XAML.</param>
        <summary>Legge l'input XAML tramite un oggetto <see cref="T:System.Xaml.XamlReader" /> specificato e restituisce un oggetto che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'input <xref:System.Xaml.XamlReader> può essere <xref:System.Windows.Baml2006.Baml2006Reader>. Si tratta di come è possibile caricare BAML in fase di esecuzione, o per scopi di strumento di localizzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> che ha già caricato l'input XAML da caricare in formato XML.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.Xml.XmlReader" /> specificato e restituisce un oggetto che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente converte un <xref:System.Windows.Controls.Button> in una stringa usando il <xref:System.Windows.Markup.XamlWriter> classe.  La stringa viene quindi caricata in un <xref:System.Windows.Controls.Button> usando il metodo statico <xref:System.Windows.Markup.XamlReader.Load%2A> metodo su di <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso che contiene l'input XAML da caricare.</param>
        <param name="parserContext">Informazioni di contesto utilizzate dal parser.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce un oggetto che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.  - oppure - <paramref name="parserContext" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legge il markup XAML e restituisce un oggetto che corrisponde alla radice del markup specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso contenente l'input XAML da caricare.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'operazione asincrona di caricamento XAML inizialmente restituirà un oggetto che è semplicemente l'oggetto radice. In modo asincrono, quindi l'analisi di XAML continua e tutti gli oggetti figlio vengono compilati nella radice. In contrasto con il XAML WPF tipica l'elaborazione di comportamento e l'interazione con i concetti WPF di durata degli oggetti. Nell'interazione tipico (non-async), tutte le proprietà di un oggetto tra tutte le raccolte figlio vengono compilate prima della restituzione di un elemento e che ne venga segnalato come caricati. Questo comportamento equivale a una metodologia dal basso in alto per creare la struttura ad albero in cui l'oggetto radice è l'ultimo oggetto diventi disponibile.  
  
 È in genere l'oggetto restituito a una determinata posizione nell'albero di oggetti dell'applicazione WPF, con le informazioni che il contenuto potrebbe essere ancora in corso di riempimento e potrebbe causare gli aggiornamenti incrementali del layout se tutto il contenuto viene esposto come parte dell'interfaccia utente. Per questo motivo, in genere per isolare o virtualizzare gli oggetti caricati in modo asincrono da XAML e da usare per la logica specifica dell'applicazione o lo stato dell'applicazione a invia una notifica quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene gestita.  
  
 Affinché <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> per il caricamento XAML in modo asincrono di input, l'elemento radice di XAML di input deve contenere l'attributo e valore `x:SynchronousMode="Async"`. Il valore viene considerato la distinzione tra maiuscole e minuscole. Se la radice di input XAML non contiene `x:SynchronousMode="Async"`, viene generata alcuna eccezione e la chiamata viene elaborata come un caricamento sincrono (vedere <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).  
  
 Una sola operazione di caricamento asincrona per ogni istanza del <xref:System.Windows.Markup.XamlReader> classe può essere eseguita contemporaneamente.  Se più di un'operazione asincrona viene tentata la stessa istanza del <xref:System.Windows.Markup.XamlReader> classe un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Più operazioni di caricamento sono lasciate in sospeso contemporaneamente con lo stesso <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Xml.XmlReader" /> esistente che ha già caricato/letto l'input XAML.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.Xml.XmlReader" /> specificato e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'operazione asincrona di caricamento XAML inizialmente restituirà un oggetto che è semplicemente l'oggetto radice. In modo asincrono, quindi l'analisi di XAML continua e tutti gli oggetti figlio vengono compilati nella radice. In contrasto con il XAML WPF tipica l'elaborazione di comportamento e l'interazione con i concetti WPF di durata degli oggetti. Nell'interazione tipico (non-async), tutte le proprietà di un oggetto tra tutte le raccolte figlio vengono compilate prima della restituzione di un elemento e che ne venga segnalato come caricati. Questo comportamento equivale a una metodologia dal basso in alto per creare la struttura ad albero in cui l'oggetto radice è l'ultimo oggetto diventi disponibile.  
  
 È in genere necessario assegnare l'oggetto restituito da <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> a una determinata posizione nell'albero di oggetti dell'applicazione, con le informazioni che contenute potrebbero ancora essere compilato e potrebbe causare gli aggiornamenti incrementali del layout se tutto il contenuto viene esposto come parte di INTERFACCIA UTENTE. Per questo motivo, in genere per isolare o virtualizzare gli oggetti caricati in modo asincrono da XAML e da usare per la logica specifica dell'applicazione o lo stato dell'applicazione a invia una notifica quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene gestita.  
  
 Affinché <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> per il caricamento XAML in modo asincrono di input, l'elemento radice nel markup XAML deve contenere l'attributo e valore `x:SynchronousMode="Async"`. Il valore viene considerato la distinzione tra maiuscole e minuscole. Se la radice del markup XAML non contiene `x:SynchronousMode="Async"`, viene generata alcuna eccezione e la chiamata viene elaborata invece come un caricamento sincrono (vedere <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).  
  
 Una sola operazione di caricamento asincrona per ogni istanza del <xref:System.Windows.Markup.XamlReader> classe può essere eseguita contemporaneamente.  Se più di un'operazione asincrona viene tentata la stessa istanza del <xref:System.Windows.Markup.XamlReader> classe un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Più operazioni di caricamento sono eseguite contemporaneamente con lo stesso <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso contenente l'input XAML da caricare.</param>
        <param name="parserContext">Informazioni di contesto utilizzate dal parser.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'operazione asincrona di caricamento XAML inizialmente restituirà un oggetto che è semplicemente l'oggetto radice. In modo asincrono, quindi l'analisi di XAML continua e tutti gli oggetti figlio vengono compilati nella radice. In contrasto con il XAML WPF tipica l'elaborazione di comportamento e l'interazione con i concetti WPF di durata degli oggetti. Nell'interazione tipico (non-async), tutte le proprietà di un oggetto tra tutte le raccolte figlio vengono compilate prima della restituzione di un elemento e che ne venga segnalato come caricati. Questo comportamento equivale a una metodologia dal basso in alto per creare la struttura ad albero in cui l'oggetto radice è l'ultimo oggetto diventi disponibile.  
  
 È in genere l'oggetto restituito a una determinata posizione nell'albero di oggetti dell'applicazione, con le informazioni che il contenuto potrebbe essere ancora in corso di riempimento e potrebbe causare gli aggiornamenti incrementali del layout se tutto il contenuto viene esposto come parte dell'interfaccia utente. Per questo motivo, in genere per isolare o virtualizzare gli oggetti caricati in modo asincrono da XAML e da usare per la logica specifica dell'applicazione o lo stato dell'applicazione a invia una notifica quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene gestita.  
  
 Affinché <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> per caricare in modo asincrono markup, l'elemento radice nel markup XAML deve contenere l'attributo e valore `x:SynchronousMode="Async"`. Il valore viene considerato la distinzione tra maiuscole e minuscole. Se la radice del markup XAML non contiene `x:SynchronousMode="Async"`, viene generata alcuna eccezione e la chiamata viene elaborata come un caricamento sincrono (vedere <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).  
  
 Una sola operazione di caricamento asincrona per ogni istanza del <xref:System.Windows.Markup.XamlReader> classe può essere eseguita contemporaneamente.  Se più di un'operazione asincrona viene tentata la stessa istanza del <xref:System.Windows.Markup.XamlReader> classe un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Più operazioni di caricamento sono eseguite contemporaneamente con lo stesso <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al completamento di un'operazione di caricamento asincrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene generato anche quando si interrompe un'operazione di caricamento asincrona.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legge il markup nella stringa di testo specificata e restituisce un oggetto corrispondente alla radice del markup specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">Input XAML come singola stringa di testo.</param>
        <summary>Legge l'input XAML nella stringa di testo specificata e restituisce un oggetto corrispondente alla radice del markup specificato.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione chiama <xref:System.Windows.Markup.XamlReader.Load%2A> internamente dopo la creazione di un flusso dalla stringa. Vedere <xref:System.Windows.Markup.XamlReader.Load%2A> per altre informazioni, ad esempio le eccezioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">Input XAML come singola stringa di testo.</param>
        <param name="parserContext">Informazioni di contesto utilizzate dal parser.</param>
        <summary>Legge il markup XAML nella stringa di testo specificata, utilizzando un oggetto <see cref="T:System.Windows.Markup.ParserContext" /> specificato, e restituisce un oggetto corrispondente alla radice del markup specificato.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione chiama <xref:System.Windows.Markup.XamlReader.Load%2A> internamente dopo la creazione di un flusso dalla stringa. Vedere <xref:System.Windows.Markup.XamlReader.Load%2A> per altre informazioni, ad esempio le eccezioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>