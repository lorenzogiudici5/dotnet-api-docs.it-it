<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb6251512dd75740e1b01a33ceb7e3470f3a68d1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30660625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Legge l'input XAML e crea un oggetto grafico utilizzando il reader XAML predefinito di WPF e un writer di oggetti XAML associato.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sincroni <xref:System.Windows.Markup.XamlReader.Load%2A> metodi sono statici, ma asincrona <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> metodi non sono statici e richiedono un'istanza di <xref:System.Windows.Markup.XamlReader> classe da utilizzare.  
  
 L'output del `Load` metodi è un singolo oggetto, che rappresenta l'oggetto radice della struttura a oggetti o oggetto grafico. Gli oggetti grafici creati da <xref:System.Windows.Markup.XamlReader> in genere aggiunti all'albero degli oggetti esistenti di un'applicazione WPF in fase di esecuzione. In caso contrario il nuovo oggetto grafico viene considerato disconnesso per scopi di modello dell'applicazione WPF. Ciò significa che non esegue il rendering e non è accessibile mediante una delle tecniche di struttura ad albero di oggetti come applicati alla struttura a oggetti principale dell'applicazione WPF (ad esempio, le API <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>). Per ulteriori informazioni su concetti relativi alla struttura ad albero di oggetti, vedere [alberi in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader> supporta gli scenari principali seguenti:  
  
-   **La clonazione/oggetto factory**: senza meccanismi aggiuntivi, un tipo di riferimento non può essere incluso in genere più di una posizione in un albero WPF di oggetti. (Esempi di meccanismi aggiuntivi che offrono supporto per la condivisione o riutilizzare in WPF sono gli oggetti basati su <xref:System.Windows.Freezable>, o supporto per gli oggetti comunemente condivisibili, ad esempio <xref:System.Windows.Media.Brush> cui viene fatto riferimento come un elemento da un <xref:System.Windows.ResourceDictionary>.) Un modo per duplicare un oggetto che è già presente nell'albero degli oggetti è per serializzare l'oggetto usando <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>. Utilizzare quindi la stringa serializzata come input per una chiamata a <xref:System.Windows.Markup.XamlReader.Load%2A>, con un flusso o <xref:System.Xml.XmlReader> come intermediario.  
  
-   **Costruzione di oggetti in base alle informazioni di just-in-time**: ci sono spesso altri modi per avere un'associazione tardiva o fornito dall'utente modificano lo stato degli oggetti esistenti. Ad esempio Impossibile utilizzare lo stesso valore per impostare più di una proprietà o utilizzare l'associazione dati. Ma se si dispone di uno scenario in cui il tipo di oggetto da creare è solo determinare in fase di esecuzione o l'intervento dell'utente, quindi la creazione di un oggetto di questo tipo tramite la compilazione di una stringa per <xref:System.Windows.Markup.XamlReader.Load%2A> input è spesso una tecnica utile.  
  
-   **Utilizzando le tecniche di risorse esistente**: il <xref:System.IO.Stream> tipo viene utilizzato frequentemente in altri framework o tecnologie per il trasferimento di dati o oggetti attraverso i limiti di applicazione o in situazioni simili. È quindi possibile utilizzare il <xref:System.IO.Stream> tecniche per archiviare o ottenere i dati in formato XAML eventualmente utilizzato per creare un oggetto come parte dell'applicazione.  
  
-   **Documenti statici:** l'applicazione potrebbe caricare locali o scaricati documenti XPS per l'inclusione in un albero di oggetti dell'applicazione WPF e l'interfaccia utente.  
  
> [!NOTE]
>  In alcuni casi questa documentazione descrive un oggetto grafico, anziché una struttura ad albero. Una relazione padre-figlio rigorosa non esistono sempre nelle relazioni tra oggetti della fase di esecuzione di un'applicazione WPF fase di esecuzione, pertanto un oggetto grafico è una terminologia maggiormente applicabile. Tuttavia, poiché WPF include anche due API di concettualizzazione albero diverso (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) la metafora dell'albero è comunque applicabile alla maggior parte dei casi reali in WPF. Dalla prospettiva del linguaggio XAML, tuttavia, l'oggetto grafico è spesso il modo migliore per considerare come gli oggetti vengono creati da XAML, poiché il linguaggio XAML stesso non specifica necessariamente le metodologie di classe helper che determinano le relazioni più in un struttura ad albero di nuovo.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Sicurezza dall'accesso di codice XAML separato e XamlReader  
 XAML è un linguaggio di markup che rappresenta direttamente la creazione di istanze di oggetti e la relativa esecuzione. Gli elementi creati in XAML, pertanto, hanno la stessa capacità di interagire con risorse di sistema (quali accesso di rete e IO file system) del codice generato equivalente.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] supporta il [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] framework di sicurezza [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]. Di conseguenza, il contenuto [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] in esecuzione nell'area Internet dispone di autorizzazioni di esecuzione ridotte. In questa area Internet vengono in genere eseguiti il codice "XAML separato", ovvero pagine di XAML non compilato interpretato in fase di caricamento da parte di un visualizzatore XAML, e l'[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)], che usano lo stesso set di autorizzazioni.  Il codice XAML caricato in un'applicazione completamente attendibile, tuttavia, dispone dello stesso accesso alle risorse di sistema dell'applicazione host. Per altre informazioni, vedere [Sicurezza con attendibilità parziale in WPF](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 Le implicazioni di queste istruzioni per <xref:System.Windows.Markup.XamlReader> che la progettazione dell'applicazione deve prendere decisioni sull'attendibilità XAML si decide di carico. Se si sta caricando il codice XAML che non è attendibile, è consigliabile implementare la propria tecnica sandboxing per come si carica l'oggetto grafico risultante.  
  
 <xref:System.Windows.Markup.XamlReader> può anche essere chiamato da codice parzialmente attendibile. In questo caso, l'area Internet viene applicato per la sicurezza dall'accesso di codice. Se qualsiasi elemento nel codice XAML caricato non è valido nell'area di sicurezza di Internet, viene generata un'eccezione di analisi XAML. Sotto XBAP e gli altri casi parzialmente attendibili a livello di piattaforma, in cui <xref:System.Windows.Markup.XamlReader> fa parte dell'esecuzione, si ottiene lo stesso comportamento di eccezione come con le chiamate esplicite parzialmente attendibili.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>Controllo delle versioni del linguaggio XAML, reader/writer XAML e XAML WPF  
 [!INCLUDE[xaml2009](~/includes/xaml2009-md.md)] include le funzionalità del linguaggio quali e. È possibile utilizzare le firme di `Load` o `Parse` per caricare codice XAML che Usa queste funzionalità. Tuttavia, non sono supportati le funzionalità del linguaggio per XAML che deve essere compilata (ad esempio il codice XAML per la **pagina** azione in un'applicazione WPF o qualsiasi XAML che implica l'attività di compilazione del markup nelle operazioni di compilazione di compilazione).  
  
 Tipi WPF e la tecnologia WPF in genere supportano concetti che si basano sull'accesso a elementi interni WPF. Ad esempio, la modalità di implementazione delle proprietà di dipendenza in WPF si basa su tecniche interne per la ricerca efficiente del membro di tipo. Accesso a questi elementi interni è abilitato per la lettura e scrittura le API disponibili XAML <xref:System.Windows.Markup.XamlWriter> e <xref:System.Windows.Markup.XamlReader> dal <xref:System.Windows.Markup> dello spazio dei nomi e nell'assembly PresentationFramework. Tuttavia, il reader di basso livello XAML e writer XAML implementati dall'assembly System. XAML (classi basate su <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) non hanno accesso agli elementi interni WPF. Non è presente alcuna dipendenza da System. XAML a qualsiasi assembly WPF specifiche. Senza l'accesso a elementi interni WPF, writers e readers System. XAML in modo corretto non è possibile caricare o salvare WPF tutti i tipi, o tipi basano sui tipi WPF. In particolare, il reader XAML e writer non compreso concetti quali la proprietà di dipendenza WPF archivio delle proprietà o tutte le specifiche di WPF viene usato come stili, dizionari risorse e i modelli sottostante. Pertanto, è necessario effettuare una scelta:  
  
-   Se si caricano i tipi di WPF e/o si utilizza XAML nel modulo BAML in alcun modo, è possibile utilizzare i lettori PresentationFramework XAML e writer XAML.  
  
-   Se non si utilizza i tipi WPF o il modulo BAML di XAML e non si usa un'altra area tecnologica specifica reader XAML o implementazione del writer XAML per motivi specifici di tale framework, usare il reader XAML e writer XAML.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System. XAML in .NET 4 implementazione di supporto  
 <xref:System.Windows.Markup.XamlReader> è la superficie API disponibile per il parser XAML a livello di framework WPF. Lo stesso parser XAML sottostante esegue inoltre il codice XAML in fase di esecuzione, il caricamento e l'analisi per le applicazioni WPF che hanno come destinazione [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] e [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].  
  
 Se la destinazione è [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], l'API esterna è lo stesso, ma vengono compilate le parti dell'implementazione [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] generale implementazione XAML nell'assembly System. XAML, migliorando molti aspetti tecnici e creazione di report di analisi XAML. Destinazione [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] necessariamente i tipi definiti dal comporta anche System. XAML come un riferimento e i dettagli dell'implementazione, ad esempio le eccezioni riportate possono derivare da System. Xaml.  
  
## Examples  
 L'esempio seguente converte un <xref:System.Windows.Controls.Button> in una stringa utilizzando la <xref:System.Windows.Markup.XamlWriter> classe.  La stringa viene quindi caricata in un <xref:System.Windows.Controls.Button> mediante il <xref:System.Windows.Markup.XamlReader.Load%2A> metodo la <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Interrompe l'operazione di caricamento asincrona corrente, se ne è presente una in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> è un'operazione asincrona. Pertanto, può avvenire un caricamento prima che l'operazione viene interrotta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un oggetto <see cref="T:System.Xaml.XamlSchemaContext" /> che rappresenta le impostazioni del contesto dello schema WPF per un <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <returns>Oggetto <see cref="T:System.Xaml.XamlSchemaContext" /> che rappresenta le impostazioni del contesto dello schema WPF per un <see cref="T:System.Windows.Markup.XamlReader" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legge l'input XAML e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XAML da caricare in formato di flusso.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce un <see cref="T:System.Object" /> che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente viene salvato un <xref:System.Windows.Controls.Button> in un <xref:System.IO.MemoryStream> utilizzando la <xref:System.Windows.Markup.XamlWriter> classe. Il flusso viene quindi caricato in un <xref:System.Windows.Controls.Button> mediante il <xref:System.Windows.Markup.XamlReader.Load%2A> metodo la <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Un oggetto <see cref="T:System.Xaml.XamlReader" />. È previsto che venga inizializzato con l'input XAML.</param>
        <summary>Legge l'input XAML tramite un oggetto <see cref="T:System.Xaml.XamlReader" /> specificato e restituisce un oggetto che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'input <xref:System.Xaml.XamlReader> può essere <xref:System.Windows.Baml2006.Baml2006Reader>. Si tratta di come è possibile caricare BAML in fase di esecuzione, o per scopi di strumento di localizzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> che ha già caricato l'input XAML da caricare in formato XML.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.Xml.XmlReader" /> specificato e restituisce un oggetto che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente converte un <xref:System.Windows.Controls.Button> in una stringa utilizzando la <xref:System.Windows.Markup.XamlWriter> classe.  La stringa viene quindi caricata in un <xref:System.Windows.Controls.Button> mediante il <xref:System.Windows.Markup.XamlReader.Load%2A> metodo la <xref:System.Windows.Markup.XamlReader> classe.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso che contiene l'input XAML da caricare.</param>
        <param name="parserContext">Informazioni di contesto utilizzate dal parser.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce un oggetto che sarà la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="parserContext" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legge il markup XAML e restituisce un oggetto che corrisponde alla radice del markup specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso contenente l'input XAML da caricare.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Oggetto che sarà la radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'operazione asincrona di caricamento XAML inizialmente restituirà un oggetto che è semplicemente l'oggetto radice. In modo asincrono, quindi l'analisi XAML continua e tutti gli oggetti figlio vengono compilati nella radice. Ciò si differenzia il tipico di elaborazione XAML WPF comportamento e l'interazione con i concetti WPF della durata dell'oggetto. Nell'interazione tipica (non-async), tutte le proprietà di un oggetto tra tutte le raccolte figlio vengono riempite prima di restituire un elemento e ne venga segnalato il caricamento. Questo comportamento corrisponde a una metodologia dal basso in alto per creare la struttura ad albero in cui l'oggetto radice è l'ultimo oggetto diventi disponibile.  
  
 È in genere l'oggetto restituito a una determinata posizione nell'albero di oggetti dell'applicazione WPF, con le informazioni che il contenuto potrebbe essere ancora in corso di riempimento e potrebbe provocare aggiornamenti incrementali del layout se l'intero contenuto viene esposto come parte dell'interfaccia utente. Per questo motivo, in genere per isolare o virtualizzare gli oggetti in modo asincrono caricati da XAML e utilizzare logica specifica dell'applicazione o lo stato dell'applicazione per notificare quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene gestita.  
  
 Affinché <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> per caricare XAML di input in modo asincrono, l'elemento radice nel codice XAML di input deve contenere l'attributo e valore `x:SynchronousMode="Async"`. Il valore viene considerato come la distinzione tra maiuscole e minuscole. Se la radice di input XAML non contiene `x:SynchronousMode="Async"`, viene generata alcuna eccezione e la chiamata viene elaborata come un caricamento sincrono (vedere <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).  
  
 Per ogni istanza di una sola operazione di caricamento asincrona la <xref:System.Windows.Markup.XamlReader> classe può essere eseguita contemporaneamente.  Se più di un'operazione asincrona viene tentata la stessa istanza del <xref:System.Windows.Markup.XamlReader> classe un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Più operazioni di caricamento sono lasciate in sospeso contemporaneamente con lo stesso <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Xml.XmlReader" /> esistente che ha già caricato/letto l'input XAML.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.Xml.XmlReader" /> specificato e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'operazione asincrona di caricamento XAML inizialmente restituirà un oggetto che è semplicemente l'oggetto radice. In modo asincrono, quindi l'analisi XAML continua e tutti gli oggetti figlio vengono compilati nella radice. Ciò si differenzia il tipico di elaborazione XAML WPF comportamento e l'interazione con i concetti WPF della durata dell'oggetto. Nell'interazione tipica (non-async), tutte le proprietà di un oggetto tra tutte le raccolte figlio vengono riempite prima di restituire un elemento e ne venga segnalato il caricamento. Questo comportamento corrisponde a una metodologia dal basso in alto per creare la struttura ad albero in cui l'oggetto radice è l'ultimo oggetto diventi disponibile.  
  
 È in genere consigliabile assegnare l'oggetto restituito da <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> a una determinata posizione nell'albero di oggetti dell'applicazione, con le informazioni di contenuto che potrebbe essere ancora in corso di riempimento e potrebbe provocare aggiornamenti incrementali del layout se l'intero contenuto viene esposto come parte di INTERFACCIA UTENTE. Per questo motivo, in genere per isolare o virtualizzare gli oggetti in modo asincrono caricati da XAML e utilizzare logica specifica dell'applicazione o lo stato dell'applicazione per notificare quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene gestita.  
  
 Affinché <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> per caricare XAML di input in modo asincrono, l'elemento radice nel markup XAML deve contenere l'attributo e valore `x:SynchronousMode="Async"`. Il valore viene considerato come la distinzione tra maiuscole e minuscole. Se il markup XAML non contiene `x:SynchronousMode="Async"`, viene generata alcuna eccezione e la chiamata viene invece elaborata come un caricamento sincrono (vedere <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).  
  
 Per ogni istanza di una sola operazione di caricamento asincrona la <xref:System.Windows.Markup.XamlReader> classe può essere eseguita contemporaneamente.  Se più di un'operazione asincrona viene tentata la stessa istanza del <xref:System.Windows.Markup.XamlReader> classe un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Più operazioni di caricamento sono eseguite contemporaneamente con lo stesso <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso contenente l'input XAML da caricare.</param>
        <param name="parserContext">Informazioni di contesto utilizzate dal parser.</param>
        <summary>Legge l'input XAML nell'oggetto <see cref="T:System.IO.Stream" /> specificato e restituisce la radice della struttura ad albero di oggetti corrispondente.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'operazione asincrona di caricamento XAML inizialmente restituirà un oggetto che è semplicemente l'oggetto radice. In modo asincrono, quindi l'analisi XAML continua e tutti gli oggetti figlio vengono compilati nella radice. Ciò si differenzia il tipico di elaborazione XAML WPF comportamento e l'interazione con i concetti WPF della durata dell'oggetto. Nell'interazione tipica (non-async), tutte le proprietà di un oggetto tra tutte le raccolte figlio vengono riempite prima di restituire un elemento e ne venga segnalato il caricamento. Questo comportamento corrisponde a una metodologia dal basso in alto per creare la struttura ad albero in cui l'oggetto radice è l'ultimo oggetto diventi disponibile.  
  
 È in genere l'oggetto restituito a una determinata posizione nell'albero di oggetti dell'applicazione, con le informazioni che il contenuto potrebbe essere ancora in corso di riempimento e potrebbe provocare aggiornamenti incrementali del layout se l'intero contenuto viene esposto come parte dell'interfaccia utente. Per questo motivo, in genere per isolare o virtualizzare gli oggetti in modo asincrono caricati da XAML e utilizzare logica specifica dell'applicazione o lo stato dell'applicazione per notificare quando <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene gestita.  
  
 Affinché <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> per caricare in modo asincrono markup, l'elemento radice nel markup XAML deve contenere l'attributo e valore `x:SynchronousMode="Async"`. Il valore viene considerato come la distinzione tra maiuscole e minuscole. Se il markup XAML non contiene `x:SynchronousMode="Async"`, viene generata alcuna eccezione e la chiamata viene elaborata come un caricamento sincrono (vedere <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).  
  
 Per ogni istanza di una sola operazione di caricamento asincrona la <xref:System.Windows.Markup.XamlReader> classe può essere eseguita contemporaneamente.  Se più di un'operazione asincrona viene tentata la stessa istanza del <xref:System.Windows.Markup.XamlReader> classe un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Più operazioni di caricamento sono eseguite contemporaneamente con lo stesso <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al completamento di un'operazione di caricamento asincrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> viene generato anche quando si interrompe un'operazione di caricamento asincrona.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Legge il markup nella stringa di testo specificata e restituisce un oggetto corrispondente alla radice del markup specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">Input XAML come singola stringa di testo.</param>
        <summary>Legge l'input XAML nella stringa di testo specificata e restituisce un oggetto corrispondente alla radice del markup specificato.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione chiama <xref:System.Windows.Markup.XamlReader.Load%2A> internamente dopo la creazione di un flusso dalla stringa. Vedere <xref:System.Windows.Markup.XamlReader.Load%2A> per ulteriori informazioni sulle possibili eccezioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">Input XAML come singola stringa di testo.</param>
        <param name="parserContext">Informazioni di contesto utilizzate dal parser.</param>
        <summary>Legge il markup XAML nella stringa di testo specificata, utilizzando un oggetto <see cref="T:System.Windows.Markup.ParserContext" /> specificato, e restituisce un oggetto corrispondente alla radice del markup specificato.</summary>
        <returns>Radice della struttura ad albero di oggetti creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione chiama <xref:System.Windows.Markup.XamlReader.Load%2A> internamente dopo la creazione di un flusso dalla stringa. Vedere <xref:System.Windows.Markup.XamlReader.Load%2A> per ulteriori informazioni sulle possibili eccezioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>