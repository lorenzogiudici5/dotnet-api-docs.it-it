<Type Name="XmlLanguageConverter" FullName="System.Windows.Markup.XmlLanguageConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="701687780a4f6bb0c4156faac81b67a5ac63d8f0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30657525" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguageConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguageConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguageConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguageConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguageConverter : System::ComponentModel::TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce la conversione dei tipi per la classe <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo convertitore esiste principalmente in modo che l'oggetto esistente `xml:lang` impostazioni in un file XML non interferiscono con l'analisi degli attributi che utilizzano <xref:System.Windows.Markup.XmlLanguage> come tipo sottostante.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XmlLanguage" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlLanguageConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguageConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlLanguageConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.XmlLanguageConverter" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.XmlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (typeDescriptorContext As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, Type ^ sourceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
        <param name="sourceType">Tipo che rappresenta il tipo dal quale si desidera eseguire la conversione.</param>
        <summary>Indica se questo convertitore può convertire un oggetto di un tipo nel tipo <see cref="T:System.Windows.Markup.XmlLanguage" /> supportato da questo convertitore.</summary>
        <returns>
          <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce solo `true` per `sourceType` di <xref:System.String>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XmlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguageConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (typeDescriptorContext As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
        <param name="destinationType">Tipo in cui si desidera effettuare la conversione.</param>
        <summary>Indica se questo convertitore può convertire l'oggetto nel tipo specificato.</summary>
        <returns>
          <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce `true` per `destinationType` di <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor> o `destinationType` di <xref:System.String>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XmlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Globalization.CultureInfo cultureInfo, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, System::Globalization::CultureInfo ^ cultureInfo, System::Object ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
        <param name="cultureInfo">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare come impostazioni cultura correnti.</param>
        <param name="source">Stringa da convertire.</param>
        <summary>Converte il valore di stringa specificato nel tipo <see cref="T:System.Windows.Markup.XmlLanguage" /> supportato da questo convertitore.</summary>
        <returns>Oggetto che rappresenta il valore convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `source` valore deve essere una stringa, in caso contrario viene generata un'eccezione. Se la conversione ha esito positivo, il valore restituito è un <xref:System.Windows.Markup.XmlLanguage>.  
  
 Internamente, questo metodo chiama <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A?displayProperty=nameWithType>. Vedere <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A> per informazioni aggiuntive sull'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Impossibile eseguire la conversione.</exception>
        <altmember cref="T:System.Windows.Markup.XmlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Globalization.CultureInfo cultureInfo, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, System::Globalization::CultureInfo ^ cultureInfo, System::Object ^ value, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
        <param name="cultureInfo">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare come impostazioni cultura correnti.</param>
        <param name="value">Oggetto da convertire. È previsto che sia un tipo <see cref="T:System.Windows.Markup.XmlLanguage" />.</param>
        <param name="destinationType">Tipo che rappresenta il tipo nel quale si desidera eseguire la conversione.</param>
        <summary>Converte l'oggetto <see cref="T:System.Windows.Markup.XmlLanguage" /> indicato nel tipo specificato.</summary>
        <returns>Oggetto che rappresenta il valore convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per `destinationType` <xref:System.String>, questo metodo restituisce il <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> valore dell'oggetto fornito <xref:System.Windows.Markup.XmlLanguage>. Per `destinationType` <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor> questo metodo restituisce un <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor> istanza che è utile per la serializzazione. Altri `destinationType` input generano eccezioni.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Impossibile eseguire la conversione.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationType" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XmlLanguage" />
      </Docs>
    </Member>
  </Members>
</Type>