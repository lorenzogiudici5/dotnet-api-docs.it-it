<Type Name="XamlTypeMapper" FullName="System.Windows.Markup.XamlTypeMapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3d3958120fe26b80e126a09c20e3314d4c834d3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658765" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeMapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeMapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlTypeMapper" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeMapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeMapper" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Esegue il mapping del nome di un elemento XAML all'oggetto <see cref="T:System.Type" /> CLR appropriato negli assembly.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlTypeMapper> fa parte di uno scenario avanzato di WPF che fornisce un contesto alternativo per <xref:System.Windows.Markup.XamlReader> e <xref:System.Windows.Markup.XamlWriter>. Per [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] applicazioni WPF, è consigliabile eseguire l'override <xref:System.Xaml.XamlSchemaContext> per questo scenario, anziché tentare di utilizzare <xref:System.Windows.Markup.XamlTypeMapper>.  
  
 <xref:System.Windows.Markup.XamlTypeMapper> può essere usato per fornire il parser XAML con informazioni di mapping personalizzato tramite una tecnica più diretta rispetto all'applicazione di <xref:System.Windows.Markup.XmlnsDefinitionAttribute> valori al codice assembly. Questo potrebbe essere utile per il consolidamento di tutti gli spazi dei nomi CLR in un assembly o per fare riferimento a tipi che supportano il XAML in un assembly esistente senza doverlo ricompilare solo per aggiungere <xref:System.Windows.Markup.XmlnsDefinitionAttribute> assegnazione di attributi.  
  
 In genere si crea un <xref:System.Windows.Markup.XamlTypeMapper> istanza per specificare il <xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A> valore della proprietà per un <xref:System.Windows.Markup.ParserContext>. Il <xref:System.Windows.Markup.ParserContext> a sua volta può essere utilizzato come contesto per un <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=nameWithType> chiamare.  
  
## <a name="default-mapper"></a>Mapper predefinito  
 È possibile ottenere un'utilità di mapping predefinito utilizzando il <xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A> proprietà statica. Il mapper predefinito funziona solo su un elenco di assembly predefinito. Nessuna informazioni specifiche sugli assembly (come specificato nel <xref:System.Windows.Markup.XamlTypeMapper> costruttori) viene utilizzato.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.NamespaceMapEntry" />
    <altmember cref="T:System.Windows.Markup.ParserContext" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.XamlTypeMapper" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeMapper (string[] assemblyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeMapper(cli::array &lt;System::String ^&gt; ^ assemblyNames);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Matrice di nomi di assembly che dovranno essere utilizzati da <see cref="T:System.Windows.Markup.XamlTypeMapper" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.XamlTypeMapper" /> specificando una matrice di nomi di assembly che dovranno essere utilizzati da <see cref="T:System.Windows.Markup.XamlTypeMapper" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyNames" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeMapper (string[] assemblyNames, System.Windows.Markup.NamespaceMapEntry[] namespaceMaps);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, class System.Windows.Markup.NamespaceMapEntry[] namespaceMaps) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), namespaceMaps As NamespaceMapEntry())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeMapper(cli::array &lt;System::String ^&gt; ^ assemblyNames, cli::array &lt;System::Windows::Markup::NamespaceMapEntry ^&gt; ^ namespaceMaps);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="namespaceMaps" Type="System.Windows.Markup.NamespaceMapEntry[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Matrice di nomi di assembly che dovranno essere utilizzati da <see cref="T:System.Windows.Markup.XamlTypeMapper" />.</param>
        <param name="namespaceMaps">Matrice di mappe dello spazio dei nomi che dovranno essere utilizzate da <see cref="T:System.Windows.Markup.XamlTypeMapper" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.XamlTypeMapper" /> utilizzando la matrice di nomi di assembly specificati e le mappe dello spazio dei nomi specificate.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyNames" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMappingProcessingInstruction">
      <MemberSignature Language="C#" Value="public void AddMappingProcessingInstruction (string xmlNamespace, string clrNamespace, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMappingProcessingInstruction(string xmlNamespace, string clrNamespace, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMappingProcessingInstruction (xmlNamespace As String, clrNamespace As String, assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMappingProcessingInstruction(System::String ^ xmlNamespace, System::String ^ clrNamespace, System::String ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlNamespace" Type="System.String" />
        <Parameter Name="clrNamespace" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlNamespace">Prefisso per lo spazio dei nomi XML.</param>
        <param name="clrNamespace">Spazio dei nomi CLR contenente i tipi di cui deve essere eseguito il mapping.</param>
        <param name="assemblyName">Assembly contenente lo spazio dei nomi CLR.</param>
        <summary>Definisce un mapping tra uno spazio dei nomi XML e spazi dei nomi CLR negli assembly, aggiungendo queste informazioni a quelle di <see cref="T:System.Windows.Markup.XamlTypeMapper" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A> è un modo programmatico per aggiungere un mapping.  Ad esempio, le diverse parti dell'istruzione di mapping XAML seguente corrispondono ai parametri del <xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A>:  
  
```  
<Window xmlns:SDK="clr-namespace:Samples;assembly=SDKSamples">  
...  
```  
  
 Il `xmlNamespace` è `SDK`, `clrNamespace` è `Samples`e `assemblyName` è `SDKSamples`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlNamespace" /> è <see langword="null" />  
  
 oppure  
  
 <paramref name="clrNamespace" /> è <see langword="null" />  
  
 oppure  
  
 <paramref name="assemblyName" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowInternalType">
      <MemberSignature Language="C#" Value="protected virtual bool AllowInternalType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AllowInternalType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.AllowInternalType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool AllowInternalType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Tipo a cui accedere.</param>
        <summary>Richiede l'autorizzazione per un tipo derivato <see cref="T:System.Windows.Markup.XamlTypeMapper" /> che viene chiamato con attendibilità totale per accedere a un tipo interno specifico.</summary>
        <returns>
          <see langword="true" /> se è possibile accedere al tipo interno; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non viene sottoposto a override da una sottoclasse, <xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A> restituisce sempre `false`.  
  
 Quando sottoposto a override da una sottoclasse, deve essere il comportamento che <xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A> deve restituire `true` se il tipo interno può essere eseguito; in caso contrario, `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMapper">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XamlTypeMapper DefaultMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XamlTypeMapper DefaultMapper" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlTypeMapper.DefaultMapper" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultMapper As XamlTypeMapper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XamlTypeMapper ^ DefaultMapper { System::Windows::Markup::XamlTypeMapper ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XamlTypeMapper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un'istanza di <see cref="T:System.Windows.Markup.XamlTypeMapper" /> da utilizzare se non ne è stato specificato alcuno.</summary>
        <value>Utilità di mapping dei tipi predefinita.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il mapper predefinito funziona solo su un elenco di assembly predefinito. Nessuna informazioni specifiche sugli assembly (come specificato nel <xref:System.Windows.Markup.XamlTypeMapper> costruttori) viene utilizzato. Nell'implementazione corrente l'elenco di assembly valore predefinito è: `WindowsBase`, `PresentationCore`, `PresentationFramework`.  
  
 Utilizzando BizTalk mapper predefinito non significa che non è possibile utilizzare tipi di assembly personalizzati in XAML affatto. Significa solo se si utilizzano tipi/assembly personalizzati, è necessario quindi utilizzare la tecnica XAML convenzionale di creazione dei mapping come `xmlns` attributi in ogni pagina XAML in cui fa riferimento, tipi/assembly anziché un mapper del tipo di API. Per ulteriori informazioni, vedere [spazi dei nomi XAML e Namespace Mapping per XAML di WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string xmlNamespace, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType(string xmlNamespace, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.GetType(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (xmlNamespace As String, localName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType(System::String ^ xmlNamespace, System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlNamespace" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlNamespace">Prefisso dello spazio dei nomi XML specificato.</param>
        <param name="localName">Il nome "locale" dell'elemento XAML per cui ottenere l'oggetto <see cref="T:System.Type" /> mappato. Locale in questo contesto significa mappato rispetto all'oggetto <c>xmlNamespace</c> fornito.</param>
        <summary>Ottiene l'oggetto <see cref="T:System.Type" /> CLR a cui è mappato un determinato elemento XAML utilizzando il prefisso dello spazio dei nomi XML specificato e il nome dell'elemento.</summary>
        <returns>
          <see cref="T:System.Type" /> per l'oggetto o <see langword="null" /> se non è stato possibile risolvere il mapping.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non viene trovato un tipo che esegue il mapping per le informazioni fornite, `null` viene restituito.  
  
 Non includere il prefisso come parte di `localName`. Per informazioni sull'elemento XAML qualsiasi il prefisso, separarlo in `xmlNamespace` e `localName` componenti per questa chiamata API.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlNamespace" /> è <see langword="null" />  
  
 oppure  
  
 <paramref name="localName" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
    <Member MemberName="SetAssemblyPath">
      <MemberSignature Language="C#" Value="public void SetAssemblyPath (string assemblyName, string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAssemblyPath(string assemblyName, string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAssemblyPath (assemblyName As String, assemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAssemblyPath(System::String ^ assemblyName, System::String ^ assemblyPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Il nome breve dell'assembly senza un'estensione o un percorso specificato. Equivale a <see cref="P:System.Reflection.AssemblyName.Name" />.</param>
        <param name="assemblyPath">Percorso del file dell'assembly. Il percorso dell'assembly deve essere un percorso di file completo contenente un'estensione di file.</param>
        <summary>Specifica il percorso da utilizzare in occasione del caricamento di un assembly.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyName" /> è <see langword="null" />  
  
 oppure  
  
 <paramref name="assemblyPath" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Windows.Markup.XamlParseException">
          <paramref name="assemblyName" /> è <see cref="F:System.String.Empty" />  
  
 oppure  
  
 <paramref name="assemblyPath" /> è <see cref="F:System.String.Empty" />  
  
 oppure  
  
 <paramref name="assemblyPath" /> non è un percorso di file completo contenente un'estensione di file.</exception>
      </Docs>
    </Member>
  </Members>
</Type>