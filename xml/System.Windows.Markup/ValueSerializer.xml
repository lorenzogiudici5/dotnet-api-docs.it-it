<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueSerializer.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dfe7052738061deaaa68c30a6aaa5efc25671310.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfe7052738061deaaa68c30a6aaa5efc25671310</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Abstract class that defines conversion behavior for serialization from an object representation.</source>
          <target state="translated">Classe astratta che definisce il comportamento di conversione per la serializzazione da una rappresentazione di oggetto.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</source>
          <target state="translated">La stringa restituita da un convertitore per la serializzazione deve essere senza perdita di dati e il convertitore deve restituire sempre la stessa stringa di un valore specifico.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>If a type converter (derived from <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>) does not meet these requirements in its <ph id="ph2">`ConvertTo`</ph> implementations for string output, a custom <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> must be declared.</source>
          <target state="translated">Se un convertitore di tipi (derivato da <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>) non soddisfa questi requisiti nel relativo <ph id="ph2">`ConvertTo`</ph> implementazioni per l'output della stringa, un oggetto personalizzato <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> deve essere dichiarato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Either the <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> should meet the requirements, or a null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> should be associated with the type.</source>
          <target state="translated">Entrambi i <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> deve soddisfare i requisiti o un valore null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> deve essere associato al tipo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is associated with a type by applying the <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attribute.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> è associata a un tipo applicando il <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attributo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>A null <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</source>
          <target state="translated">Un valore null <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> indica il convertitore di tipi deve essere ignorato per le conversioni di stringa di conversione nell'oggetto grafico.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Implementation of <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> should avoid throwing exceptions.</source>
          <target state="translated">Implementazione di <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> non deve generare eccezioni.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Any exceptions thrown could terminate serialization.</source>
          <target state="translated">La serializzazione è stato possibile terminare tutte le eccezioni generate.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> and its APIs is analogous to <ph id="ph3">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph> for a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> per un <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> e le relative API è analogo a <ph id="ph3">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph> per un <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>In fact, <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> inherits <ph id="ph2">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph>.</source>
          <target state="translated">In effetti, <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> eredita <ph id="ph2">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</source>
          <target state="translated">Quando un <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> viene chiamata l'API della classe derivata, il chiamante (in genere un processo serializzatore) passa un contesto che può fornire determinati servizi.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Because of the general guidance that a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> must not throw exceptions.</source>
          <target state="translated">A causa di indicazioni generali che un <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> non devono generare eccezioni.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Failure to return a particular service from the context must also not throw any exceptions.</source>
          <target state="translated">Errore di restituzione di un determinato servizio dal contesto deve inoltre non genera eccezioni.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</source>
          <target state="translated">Nelle versioni precedenti di .NET Framework, la classe esistente nell'assembly WindowsBase di specifiche di WPF.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is in the System.Xaml assembly.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> nell'assembly System. Xaml.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>tipi migrati da WPF a System. XAML<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.#ctor">
          <source>The body of this constructor is empty; the <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> class does not contain any values that require initialization.</source>
          <target state="translated">Il corpo del costruttore è vuoto. la <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> classe non contiene valori che richiedono l'inizializzazione.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The string to evaluate for conversion.</source>
          <target state="translated">Stringa da valutare per la conversione.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Informazioni di contesto utilizzate per la conversione.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, determines whether the specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> can be converted to an instance of the type that the implementation of <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supports.</source>
          <target state="translated">In caso di override in una classe derivata, determina se l'oggetto <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> specificato può essere convertito in un'istanza del tipo supportato dall'implementazione di <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value can be converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il valore può essere convertito. In caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">L'implementazione di base restituisce sempre <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The object to evaluate for conversion.</source>
          <target state="translated">Oggetto di cui valutare la conversione.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Informazioni di contesto utilizzate per la conversione.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, determines whether the specified object can be converted into a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">In caso di override in una classe derivata, determina se l'oggetto specificato può essere convertito in un oggetto <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> can be converted into a <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false." /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;paramref name="value" /&gt;</ph> può essere convertito in un oggetto <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph>. In caso contrario, <ph id="ph4">&lt;see langword="false." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">L'implementazione di base restituisce sempre <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The string to convert.</source>
          <target state="translated">Stringa da convertire.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Informazioni di contesto utilizzate per la conversione.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, converts a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to an instance of the type that the implementation of <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supports.</source>
          <target state="translated">In caso di override in una classe derivata, converte un oggetto <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> in un'istanza del tipo che l'implementazione di <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supporta.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>A new instance of the type that the implementation of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supports based on the supplied <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Nuova istanza del tipo che l'implementazione di <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supporta in base all'oggetto <ph id="ph2">&lt;paramref name="value" /&gt;</ph> fornito.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always throws an exception.</source>
          <target state="translated">L'implementazione di base sempre genera un'eccezione.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;paramref name="value" /&gt;</ph> non può essere convertito.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>Avoid throwing exceptions from implementations.</source>
          <target state="translated">Non generare eccezioni dalle implementazioni.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</source>
          <target state="translated">Vedere <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The object to convert into a string.</source>
          <target state="translated">Oggetto da convertire in una stringa.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Informazioni di contesto utilizzate per la conversione.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, converts the specified object to a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">In caso di override in una classe derivata, converte l'oggetto specificato in un oggetto <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>A string representation of the specified object.</source>
          <target state="translated">Rappresentazione di stringa dell'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always throws an exception.</source>
          <target state="translated">L'implementazione di base sempre genera un'eccezione.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;paramref name="value" /&gt;</ph> non può essere convertito.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Avoid throwing exceptions from implementations.</source>
          <target state="translated">Non generare eccezioni dalle implementazioni.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</source>
          <target state="translated">Vedere <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The object that could not be converted.</source>
          <target state="translated">Oggetto che non è stato possibile convertire.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Restituisce un'eccezione da generare quando non è possibile eseguire una conversione.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> object for the exception to throw when a <ph id="ph2">&lt;see langword="ConvertFrom" /&gt;</ph> conversion cannot be performed.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> per l'eccezione da generare quando non è possibile eseguire una conversione <ph id="ph2">&lt;see langword="ConvertFrom" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The actual <ph id="ph1">`throw`</ph> keyword is not invoked by this method, therefore the typical usage is <ph id="ph2">`throw GetConvertFromException`</ph> (with parameters provided).</source>
          <target state="translated">L'effettivo <ph id="ph1">`throw`</ph> parola chiave non viene richiamato da questo metodo, pertanto l'utilizzo tipico è <ph id="ph2">`throw GetConvertFromException`</ph> (con i parametri forniti).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The specific exception returned is <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, with <ph id="ph2">`value`</ph> passed in the exception message.</source>
          <target state="translated">L'eccezione specifica restituita è <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, con <ph id="ph2">`value`</ph> passato nel messaggio di eccezione.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The pattern for usage is the same as for exception utilities in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">Il modello di utilizzo è la stessa di utilità di eccezione in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The object that could not be converted.</source>
          <target state="translated">Oggetto che non è stato possibile convertire.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>A type that represents the type the conversion was trying to convert to.</source>
          <target state="translated">Tipo che rappresenta il tipo in cui è stata tentata la conversione.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Restituisce un'eccezione da generare quando non è possibile eseguire una conversione.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> object for the exception to throw when a <ph id="ph2">&lt;see langword="ConvertTo" /&gt;</ph> conversion cannot be performed.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> per l'eccezione da generare quando non è possibile eseguire una conversione <ph id="ph2">&lt;see langword="ConvertTo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The actual <ph id="ph1">`throw`</ph> keyword is not invoked by this method, therefore the typical usage is <ph id="ph2">`throw GetConvertToException`</ph> (with <ph id="ph3">`value`</ph> parameter provided).</source>
          <target state="translated">L'effettivo <ph id="ph1">`throw`</ph> parola chiave non viene richiamato da questo metodo, pertanto l'utilizzo tipico è <ph id="ph2">`throw GetConvertToException`</ph> (con <ph id="ph3">`value`</ph> parametro fornito).</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The specific exception returned is <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, with <ph id="ph2">`value`</ph> passed in the exception message.</source>
          <target state="translated">L'eccezione specifica restituita è <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, con <ph id="ph2">`value`</ph> passato nel messaggio di eccezione.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The pattern for usage is the same as for exception utilities in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">Il modello di utilizzo è la stessa di utilità di eccezione in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> for an object.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> per un oggetto.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The CLR property descriptor for the property to be serialized.</source>
          <target state="translated">Descrittore per la proprietà CLR da serializzare.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for a property, by passing a CLR property descriptor for the property.</source>
          <target state="translated">Ottiene l'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> dichiarato per una proprietà, passando un descrittore della proprietà CLR per la proprietà.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The serializer associated with the specified property.</source>
          <target state="translated">Serializzatore associato alla proprietà specificata.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>May return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Può restituire <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> for a property, or for a type that is used as the value for a property, is indicated by applying the <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attribute on the property or type declaration.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> per una proprietà o per un tipo che viene utilizzato come valore per una proprietà, viene indicato applicando il <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attributo nella dichiarazione di proprietà o un tipo.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> method is a utility method that reads the CLR type system information and returns a new <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> class based on the attribute if found on the property, or then if found on the property's type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> è un metodo di utilità che legge le informazioni sul sistema di tipo CLR e restituisce un nuovo <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> classe basata sull'attributo, se trovato nella proprietà o se viene quindi trovato nel tipo della proprietà.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source><ph id="ph1">`null`</ph> might be returned if no such serializer exists.</source>
          <target state="translated"><ph id="ph1">`null`</ph> potrebbe essere restituito se non esiste alcun questo serializzatore.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source><ph id="ph1">`null`</ph> might also be returned if a type or property is deliberately attributed with a null-value <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph> potrebbe essere restituito anche se un tipo di proprietà viene attribuito intenzionalmente un valore null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>Another mode that <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> supports is returning the internal <ph id="ph2">`TypeConverterValueSerializer`</ph> class, which is a <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementation that wraps a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> and translates the <ph id="ph5">`Convert`</ph> methods to <ph id="ph6">`Convert*String`</ph> methods (for instance <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph> is called with input of the <ph id="ph8">&lt;xref:System.String&gt;</ph> type, and translates to <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</source>
          <target state="translated">Un'altra modalità che <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> supporta restituisce interno <ph id="ph2">`TypeConverterValueSerializer`</ph> (classe), ovvero un <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementazione che esegue il wrapping di un <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> e converte il <ph id="ph5">`Convert`</ph> metodi per <ph id="ph6">`Convert*String`</ph> metodi (per l'istanza <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>viene chiamato con l'input del <ph id="ph8">&lt;xref:System.String&gt;</ph> digitare e viene convertito in <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>This is done only in cases where all of the following are true:</source>
          <target state="translated">Questa operazione viene eseguita solo nei casi in cui tutti gli elementi seguenti sono vere:</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> is found on the relevant property, or the relevant property's type.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> si trova sulla proprietà pertinente o tipo di proprietà rilevanti.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The indicated <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> can be successfully constructed.</source>
          <target state="translated">Il functoid <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> può essere costruita correttamente.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> restituisce <ph id="ph2">`true`</ph> per <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, denominato che fa riferimento il <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> restituisce <ph id="ph2">`true`</ph> per <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, denominato che fa riferimento il <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> restituisce <ph id="ph2">`true`</ph> per <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, denominato che fa riferimento il <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The following are special cases: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> types return a <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> types return an internal but functional serializer (<ph id="ph4">`StringValueSerializer`</ph>).</source>
          <target state="translated">Di seguito sono casi speciali: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> tipi restituiscono un <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> tipi restituiscono un serializzatore interno, ma funzionale (<ph id="ph4">`StringValueSerializer`</ph>).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The type to get the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> for.</source>
          <target state="translated">Il tipo per il quale ottenere il <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for the specified type.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> dichiarato per il tipo specificato.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The serializer associated with the specified type.</source>
          <target state="translated">Serializzatore associato al tipo specificato.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>May return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Può restituire <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> for a type is indicated by applying the <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attribute on the type declaration.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> per un tipo viene indicato applicando il <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attributo nella dichiarazione del tipo.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> method is a utility method that reads the CLR type system information and returns a new <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> class based on the attribute if found on the specified <ph id="ph3">`type`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> è un metodo di utilità che legge le informazioni sul sistema di tipo CLR e restituisce un nuovo <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> classe basata sull'attributo, se trovato nell'oggetto specificato <ph id="ph3">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source><ph id="ph1">`null`</ph> might be returned if no such serializer exists.</source>
          <target state="translated"><ph id="ph1">`null`</ph> potrebbe essere restituito se non esiste alcun questo serializzatore.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source><ph id="ph1">`null`</ph> might also be returned if a type is deliberately attributed with a null-value <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph> potrebbe essere restituito anche se un tipo viene attribuito intenzionalmente un valore null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>Another mode that <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> supports is returning the internal <ph id="ph2">`TypeConverterValueSerializer`</ph> class, which is a <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementation that wraps a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> and translates the <ph id="ph5">`Convert`</ph> methods to <ph id="ph6">`Convert*String`</ph> methods (for instance <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph> is called with input of the <ph id="ph8">&lt;xref:System.String&gt;</ph> type, and translates to <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</source>
          <target state="translated">Un'altra modalità che <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> supporta restituisce interno <ph id="ph2">`TypeConverterValueSerializer`</ph> (classe), ovvero un <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementazione che esegue il wrapping di un <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> e converte il <ph id="ph5">`Convert`</ph> metodi per <ph id="ph6">`Convert*String`</ph> metodi (per l'istanza <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>viene chiamato con l'input del <ph id="ph8">&lt;xref:System.String&gt;</ph> digitare e viene convertito in <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>This is done only in cases where all of the following are true:</source>
          <target state="translated">Questa operazione viene eseguita solo nei casi in cui tutti gli elementi seguenti sono vere:</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> is found on <ph id="ph2">`type`</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> si trova su <ph id="ph2">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The indicated <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> can be successfully constructed.</source>
          <target state="translated">Il functoid <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> può essere costruita correttamente.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> restituisce <ph id="ph2">`true`</ph> per <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, denominato che fa riferimento il <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> restituisce <ph id="ph2">`true`</ph> per <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, denominato che fa riferimento il <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> restituisce <ph id="ph2">`true`</ph> per <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, denominato che fa riferimento il <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The following are special cases: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> types return a <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> types return an internal but functional serializer (<ph id="ph4">`StringValueSerializer`</ph>).</source>
          <target state="translated">Di seguito sono casi speciali: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> tipi restituiscono un <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> tipi restituiscono un serializzatore interno, ma funzionale (<ph id="ph4">`StringValueSerializer`</ph>).</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Descriptor for the property to be serialized.</source>
          <target state="translated">Descrittore della proprietà da serializzare.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Informazioni di contesto utilizzate per la conversione.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for the specified property, using the specified context.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> dichiarato per la proprietà specificata, utilizzando il contesto specificato.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>The serializer associated with the specified property.</source>
          <target state="translated">Serializzatore associato alla proprietà specificata.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Rather than relying purely on attributes reported in the CLR type system, this overload uses the <ph id="ph1">`context`</ph> as a service, and calls the service's implementation of <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Anziché basarsi esclusivamente sugli attributi segnalati nel sistema di tipi CLR, questo overload viene utilizzato il <ph id="ph1">`context`</ph> come servizio e chiama l'implementazione del servizio di <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementation would typically also rely on the <ph id="ph2">`descriptor`</ph>, but might implement special behavior for certain contexts.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementazione verrebbe in genere anche basarsi sul <ph id="ph2">`descriptor`</ph>, ma potrebbe implementare un comportamento speciale per determinati contesti.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>This method should be called when the caller has an available <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> from a service.</source>
          <target state="translated">Questo metodo deve essere chiamato quando il chiamante è disponibile un <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> da un servizio.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>This will ensure that the correct <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is returned for the specific context.</source>
          <target state="translated">Questo garantisce che il corretto <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> viene restituito per il contesto specifico.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>If the context returns <ph id="ph1">`null`</ph> from its <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> for your specified <ph id="ph3">`descriptor`</ph>, or if the context you specify is <ph id="ph4">`null`</ph>, then behavior is identical to calling the <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29&gt;</ph> overload.</source>
          <target state="translated">Se il contesto non restituisce <ph id="ph1">`null`</ph> dal relativo <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> per l'oggetto specificato <ph id="ph3">`descriptor`</ph>, o se il contesto specificato è <ph id="ph4">`null`</ph>, il comportamento è identico alla chiamata di <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29&gt;</ph> overload.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>The type to get the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> for.</source>
          <target state="translated">Il tipo per il quale ottenere il <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Informazioni di contesto utilizzate per la conversione.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for the specified type, using the specified context.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> dichiarato per il tipo specificato, utilizzando il contesto specificato.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>The serializer associated with the specified type.</source>
          <target state="translated">Serializzatore associato al tipo specificato.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>Rather than relying purely on attributes reported in the CLR type system, this overload uses the <ph id="ph1">`context`</ph> as a service, and calls the service's implementation of <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Anziché basarsi esclusivamente sugli attributi segnalati nel sistema di tipi CLR, questo overload viene utilizzato il <ph id="ph1">`context`</ph> come servizio e chiama l'implementazione del servizio di <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementation would typically also rely on the <ph id="ph2">`type`</ph>, but might implement special behavior for certain contexts.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementazione verrebbe in genere anche basarsi sul <ph id="ph2">`type`</ph>, ma potrebbe implementare un comportamento speciale per determinati contesti.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>This method should be called when the caller has an available <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> from a service.</source>
          <target state="translated">Questo metodo deve essere chiamato quando il chiamante è disponibile un <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> da un servizio.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>This will ensure that the correct <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is returned for the specific context.</source>
          <target state="translated">Questo garantisce che il corretto <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> viene restituito per il contesto specifico.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>If the context returns <ph id="ph1">`null`</ph> from its <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> for your specified <ph id="ph3">`type`</ph>, or if the context you specify is <ph id="ph4">`null`</ph>, then behavior is identical to calling the <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29&gt;</ph> overload.</source>
          <target state="translated">Se il contesto non restituisce <ph id="ph1">`null`</ph> dal relativo <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> per l'oggetto specificato <ph id="ph3">`type`</ph>, o se il contesto specificato è <ph id="ph4">`null`</ph>, il comportamento è identico alla chiamata di <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29&gt;</ph> overload.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The value being serialized.</source>
          <target state="translated">Valore da serializzare.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Informazioni di contesto utilizzate per la conversione.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Gets an enumeration of the types referenced by the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</source>
          <target state="translated">Ottiene un'enumerazione dei tipi ai quali fa riferimento il <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The types converted by this serializer.</source>
          <target state="translated">Tipi convertiti da questo serializzatore.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Any types a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> converts should be included in the returned enumeration.</source>
          <target state="translated">Qualsiasi tipo di un <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> converte devono essere inclusi nell'enumerazione restituita.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</source>
          <target state="translated">In questo modo un serializzatore assicurare che un serializzatore deserializzazione disponga di sufficienti informazioni sui tipi converte questo serializzatore.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Overriding this method is an advanced scenario.</source>
          <target state="translated">Override di questo metodo è uno scenario avanzato.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</source>
          <target state="translated">Si esegue l'override deve essere necessario solo se si implementa un sistema in cui CLR sistema proprietà ownertype relazioni tra i tipi disponibili per un contesto dello schema XAML non segnalano informazioni sufficienti.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>WPF Usage Notes</source>
          <target state="translated">Note sull'utilizzo di WPF</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system implements an internal value serializer that overrides <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A&gt;</ph> because a dependency property has a concept that it can have added owners.</source>
          <target state="translated">Il <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> sistema di proprietà implementa un serializzatore di valori interno che esegue l'override <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A&gt;</ph> perché una proprietà di dipendenza è un concetto che può avere proprietari aggiunti.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> expressions also have special internal handling.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> espressioni dispongono anche di gestione interna speciale.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>