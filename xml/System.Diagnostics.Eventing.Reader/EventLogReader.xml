<Type Name="EventLogReader" FullName="System.Diagnostics.Eventing.Reader.EventLogReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c0e50de1dd9f282c2e38ca286bb4377cb6fa13c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36676379" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogReader : IDisposable" />
  <TypeSignature Language="F#" Value="type EventLogReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="be7a7-101">Consente di leggere eventi da un log eventi basato su una query di eventi.</span>
      <span class="sxs-lookup">
        <span data-stu-id="be7a7-101">Enables you to read events from an event log based on an event query.</span>
      </span>
      <span data-ttu-id="be7a7-102">Gli eventi letti da questo oggetto vengono restituiti come oggetti <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="be7a7-102">The events that are read by this object are returned as <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="be7a7-103">Ad esempio di codice utilizzando questa classe, vedere [procedura: eseguire una Query per gli eventi](http://msdn.microsoft.com/library/5231a436-4cf2-4539-90d2-a04813aba069) o [How To: l'accesso e informazioni sugli eventi di lettura](http://msdn.microsoft.com/library/14db3375-d305-49ae-aa24-aedbe906e76c).</span><span class="sxs-lookup"><span data-stu-id="be7a7-103">For example code using this class, see [How To: Query for Events](http://msdn.microsoft.com/library/5231a436-4cf2-4539-90d2-a04813aba069) or [How To: Access and Read Event Information](http://msdn.microsoft.com/library/14db3375-d305-49ae-aa24-aedbe906e76c).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-104">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-104">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogReader (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogReader(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogReader : System.Diagnostics.Eventing.Reader.EventLogQuery -&gt; System.Diagnostics.Eventing.Reader.EventLogReader" Usage="new System.Diagnostics.Eventing.Reader.EventLogReader eventQuery" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="be7a7-105">Query di eventi utilizzata per recuperare eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-105">The event query used to retrieve events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-106">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> specificando una query di eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-106">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be7a7-107">Utilizzare il <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> metodo per recuperare gli eventi da questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="be7a7-107">Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogReader (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogReader(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogReader : string -&gt; System.Diagnostics.Eventing.Reader.EventLogReader" Usage="new System.Diagnostics.Eventing.Reader.EventLogReader path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="be7a7-108">Nome del log eventi dal quale recuperare gli eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-108">The name of the event log to retrieve events from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-109">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> specificando un log eventi attivo dal quale recuperare gli eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-109">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an active event log to retrieve events from.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be7a7-110">Utilizzare il <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> metodo per recuperare gli eventi da questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="be7a7-110">Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogReader (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogReader(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogReader : System.Diagnostics.Eventing.Reader.EventLogQuery * System.Diagnostics.Eventing.Reader.EventBookmark -&gt; System.Diagnostics.Eventing.Reader.EventLogReader" Usage="new System.Diagnostics.Eventing.Reader.EventLogReader (eventQuery, bookmark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="be7a7-111">Query di eventi utilizzata per recuperare eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-111">The event query used to retrieve events.</span>
          </span>
        </param>
        <param name="bookmark">
          <span data-ttu-id="be7a7-112">Segnalibro (segnaposto) utilizzato come posizione iniziale nel log eventi o nel flusso di eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-112">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="be7a7-113">Solo gli eventi registrati dopo l'evento di segnalibro saranno restituiti dalla query.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-113">Only events logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-114">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> specificando una query di eventi e un segnalibro utilizzato come posizione iniziale per la query.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-114">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query and a bookmark that is used as starting position for the query.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be7a7-115">Utilizzare il <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> metodo per recuperare gli eventi da questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="be7a7-115">Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogReader (string path, System.Diagnostics.Eventing.Reader.PathType pathType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogReader(System::String ^ path, System::Diagnostics::Eventing::Reader::PathType pathType);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogReader : string * System.Diagnostics.Eventing.Reader.PathType -&gt; System.Diagnostics.Eventing.Reader.EventLogReader" Usage="new System.Diagnostics.Eventing.Reader.EventLogReader (path, pathType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="be7a7-116">Nome del log eventi o percorso al file di log eventi dal quale recuperare gli eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-116">The name of the event log to retrieve events from, or the path to the event log file to retrieve events from.</span>
          </span>
        </param>
        <param name="pathType">
          <span data-ttu-id="be7a7-117">Specifica se la stringa usata per il parametro path specifica il nome di un registro eventi o il percorso di un file di registro eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-117">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-118">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> specificando il nome di un log eventi o il percorso a un file di log dal quale recuperare gli eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-118">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying the name of an event log to retrieve events from or the path to a log file to retrieve events from.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be7a7-119">Utilizzare il <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> metodo per recuperare gli eventi da questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="be7a7-119">Use the <xref:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent%2A> method to retrieve events from this object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-120">Ottiene o imposta il numero di eventi recuperato dal flusso di eventi su ogni operazione di lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-120">Gets or sets the number of events retrieved from the stream of events on every read operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="be7a7-121">Restituisce un valore intero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-121">Returns an integer value.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelReading">
      <MemberSignature Language="C#" Value="public void CancelReading ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelReading() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelReading ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelReading();" />
      <MemberSignature Language="F#" Value="member this.CancelReading : unit -&gt; unit" Usage="eventLogReader.CancelReading " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-122">Annulla l'operazione di query corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-122">Cancels the current query operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-123">Rilascia le risorse usate da questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-123">Releases the resources used by this object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="eventLogReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-124">Rilascia tutte le risorse utilizzate da questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-124">Releases all the resources used by this object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="eventLogReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="be7a7-125">
            <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-125">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-126">Rilascia le risorse non gestite utilizzate da questo oggetto ed eventualmente rilascia quelle gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-126">Releases the unmanaged resources used by this object, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogStatus">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Diagnostics.Eventing.Reader.EventLogStatus&gt; LogStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Diagnostics.Eventing.Reader.EventLogStatus&gt; LogStatus" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogStatus As IList(Of EventLogStatus)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Diagnostics::Eventing::Reader::EventLogStatus ^&gt; ^ LogStatus { System::Collections::Generic::IList&lt;System::Diagnostics::Eventing::Reader::EventLogStatus ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogStatus : System.Collections.Generic.IList&lt;System.Diagnostics.Eventing.Reader.EventLogStatus&gt;" Usage="System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Diagnostics.Eventing.Reader.EventLogStatus&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-127">Ottiene lo stato di ogni log eventi o il file di log associato alla query di eventi in questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-127">Gets the status of each event log or log file associated with the event query in this object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="be7a7-128">Restituisce un elenco di oggetti <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" /> contenenti informazioni sullo stato di un log eventi associato alla query di eventi in questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-128">Returns a list of <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" /> objects that each contain status information about an event log associated with the event query in this object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-129">Legge l'evento successivo restituito dalla query di eventi in questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-129">Reads the next event that is returned from the event query in this object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadEvent">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Eventing.Reader.EventRecord ReadEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Eventing.Reader.EventRecord ReadEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEvent () As EventRecord" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Eventing::Reader::EventRecord ^ ReadEvent();" />
      <MemberSignature Language="F#" Value="member this.ReadEvent : unit -&gt; System.Diagnostics.Eventing.Reader.EventRecord" Usage="eventLogReader.ReadEvent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Eventing.Reader.EventRecord</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-130">Legge l'evento successivo restituito dalla query di eventi in questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-130">Reads the next event that is returned from the event query in this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="be7a7-131">Restituisce un oggetto <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-131">Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="be7a7-132">Ad esempio di codice utilizzando questa classe, vedere [procedura: eseguire una Query per gli eventi](http://msdn.microsoft.com/library/5231a436-4cf2-4539-90d2-a04813aba069).</span><span class="sxs-lookup"><span data-stu-id="be7a7-132">For example code using this class, see [How To: Query for Events](http://msdn.microsoft.com/library/5231a436-4cf2-4539-90d2-a04813aba069).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEvent">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Eventing.Reader.EventRecord ReadEvent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Eventing.Reader.EventRecord ReadEvent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEvent (timeout As TimeSpan) As EventRecord" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Eventing::Reader::EventRecord ^ ReadEvent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.ReadEvent : TimeSpan -&gt; System.Diagnostics.Eventing.Reader.EventRecord" Usage="eventLogReader.ReadEvent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Eventing.Reader.EventRecord</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="be7a7-133">Il tempo massimo per consentire l'operazione di lettura prima di annullare l'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-133">The maximum time to allow the read operation to run before canceling the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-134">Legge l'evento successivo restituito dalla query di eventi in questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-134">Reads the next event that is returned from the event query in this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="be7a7-135">Restituisce un oggetto <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-135">Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="be7a7-136">Modifica la posizione nel flusso di eventi dal quale ha origine il successivo evento che verrà letto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-136">Changes the position in the event stream where the next event that is read will come from.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Diagnostics.Eventing.Reader.EventBookmark bookmark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Diagnostics.Eventing.Reader.EventBookmark bookmark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (bookmark As EventBookmark)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark);" />
      <MemberSignature Language="F#" Value="member this.Seek : System.Diagnostics.Eventing.Reader.EventBookmark -&gt; unit" Usage="eventLogReader.Seek bookmark" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
      </Parameters>
      <Docs>
        <param name="bookmark">
          <span data-ttu-id="be7a7-137">Segnalibro (segnaposto) utilizzato come posizione iniziale nel log eventi o nel flusso di eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-137">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="be7a7-138">Solo gli eventi registrati dopo l'evento di segnalibro saranno restituiti dalla query.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-138">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-139">Modifica la posizione nel flusso di eventi dal quale deriva il successivo evento che verrà letto specificando un evento di segnalibro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-139">Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event.</span>
          </span>
          <span data-ttu-id="be7a7-140">Non si registrano eventi prima del recupero dell'evento di segnalibro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-140">No events logged before the bookmark event will be retrieved.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be7a7-141">È possibile utilizzare questa funzione solo sui set di risultati da un canale amministrativo o operativo, o dai file di log evtx.</span><span class="sxs-lookup"><span data-stu-id="be7a7-141">You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files.</span></span> <span data-ttu-id="be7a7-142">Questa funzione non è supportato in analitico e debug per ETL file o i canali.</span><span class="sxs-lookup"><span data-stu-id="be7a7-142">This function is not supported on analytic and debug channels, or for ETL files.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Diagnostics.Eventing.Reader.EventBookmark bookmark, long offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Diagnostics.Eventing.Reader.EventBookmark bookmark, int64 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (bookmark As EventBookmark, offset As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark, long offset);" />
      <MemberSignature Language="F#" Value="member this.Seek : System.Diagnostics.Eventing.Reader.EventBookmark * int64 -&gt; unit" Usage="eventLogReader.Seek (bookmark, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
        <Parameter Name="offset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bookmark">
          <span data-ttu-id="be7a7-143">Segnalibro (segnaposto) utilizzato come posizione iniziale nel log eventi o nel flusso di eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-143">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="be7a7-144">Solo gli eventi registrati dopo l'evento di segnalibro saranno restituiti dalla query.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-144">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="be7a7-145">Numero di offset di eventi per modificare la posizione del segnalibro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-145">The offset number of events to change the position of the bookmark.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-146">Modifica la posizione nel flusso di eventi dal quale deriva il successivo evento che verrà letto specificando un evento di segnalibro e un numero di offset di eventi dal segnalibro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-146">Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event and an offset number of events from the bookmark.</span>
          </span>
          <span data-ttu-id="be7a7-147">Non si registrano eventi prima del recupero del segnalibro più l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-147">No events logged before the bookmark plus the offset will be retrieved.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be7a7-148">È possibile utilizzare questa funzione solo sui set di risultati da un canale amministrativo o operativo, o dai file di log evtx.</span><span class="sxs-lookup"><span data-stu-id="be7a7-148">You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files.</span></span> <span data-ttu-id="be7a7-149">Questa funzione non è supportato in analitico e debug per ETL file o i canali.</span><span class="sxs-lookup"><span data-stu-id="be7a7-149">This function is not supported on analytic and debug channels, or for ETL files.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.IO.SeekOrigin origin, long offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.IO.SeekOrigin origin, int64 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (origin As SeekOrigin, offset As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(System::IO::SeekOrigin origin, long offset);" />
      <MemberSignature Language="F#" Value="member this.Seek : System.IO.SeekOrigin * int64 -&gt; unit" Usage="eventLogReader.Seek (origin, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
        <Parameter Name="offset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="origin">
          <span data-ttu-id="be7a7-150">Un valore dell'enumerazione <see cref="T:System.IO.SeekOrigin" /> definisce il punto in cui il flusso di eventi inizia l'operazione di query per gli eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-150">A value from the <see cref="T:System.IO.SeekOrigin" /> enumeration defines where in the stream of events to start querying for events.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="be7a7-151">Numero di offset di eventi per aggiungere l'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-151">The offset number of events to add to the origin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="be7a7-152">Modifica la posizione nel flusso di eventi da cui deriva l'evento successivo che verrà letto specificando una posizione iniziale e un offset dalla posizione iniziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-152">Changes the position in the event stream where the next event that is read will come from by specifying a starting position and an offset from the starting position.</span>
          </span>
          <span data-ttu-id="be7a7-153">Non si registrano eventi prima del recupero della posizione iniziale oltre all'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="be7a7-153">No events logged before the starting position plus the offset will be retrieved.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be7a7-154">È possibile utilizzare questa funzione solo sui set di risultati da un canale amministrativo o operativo, o dai file di log evtx.</span><span class="sxs-lookup"><span data-stu-id="be7a7-154">You can use this function only on result sets from an Admin or Operational channel, or from .evtx log files.</span></span> <span data-ttu-id="be7a7-155">Questa funzione non è supportato in analitico e debug per ETL file o i canali.</span><span class="sxs-lookup"><span data-stu-id="be7a7-155">This function is not supported on analytic and debug channels, or for ETL files.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>