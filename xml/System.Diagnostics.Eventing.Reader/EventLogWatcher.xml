<Type Name="EventLogWatcher" FullName="System.Diagnostics.Eventing.Reader.EventLogWatcher">
  <TypeSignature Language="C#" Value="public class EventLogWatcher : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogWatcher extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogWatcher&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogWatcher : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8841a-101">Consente la sottoscrizione a eventi in ingresso.</span><span class="sxs-lookup"><span data-stu-id="8841a-101">Allows you to subscribe to incoming events.</span></span> <span data-ttu-id="8841a-102">Ogni qualvolta si pubblica un evento desiderato in un log eventi, viene generato l'evento <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> e viene eseguito il metodo che lo gestisce.</span><span class="sxs-lookup"><span data-stu-id="8841a-102">Each time a desired event is published to an event log, the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, and the method that handles this event will be executed.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8841a-103">Le istanze di questa classe vengono create da <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> oggetti che specificano una query per la sottoscrizione dell'evento.</span><span class="sxs-lookup"><span data-stu-id="8841a-103">The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription.</span></span> <span data-ttu-id="8841a-104">Quando si registra un evento che soddisfa i criteri espressi nella query, l'evento <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> viene generato.</span><span class="sxs-lookup"><span data-stu-id="8841a-104">When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8841a-105">Ad esempio di codice utilizzando questa classe, vedere [procedura: sottoscrivere gli eventi nel Log eventi](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span><span class="sxs-lookup"><span data-stu-id="8841a-105">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8841a-106">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />.</span><span class="sxs-lookup"><span data-stu-id="8841a-106">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
      </Parameters>
      <Docs>
        <param name="eventQuery"><span data-ttu-id="8841a-107">Specifica una query per la sottoscrizione all'evento.</span><span class="sxs-lookup"><span data-stu-id="8841a-107">Specifies a query for the event subscription.</span></span> <span data-ttu-id="8841a-108">Quando si registra un evento che soddisfa i criteri espressi nella query, l'evento <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> viene generato.</span><span class="sxs-lookup"><span data-stu-id="8841a-108">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span></span></param>
        <summary><span data-ttu-id="8841a-109">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> specificando una query di eventi.</span><span class="sxs-lookup"><span data-stu-id="8841a-109">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="8841a-110">Percorso o nome del monitor del log eventi relativo a questi ultimi.</span><span class="sxs-lookup"><span data-stu-id="8841a-110">The path or name of the event log monitor for events.</span></span> <span data-ttu-id="8841a-111">Se un evento qualsiasi viene registrato, si registra l'evento <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />.</span><span class="sxs-lookup"><span data-stu-id="8841a-111">If any event is logged in this event log, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span></span></param>
        <summary><span data-ttu-id="8841a-112">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> specificando il nome o il percorso a un log eventi.</span><span class="sxs-lookup"><span data-stu-id="8841a-112">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying the name or path to an event log.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
      </Parameters>
      <Docs>
        <param name="eventQuery"><span data-ttu-id="8841a-113">Specifica una query per la sottoscrizione all'evento.</span><span class="sxs-lookup"><span data-stu-id="8841a-113">Specifies a query for the event subscription.</span></span> <span data-ttu-id="8841a-114">Quando si registra un evento che soddisfa i criteri espressi nella query, l'evento <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> viene generato.</span><span class="sxs-lookup"><span data-stu-id="8841a-114">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span></span></param>
        <param name="bookmark"><span data-ttu-id="8841a-115">Segnalibro (segnaposto) utilizzato come posizione iniziale nel log eventi o nel flusso di eventi.</span><span class="sxs-lookup"><span data-stu-id="8841a-115">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span></span> <span data-ttu-id="8841a-116">Solo gli eventi registrati dopo l'evento di segnalibro saranno restituiti dalla query.</span><span class="sxs-lookup"><span data-stu-id="8841a-116">Only events that have been logged after the bookmark event will be returned by the query.</span></span></param>
        <summary><span data-ttu-id="8841a-117">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> specificando una query di eventi e un segnalibro utilizzato come posizione iniziale per la query.</span><span class="sxs-lookup"><span data-stu-id="8841a-117">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query and a bookmark that is used as starting position for the query.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark, readExistingEvents As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark, bool readExistingEvents);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
        <Parameter Name="readExistingEvents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="eventQuery"><span data-ttu-id="8841a-118">Specifica una query per la sottoscrizione all'evento.</span><span class="sxs-lookup"><span data-stu-id="8841a-118">Specifies a query for the event subscription.</span></span> <span data-ttu-id="8841a-119">Quando si registra un evento che soddisfa i criteri espressi nella query, l'evento <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> viene generato.</span><span class="sxs-lookup"><span data-stu-id="8841a-119">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span></span></param>
        <param name="bookmark"><span data-ttu-id="8841a-120">Segnalibro (segnaposto) utilizzato come posizione iniziale nel log eventi o nel flusso di eventi.</span><span class="sxs-lookup"><span data-stu-id="8841a-120">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span></span> <span data-ttu-id="8841a-121">Solo gli eventi registrati dopo l'evento di segnalibro saranno restituiti dalla query.</span><span class="sxs-lookup"><span data-stu-id="8841a-121">Only events that have been logged after the bookmark event will be returned by the query.</span></span></param>
        <param name="readExistingEvents"><span data-ttu-id="8841a-122">Valore booleano che determina se leggere gli eventi che già esistono nel log eventi.</span><span class="sxs-lookup"><span data-stu-id="8841a-122">A Boolean value that determines whether to read the events that already exist in the event log.</span></span> <span data-ttu-id="8841a-123">Se questo valore è <see langword="true" />, gli eventi esistenti vengono letti e se questo valore è <see langword="false" />, gli eventi esistenti non vengono letti.</span><span class="sxs-lookup"><span data-stu-id="8841a-123">If this value is <see langword="true" />, then the existing events are read and if this value is <see langword="false" />, then the existing events are not read.</span></span></param>
        <summary><span data-ttu-id="8841a-124">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> specificando una query di eventi, un segnalibro utilizzato come posizione iniziale per la query e un valore booleano che determina se leggere gli eventi che già esistono nel log eventi.</span><span class="sxs-lookup"><span data-stu-id="8841a-124">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8841a-125">Rilascia le risorse usate da questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="8841a-125">Releases the resources used by this object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8841a-126">Rilascia tutte le risorse utilizzate da questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="8841a-126">Releases all the resources used by this object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="8841a-127"><see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</span><span class="sxs-lookup"><span data-stu-id="8841a-127"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="8841a-128">Rilascia le risorse non gestite utilizzate da questo oggetto ed eventualmente rilascia quelle gestite.</span><span class="sxs-lookup"><span data-stu-id="8841a-128">Releases the unmanaged resources used by this object, and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8841a-129">Determina se questo oggetto comincia a distribuire eventi al delegato dell'evento.</span><span class="sxs-lookup"><span data-stu-id="8841a-129">Determines whether this object starts delivering events to the event delegate.</span></span></summary>
        <value><span data-ttu-id="8841a-130">Restituisce <see langword="true" /> quando questo oggetto può distribuire eventi al delegato dell'evento e restituisce <see langword="false" /> quando questo oggetto ha interrotto la distribuzione.</span><span class="sxs-lookup"><span data-stu-id="8841a-130">Returns <see langword="true" /> when this object can deliver events to the event delegate, and returns <see langword="false" /> when this object has stopped delivery.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventRecordWritten">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
      <MemberSignature Language="VB.NET" Value="Public Event EventRecordWritten As EventHandler(Of EventRecordWrittenEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Eventing::Reader::EventRecordWrittenEventArgs ^&gt; ^ EventRecordWritten;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8841a-131">Consente di impostare un delegato (metodo del gestore eventi) che viene chiamato ogni qual volta è pubblicato un evento che soddisfa i criteri specificati nella query di eventi per questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="8841a-131">Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8841a-132">Ad esempio di codice utilizzando questa classe, vedere [procedura: sottoscrivere gli eventi nel Log eventi](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span><span class="sxs-lookup"><span data-stu-id="8841a-132">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>