<Type Name="ExponentialEase" FullName="System.Windows.Media.Animation.ExponentialEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9b64f6b9a822f0b222ce00c5d0f012ade10ab20" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36499035" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExponentialEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ExponentialEase" />
  <TypeSignature Language="VB.NET" Value="Public Class ExponentialEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExponentialEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type ExponentialEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta una funzione di interpolazione che crea un'animazione che accelera e/o rallenta utilizzando una formula esponenziale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile controllare se l'animazione accelera, decelera, o entrambi, specificando il <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. Nel grafico seguente vengono illustrati i diversi valori della <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> in cui *f*(*t*) rappresenta l'avanzamento dell'animazione e *t* rappresenta il tempo.  
  
 ![Grafici di ExponentialEase con EasingMode diversi. ] (~/add/media/exponentialease-graph.png "Grafici di ExponentialEase con EasingMode diversi.")  
  
 La formula utilizzata per questa funzione è la seguente:  
  
 ![Formula matematica per ExponentialEase](~/add/media/exponentialease-formula.png "formula matematica per ExponentialEase")  
  
 Utilizzando la formula precedente, il grafico seguente viene illustrato l'effetto di diversi valori per il <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> proprietà:  
  
 ![ExponentialEase per tre valori Exponent](~/add/media/expo-easeproperty.png "ExponentialEase per tre valori Exponent")  
  
 Esistono diverse altre funzioni di interpolazione oltre <xref:System.Windows.Media.Animation.ExponentialEase> che è possibile esplorare utilizzando il seguente esempio di Silverlight.  
  
 [Eseguire l'esempio](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 Oltre a utilizzare le funzioni di interpolazione incluse in fase di esecuzione, è possibile creare funzioni di interpolazione personalizzate ereditando dalla <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
<a name="xamlObjectElementUsage_ExponentialEase"></a>   
## <a name="xaml-object-element-usage"></a>Utilizzo della sintassi XAML per gli elementi oggetto  
  
```  
<ExponentialEase .../>  
```  
  
   
  
## Examples  
 Nell'esempio seguente si applica una <xref:System.Windows.Media.Animation.ExponentialEase> interpolazione funzione da un <xref:System.Windows.Media.Animation.DoubleAnimation> per creare un'animazione che decelera.  
  
 [!code-xaml[ExponentialEase#ExponentialEase](~/samples/snippets/csharp/VS_Snippets_Wpf/exponentialease/CS/window1.xaml#exponentialease)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExponentialEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExponentialEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Media.Animation.ExponentialEase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="exponentialEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una nuova istanza della classe derivata da <see cref="T:System.Windows.Freezable" />. Quando si crea una classe derivata, è necessario eseguire l'override di questo metodo.</summary>
        <returns>Nuova istanza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classi di animazione ereditano indirettamente <xref:System.Windows.Freezable>. Per questo motivo, è necessario eseguire l'override di <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> metodo per costruire un oggetto di animazione personalizzata.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata un'implementazione tipica delle <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="exponentialEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Tempo normalizzato (avanzamento) dell'animazione.</param>
        <summary>Fornisce la parte logica della funzione di interpolazione di cui è possibile eseguire l'override per produrre la modalità <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> della funzione di interpolazione personalizzata.</summary>
        <returns>Valore double che rappresenta lo stato di avanzamento trasformato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo trasforma il tempo normalizzato per controllare la velocità di un'animazione per il <xref:System.Windows.Media.Animation.EasingMode.EaseIn> maiuscole di <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 È necessario specificare solo la funzione di interpolazione per il <xref:System.Windows.Media.Animation.EasingMode.EaseIn> caso perché l'implementazione del <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> metodo trasformazioni `normalizedTime` per il <xref:System.Windows.Media.Animation.EasingMode.EaseOut> e <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> casi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponent">
      <MemberSignature Language="C#" Value="public double Exponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Exponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberSignature Language="VB.NET" Value="Public Property Exponent As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Exponent { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Exponent : double with get, set" Usage="System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'esponente utilizzato per determinare l'interpolazione dell'animazione.</summary>
        <value>Esponente utilizzato per determinare l'interpolazione dell'animazione. Il valore predefinito è 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>  
  
 La formula utilizzata da <xref:System.Windows.Media.Animation.ExponentialEase> è il seguente.  
  
 ![Formula matematica per ExponentialEase](~/add/media/exponentialease-formula.png "formula matematica per ExponentialEase")  
  
 Utilizzando la formula precedente, il grafico seguente viene illustrato l'effetto di diversi valori per il <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> proprietà:  
  
 ![ExponentialEase per tre valori Exponent](~/add/media/expo-easeproperty.png "ExponentialEase per tre valori Exponent")  
  
<a name="xamlAttributeUsage_Exponent"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Exponent="double" .../>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ExponentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ExponentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ExponentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ExponentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ExponentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Media.Animation.ExponentialEase.Exponent" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>