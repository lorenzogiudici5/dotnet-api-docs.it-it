<Type Name="BindingOperations" FullName="System.Windows.Data.BindingOperations">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6d6ad02d9cad5d3fea47f68a5d2f16bfb2f4a51" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30631075" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class BindingOperations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BindingOperations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingOperations" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingOperations" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingOperations abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce metodi statici per modificare associazioni, inclusi gli oggetti <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" /> e <see cref="T:System.Windows.Data.PriorityBinding" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe espone un set di metodi statici che fungono da operazioni di supporto per i data binding.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessCollection">
      <MemberSignature Language="C#" Value="public static void AccessCollection (System.Collections.IEnumerable collection, Action accessMethod, bool writeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AccessCollection(class System.Collections.IEnumerable collection, class System.Action accessMethod, bool writeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.AccessCollection(System.Collections.IEnumerable,System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AccessCollection (collection As IEnumerable, accessMethod As Action, writeAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AccessCollection(System::Collections::IEnumerable ^ collection, Action ^ accessMethod, bool writeAccess);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="accessMethod" Type="System.Action" />
        <Parameter Name="writeAccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="collection">Raccolta a cui accedere.</param>
        <param name="accessMethod">L'azione da eseguire sulla raccolta.</param>
        <param name="writeAccess">
          <see langword="true" /> se <c>accessMethod</c> scriverà nella raccolta; in caso contrario, <see langword="false" />.</param>
        <summary>Fornisce l'accesso a una raccolta utilizzando il meccanismo di sincronizzazione specificato dall'applicazione alla chiamata a EnableCollectionSynchronization.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllBindings">
      <MemberSignature Language="C#" Value="public static void ClearAllBindings (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllBindings(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearAllBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllBindings (target As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllBindings(System::Windows::DependencyObject ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto da cui rimuovere i binding.</param>
        <summary>Rimuove tutti i binding, inclusi quelli di tipo <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" /> e <see cref="T:System.Windows.Data.PriorityBinding" />, dall'oggetto <see cref="T:System.Windows.DependencyObject" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'oggetto specificato non è associato a dati, questo metodo non ha alcun effetto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Se <paramref name="target" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearBinding">
      <MemberSignature Language="C#" Value="public static void ClearBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearBinding (target As DependencyObject, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto da cui rimuovere l'associazione.</param>
        <param name="dp">Proprietà di dipendenza da cui rimuovere l'associazione.</param>
        <summary>Rimuove l'associazione, se presente, da una proprietà.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la proprietà specificata è associata a dati con un <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, o <xref:System.Windows.Data.MultiBinding>, questo metodo rimuove l'espressione di associazione di corrispondente e ripristina il valore della proprietà che era prima che qualsiasi valore locale è stato impostato tramite l'associazione.  
  
 Se la proprietà specificata non è associato a dati, questo metodo non ha alcun effetto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CollectionRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionRegistering As EventHandler(Of CollectionRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionRegisteringEventArgs ^&gt; ^ CollectionRegistering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di associazione dati rileva una raccolta.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionViewRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionViewRegistering As EventHandler(Of CollectionViewRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionViewRegisteringEventArgs ^&gt; ^ CollectionViewRegistering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di associazione dati rileva una visualizzazione raccolta.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void DisableCollectionSynchronization (System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableCollectionSynchronization(class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.DisableCollectionSynchronization(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisableCollectionSynchronization (collection As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisableCollectionSynchronization(System::Collections::IEnumerable ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="collection">La raccolta da cui rimuovere l'accesso sincronizzato.</param>
        <summary>Rimuovere la sincronizzazione registrata per la raccolta specificata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectedSource">
      <MemberSignature Language="C#" Value="public static object DisconnectedSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property object DisconnectedSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DisconnectedSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Object ^ DisconnectedSource { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto che sostituisce <see cref="P:System.Windows.FrameworkElement.DataContext" /> quando un contenitore di elementi viene rimosso dall'albero visuale.</summary>
        <value>Oggetto che sostituisce <see cref="P:System.Windows.FrameworkElement.DataContext" /> quando un contenitore di elementi viene rimosso dall'albero visuale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà se è necessario affrontare il <xref:System.Windows.FrameworkElement.DataContext%2A> di un contenitore di elementi.  Un contenitore dell'elemento è l'elemento dell'interfaccia utente che visualizza un elemento in un <xref:System.Windows.Controls.ItemsControl>.  Quando un <xref:System.Windows.Controls.ItemsControl> dati è un contenitore di elementi associati a una raccolta, viene generato per ogni elemento.  In alcuni casi, i contenitori di elementi vengono rimossi dalla struttura ad albero visuale.  In cui viene rimosso un contenitore di elementi in due casi tipici sono quando un elemento viene rimosso dalla raccolta sottostante e quando è abilitata la virtualizzazione nel <xref:System.Windows.Controls.ItemsControl>.  In questi casi, il <xref:System.Windows.FrameworkElement.DataContext%2A> del contenitore di elementi verrà impostata il <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A> proprietà controllare se il <xref:System.Windows.FrameworkElement.DataContext%2A> è uguale al <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A> prima di accedere il <xref:System.Windows.FrameworkElement.DataContext%2A> nel <xref:System.Windows.FrameworkElement.DataContextChanged> eventi per elemento contenitori. Per ulteriori informazioni sui contenitori di elementi e la virtualizzazione, vedere la sezione osservazioni nel <xref:System.Windows.Controls.VirtualizingStackPanel> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnableCollectionSynchronization">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Consente a un oggetto <see cref="T:System.Windows.Data.CollectionView" /> di partecipare all'accesso sincronizzato a una raccolta usata in più thread. </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Un'applicazione WPF è possibile visualizzare una raccolta di dati mediante un <xref:System.Windows.Controls.ItemsControl> o una delle sue sottoclassi (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>, ecc.). WPF canali tutti l'accesso alla raccolta tramite una sottoclasse di <xref:System.Windows.Data.CollectionView>. Sia il <xref:System.Windows.Controls.ItemsControl> e <xref:System.Windows.Data.CollectionView> presentano l'affinità di thread in cui il <xref:System.Windows.Controls.ItemsControl> è stato creato, vale a dire che il loro utilizzo su un altro thread non è consentito e genera un'eccezione. In effetti, questa restrizione si applica anche alla raccolta.
 
Si desideri utilizzare l'insieme in più thread.   Ad esempio, si desidera aggiornare la raccolta (aggiungono o rimuovono elementi) in un thread "raccolta di dati", durante la visualizzazione dei risultati in un thread "interfaccia", in modo che l'interfaccia utente rimane attiva durante la raccolta di dati è in corso. In questo caso, è responsabile per garantire l'accesso sincronizzato ("thread-safe") alla raccolta.   Questa operazione viene in genere eseguita mediante un meccanismo semplice blocco o un meccanismo di sincronizzazione più complesso, ad esempio semafori, reimpostare gli eventi e così via. 
 
Anche se è necessario sincronizzare l'accesso dell'applicazione alla raccolta, è necessario inoltre garantire che l'accesso da WPF (in particolare da <xref:System.Windows.Data.CollectionView>) partecipa lo stesso meccanismo di sincronizzazione.  A tale scopo, è possibile chiamare il metodo <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A>.
 
Per utilizzare un insieme in più thread, uno dei quali è il thread dell'interfaccia utente che possiede il <xref:System.Windows.Controls.ItemsControl>, un'applicazione ha le responsabilità seguenti:

1. Scegliere un meccanismo di sincronizzazione.

1. Sincronizzare tutti gli accessi dall'applicazione alla raccolta utilizzando tale meccanismo.

1. Chiamare <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> per informare WPF del meccanismo.

   - La chiamata deve verificarsi sul thread dell'interfaccia utente.

   - La chiamata deve verificarsi prima di utilizzare la raccolta in un thread differente o prima di collegare la raccolta per il <xref:System.Windows.Controls.ItemsControl>, a seconda del valore è una versione successiva.

   - Chiamare il <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> overload se si utilizza un meccanismo semplice blocco; chiamata il <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> overload se si utilizza un meccanismo più complesso.

1. Verificare che una modifica alla raccolta e la notifica della modifica (tramite <xref:System.Collections.Specialized.INotifyCollectionChanged>) sono atomica; Nessun accesso da altri thread può intervenire.  (Si tratta in genere disponibile. For Instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> garantisce, purché tutte le modifiche sono protetti tramite la sincronizzazione.)

1. Se si chiama <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, che la chiamata deve verificarsi anche nel thread UI.

1. Se si desidera utilizzare la stessa raccolta su più thread dell'interfaccia utente, è necessario chiamare <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (e <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, se necessario) separato per ogni thread dell'interfaccia utente.

1. Evitare i deadlock.  Questo è responsabilità dell'applicazione una volta che si sceglie di utilizzare la sincronizzazione, ma deve anche considerare la partecipazione di WPF account nella sincronizzazione, come descritto nel paragrafo seguente.

In cambio, WPF offre quanto segue:

- Il <xref:System.Windows.Data.CollectionView> accede alla raccolta utilizzando il meccanismo di sincronizzazione specificato.

- Il <xref:System.Windows.Data.CollectionView> mantiene una "copia" della raccolta per l'uso nel thread UI.

- <xref:System.Windows.Data.CollectionView.CollectionChanged> gli eventi vengono accodati fino al momento della ricezione (in qualsiasi thread).

- Gli eventi in sospeso vengono applicate alla copia shadow in modo asincrono sul thread dell'interfaccia utente quando ha la possibilità di farlo.

- Il <xref:System.Windows.Data.CollectionView> non verranno usate direttamente qualsiasi altro meccanismo di sincronizzazione visibile all'applicazione. Questo è il modo di WPF di evitare i deadlock (vedere l'elemento precedente 7).   

L'effetto finale è che è possibile modificare la raccolta in qualsiasi thread e le modifiche visualizzate alla fine nel <xref:System.Windows.Controls.ItemsControl> quando il thread dell'interfaccia utente è ora "aggiornamento".  L'implementazione è stata ottimizzata per limitare la velocità di flusso delle modifiche nel thread dell'interfaccia utente per mantenere background thread da saturare il thread UI e sottrarre la risposta all'input dell'utente normale.

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object lockObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object lockObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, lockObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ lockObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="lockObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="collection">Raccolta che richiede l'accesso sincronizzato.</param>
        <param name="lockObject">Oggetto da bloccare quando si accede alla raccolta.</param>
        <summary>Consente a un oggetto <see cref="T:System.Windows.Data.CollectionView" /> di partecipare all'accesso sincronizzato a una raccolta usata in più thread tramite un meccanismo di blocco semplice. </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Un'applicazione WPF è possibile visualizzare una raccolta di dati mediante un <xref:System.Windows.Controls.ItemsControl> o una delle sue sottoclassi (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>, ecc.). WPF canali tutti l'accesso alla raccolta tramite una sottoclasse di <xref:System.Windows.Data.CollectionView>. Sia il <xref:System.Windows.Controls.ItemsControl> e <xref:System.Windows.Data.CollectionView> presentano l'affinità di thread in cui il <xref:System.Windows.Controls.ItemsControl> è stato creato, vale a dire che il loro utilizzo su un altro thread non è consentito e genera un'eccezione. In effetti, questa restrizione si applica anche alla raccolta.
 
Si desideri utilizzare l'insieme in più thread.   Ad esempio, si desidera aggiornare la raccolta (aggiungono o rimuovono elementi) in un thread "raccolta di dati", durante la visualizzazione dei risultati in un thread "interfaccia", in modo che l'interfaccia utente rimane attiva durante la raccolta di dati è in corso. In questo caso, si è responsabili della garantire sincronizzare l'accesso ("thread-safe") alla raccolta e per garantire che l'accesso da WPF (in particolare da <xref:System.Windows.Data.CollectionView>) partecipa lo stesso meccanismo di sincronizzazione. Chiamando il <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> (metodo), è possibile farlo mediante un meccanismo semplice blocco. 
 
Per utilizzare un insieme in più thread, uno dei quali è il thread dell'interfaccia utente che possiede il <xref:System.Windows.Controls.ItemsControl>, è necessario eseguire le operazioni seguenti:

1. Creare un'istanza di un oggetto di blocco quando accedono alla raccolta.

1. Sincronizzare l'accesso tutte dall'applicazione alla raccolta l'oggetto di blocco.

1. Chiamare <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> per informare WPF che si sta utilizzando un meccanismo semplice blocco.

   - La chiamata deve verificarsi sul thread dell'interfaccia utente.

   - La chiamata deve verificarsi prima di utilizzare la raccolta in un thread differente o prima di collegare la raccolta per il <xref:System.Windows.Controls.ItemsControl>, a seconda del valore è una versione successiva.

1. Verificare che una modifica alla raccolta e la notifica della modifica (tramite <xref:System.Collections.Specialized.INotifyCollectionChanged>) sono atomica; Nessun accesso da altri thread può intervenire.  (Si tratta in genere disponibile. For Instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> garantisce, purché tutte le modifiche sono protetti tramite la sincronizzazione.)

1. Se si chiama <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, che la chiamata deve verificarsi anche nel thread UI.

1. Se si desidera utilizzare la stessa raccolta su più thread dell'interfaccia utente, è necessario chiamare <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (e <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, se necessario) separato per ogni thread dell'interfaccia utente.

1. Evitare i deadlock.  Questo è responsabilità dell'applicazione una volta che si sceglie di utilizzare la sincronizzazione, ma anche necessario prendere in considerazione la partecipazione di WPF nel processo di sincronizzazione. (Vedere altre informazioni, di seguito).

In cambio, WPF offre quanto segue:

- Il <xref:System.Windows.Data.CollectionView> accede alla raccolta utilizzando il meccanismo di blocco.

- Il <xref:System.Windows.Data.CollectionView> mantiene una "copia" della raccolta per l'uso nel thread UI.

- <xref:System.Windows.Data.CollectionView.CollectionChanged> gli eventi vengono accodati fino al momento della ricezione (in qualsiasi thread).

- Gli eventi in sospeso vengono applicate alla copia shadow in modo asincrono sul thread dell'interfaccia utente quando ha la possibilità di farlo.

- Il <xref:System.Windows.Data.CollectionView> verrà usata non direttamente qualsiasi altro meccanismo di sincronizzazione visibile all'applicazione. Questo è il modo di WPF di evitare i deadlock (vedere l'elemento precedente 7).   

L'effetto finale è che è possibile modificare la raccolta in qualsiasi thread e le modifiche visualizzate alla fine nel <xref:System.Windows.Controls.ItemsControl> quando il thread dell'interfaccia utente è ora "aggiornamento".  L'implementazione è stata ottimizzata per limitare la velocità di flusso delle modifiche nel thread dell'interfaccia utente per mantenere background thread da saturare il thread UI e sottrarre la risposta all'input dell'utente normale.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object context, System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object context, class System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, context As Object, synchronizationCallback As CollectionSynchronizationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ context, System::Windows::Data::CollectionSynchronizationCallback ^ synchronizationCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="context" Type="System.Object" />
        <Parameter Name="synchronizationCallback" Type="System.Windows.Data.CollectionSynchronizationCallback" />
      </Parameters>
      <Docs>
        <param name="collection">Raccolta che richiede l'accesso sincronizzato.</param>
        <param name="context">Oggetto che viene passato al callback.</param>
        <param name="synchronizationCallback">Callback che viene richiamato ogni volta che è richiesto l'accesso alla raccolta. Può essere usato per garantire che l'accesso alla raccolta venga eseguito da un solo thread alla volta. </param>
        <summary>Consente a un oggetto <see cref="T:System.Windows.Data.CollectionView" /> di partecipare all'accesso sincronizzato a una raccolta usata in più thread tramite un meccanismo diverso dal blocco semplice. </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Un'applicazione WPF è possibile visualizzare una raccolta di dati mediante un <xref:System.Windows.Controls.ItemsControl> o una delle sue sottoclassi (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>, ecc.). WPF canali tutti l'accesso alla raccolta tramite una sottoclasse di <xref:System.Windows.Data.CollectionView>. Sia il <xref:System.Windows.Controls.ItemsControl> e <xref:System.Windows.Data.CollectionView> presentano l'affinità di thread in cui il <xref:System.Windows.Controls.ItemsControl> è stato creato, vale a dire che il loro utilizzo su un altro thread non è consentito e genera un'eccezione. In effetti, questa restrizione si applica anche alla raccolta.
 
Si desideri utilizzare l'insieme in più thread.   Ad esempio, si desidera aggiornare la raccolta (aggiungono o rimuovono elementi) in un thread "raccolta di dati", durante la visualizzazione dei risultati in un thread "interfaccia", in modo che l'interfaccia utente rimane attiva durante la raccolta di dati è in corso. In questo caso, si è responsabili della garantire sincronizzare l'accesso ("thread-safe") alla raccolta e per garantire che l'accesso da WPF (in particolare da <xref:System.Windows.Data.CollectionView>) partecipa lo stesso meccanismo di sincronizzazione. Chiamando il <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> (metodo), è possibile farlo usando un meccanismo di sincronizzazione, ad esempio un semafori, un evento di reimpostazione e così via. 
 
Per utilizzare un insieme in più thread, uno dei quali è il thread dell'interfaccia utente che possiede il <xref:System.Windows.Controls.ItemsControl>, è necessario eseguire le operazioni seguenti:

1. Scegliere un meccanismo di sincronizzazione.

1. Sincronizzare tutti gli accessi dall'applicazione alla raccolta utilizzando tale meccanismo.

1. Chiamare il <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> overload per informare WPF che si sta utilizzando un meccanismo diverso dal semplice blocco.

   - La chiamata deve verificarsi sul thread dell'interfaccia utente.

   - La chiamata deve verificarsi prima di utilizzare la raccolta in un thread differente o prima di collegare la raccolta per il <xref:System.Windows.Controls.ItemsControl>, a seconda del valore è una versione successiva.

1. Verificare che una modifica alla raccolta e la notifica della modifica (tramite <xref:System.Collections.Specialized.INotifyCollectionChanged>) sono atomica; Nessun accesso da altri thread può intervenire.  (Si tratta in genere disponibile. For Instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> garantisce, purché tutte le modifiche sono protetti tramite la sincronizzazione.)

1. Se si chiama <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, che la chiamata deve verificarsi anche nel thread UI.

1. Se si desidera utilizzare la stessa raccolta su più thread dell'interfaccia utente, è necessario chiamare <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (e <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, se necessario) separato per ogni thread dell'interfaccia utente.

1. Evitare i deadlock.  Questo è responsabilità dell'applicazione una volta che si sceglie di utilizzare la sincronizzazione, ma anche necessario prendere in considerazione la partecipazione di WPF nel processo di sincronizzazione. (Vedere altre informazioni, di seguito).

In cambio, WPF offre quanto segue:

- Il <xref:System.Windows.Data.CollectionView> accede alla raccolta chiamando registrato <xref:System.Windows.Data.CollectionSynchronizationCallback> con gli argomenti seguenti:

   - `collection`: la raccolta di interesse.
   - `context`: l'oggetto di contesto registrato.
   - `accessMethod`: un delegato che esegue l'effettivo accesso.
   - `writeAccess`: `true` se il delegato verrà modificato nella raccolta. `false` in caso contrario.

   Il <xref:System.Windows.Data.CollectionSynchronizationCallback> deve stabilire la sincronizzazione per la raccolta (utilizzando la `context` oggetto e `writeAccess` valore, come appropriato), chiamare il `accessMethod`, quindi rilasciare la sincronizzazione.

- Il <xref:System.Windows.Data.CollectionView> mantiene una "copia" della raccolta per l'uso nel thread UI.

- <xref:System.Windows.Data.CollectionView.CollectionChanged> gli eventi vengono accodati fino al momento della ricezione (in qualsiasi thread).

- Gli eventi in sospeso vengono applicate alla copia shadow in modo asincrono sul thread dell'interfaccia utente quando ha la possibilità di farlo.

- Il <xref:System.Windows.Data.CollectionView> verrà usata non direttamente qualsiasi altro meccanismo di sincronizzazione visibile all'applicazione. Questo è il modo di WPF di evitare i deadlock (vedere l'elemento precedente 7).   

L'effetto finale è che è possibile modificare la raccolta in qualsiasi thread e le modifiche visualizzate alla fine nel <xref:System.Windows.Controls.ItemsControl> quando il thread dell'interfaccia utente è ora "aggiornamento".  L'implementazione è stata ottimizzata per limitare la velocità di flusso delle modifiche nel thread dell'interfaccia utente per mantenere background thread da saturare il thread UI e sottrarre la risposta all'input dell'utente normale.

 Il `context` parametro è un oggetto arbitrario che viene passato per il `callback`. È possibile utilizzarlo per determinare il meccanismo di sincronizzazione utilizzato per controllare l'accesso a `collection`. `Context` può essere `null`.  
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.Binding GetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.Binding GetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBinding (target As DependencyObject, dp As DependencyProperty) As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::Binding ^ GetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.Binding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto che include <c>dp</c>.</param>
        <param name="dp">Proprietà di destinazione dell'associazione dalla quale recuperare l'associazione.</param>
        <summary>Recupera l’oggetto <see cref="T:System.Windows.Data.Binding" /> impostato sulla proprietà specificata.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.Binding" /> impostato sulla proprietà specificata o <see langword="null" /> se non è stato impostato alcun oggetto <see cref="T:System.Windows.Data.Binding" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingBase GetBindingBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingBase GetBindingBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingBase (target As DependencyObject, dp As DependencyProperty) As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingBase ^ GetBindingBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto che include <c>dp</c>.</param>
        <param name="dp">Proprietà della destinazione di associazione dalla quale recuperare l'oggetto <see cref="T:System.Windows.Data.BindingBase" />.</param>
        <summary>Recupera l’oggetto <see cref="T:System.Windows.Data.BindingBase" /> impostato sulla proprietà specificata.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.BindingBase" /> impostato sulla proprietà specificata o <see langword="null" /> se non è stato impostato alcun oggetto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Data.BindingBase> classe è la classe di base comune per il <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, e <xref:System.Windows.Data.MultiBinding> classi. È possibile utilizzare il <xref:System.Windows.Data.BindingOperations.GetBinding%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBinding%2A>, e <xref:System.Windows.Data.BindingOperations.GetMultiBinding%2A> metodi se si conosce in anticipo il tipo di associazione che è impostano sulla proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpression (target As DependencyObject, dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto di destinazione del binding in cui si trova <c>dp</c>.</param>
        <param name="dp">Proprietà della destinazione di associazione dalla quale recuperare l'oggetto <see cref="T:System.Windows.Data.BindingExpression" />.</param>
        <summary>Restituisce l'oggetto <see cref="T:System.Windows.Data.BindingExpression" /> associato alla proprietà della destinazione di associazione specificata nell'oggetto specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.BindingExpression" /> associato alla proprietà specificata o <see langword="null" /> se non esistono oggetti. Se un oggetto <see cref="T:System.Windows.Data.PriorityBindingExpression" /> è impostato sulla proprietà, viene restituito <see cref="P:System.Windows.Data.PriorityBindingExpression.ActiveBindingExpression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Data.BindingExpression> oggetto mantiene la connessione tra l'origine di associazione e la destinazione dell'associazione. È possibile ottenere il <xref:System.Windows.Data.BindingExpression> oggetto chiamando questo metodo statico o chiamando il <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> metodo su un controllo con associazione a dati <xref:System.Windows.FrameworkElement> o <xref:System.Windows.FrameworkContentElement> oggetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata l'implementazione di un <xref:System.Windows.Controls.Primitives.ButtonBase.Click> gestore eventi che utilizza il <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A> per ottenere il <xref:System.Windows.Data.BindingExpression> e quindi chiama il <xref:System.Windows.Data.BindingExpression.DataItem%2A> proprietà per accedere all'oggetto di origine di associazione.  
  
 Il <xref:System.Windows.Controls.TextBlock> `SavingsText` è l'oggetto di destinazione e <xref:System.Windows.Controls.TextBlock.Text%2A> è la proprietà di destinazione del binding.  
  
 [!code-csharp[DirectionalBinding#OnRentRaise](~/samples/snippets/csharp/VS_Snippets_Wpf/DirectionalBinding/CSharp/Page1.xaml.cs#onrentraise)]
 [!code-vb[DirectionalBinding#OnRentRaise](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DirectionalBinding/VisualBasic/DirectionalBinding.vb#onrentraise)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpressionBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase GetBindingExpressionBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase GetBindingExpressionBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpressionBase (target As DependencyObject, dp As DependencyProperty) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ GetBindingExpressionBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto che include <c>dp</c>.</param>
        <param name="dp">Proprietà della destinazione di associazione dalla quale recuperare l'oggetto <see cref="T:System.Windows.Data.BindingExpressionBase" />.</param>
        <summary>Recupera l’oggetto <see cref="T:System.Windows.Data.BindingExpressionBase" /> impostato sulla proprietà specificata.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.BindingExpressionBase" /> impostato sulla proprietà specificata o <see langword="null" /> se non è stato impostato alcun oggetto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Data.BindingExpressionBase> classe è la classe di base comune per il <xref:System.Windows.Data.BindingExpression>, <xref:System.Windows.Data.PriorityBindingExpression>, e <xref:System.Windows.Data.MultiBindingExpression> classi. È possibile utilizzare il <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBindingExpression%2A>, e <xref:System.Windows.Data.BindingOperations.GetMultiBindingExpression%2A> metodi se si conosce in anticipo il tipo di associazione che è impostato sulla proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBinding GetMultiBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBinding GetMultiBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBinding (target As DependencyObject, dp As DependencyProperty) As MultiBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBinding ^ GetMultiBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto che include <c>dp</c>.</param>
        <param name="dp">Proprietà di destinazione dell'associazione dalla quale recuperare l'associazione.</param>
        <summary>Recupera l’oggetto <see cref="T:System.Windows.Data.MultiBinding" /> impostato sulla proprietà specificata.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.MultiBinding" /> impostato sulla proprietà specificata o <see langword="null" /> se non è stato impostato alcun oggetto <see cref="T:System.Windows.Data.MultiBinding" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBindingExpression GetMultiBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBindingExpression GetMultiBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBindingExpression (target As DependencyObject, dp As DependencyProperty) As MultiBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBindingExpression ^ GetMultiBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto di destinazione del binding in cui si trova <c>dp</c>.</param>
        <param name="dp">Proprietà della destinazione di associazione dalla quale recuperare l'oggetto <see cref="T:System.Windows.Data.MultiBindingExpression" />.</param>
        <summary>Restituisce l'oggetto <see cref="T:System.Windows.Data.MultiBindingExpression" /> associato alla proprietà della destinazione di associazione specificata nell'oggetto specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.MultiBindingExpression" /> associato alla proprietà specificata o <see langword="null" /> se non esistono oggetti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Data.MultiBindingExpression> associato alla proprietà specificata o `null` se non esistono oggetti.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBinding GetPriorityBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBinding GetPriorityBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBinding (target As DependencyObject, dp As DependencyProperty) As PriorityBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBinding ^ GetPriorityBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto che include <c>dp</c>.</param>
        <param name="dp">Proprietà di destinazione dell'associazione dalla quale recuperare l'associazione.</param>
        <summary>Recupera l’oggetto <see cref="T:System.Windows.Data.PriorityBinding" /> impostato sulla proprietà specificata.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.PriorityBinding" /> impostato sulla proprietà specificata o <see langword="null" /> se non è stato impostato alcun oggetto <see cref="T:System.Windows.Data.PriorityBinding" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere null.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBindingExpression (target As DependencyObject, dp As DependencyProperty) As PriorityBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBindingExpression ^ GetPriorityBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto di destinazione del binding in cui si trova <c>dp</c>.</param>
        <param name="dp">Proprietà della destinazione di associazione dalla quale recuperare l'oggetto <see cref="T:System.Windows.Data.PriorityBindingExpression" />.</param>
        <summary>Restituisce l'oggetto <see cref="T:System.Windows.Data.PriorityBindingExpression" /> associato alla proprietà della destinazione di associazione specificata nell'oggetto specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Data.PriorityBindingExpression" /> associato alla proprietà specificata o <see langword="null" /> se non esistono oggetti.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">I parametri <paramref name="target" /> e <paramref name="dp" /> non possono essere <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindingGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindingGroups (root As DependencyObject) As ReadOnlyCollection(Of BindingGroup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingGroup ^&gt; ^ GetSourceUpdatingBindingGroups(System::Windows::DependencyObject ^ root);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">Oggetto <see cref="T:System.Windows.UIElement" /> radice per cui ottenere i gruppi di associazione.  Questo metodo restituisce gli oggetti <see cref="T:System.Windows.Data.BindingGroup" /> associati a questo elemento o ai relativi elementi discendenti.</param>
        <summary>Ottiene tutti gli oggetti <see cref="T:System.Windows.Data.BindingGroup" /> che hanno valori non validi o valori di destinazione che non sono stati aggiornati nell'origine.</summary>
        <returns>Raccolta di oggetti di <see cref="T:System.Windows.Data.BindingGroup" /> associati con l'elemento specificato e presentano valori non validi o valori di destinazione che non hanno aggiornato l'origine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `root` è `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups%2A> restituisce tutti <xref:System.Windows.Data.BindingGroup> gli oggetti che non sono valide o non sono stati aggiornati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindings">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindings (root As DependencyObject) As ReadOnlyCollection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ GetSourceUpdatingBindings(System::Windows::DependencyObject ^ root);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">Oggetto <see cref="T:System.Windows.UIElement" /> radice per cui ottenere i gruppi di associazione.  Questo metodo restituisce gli oggetti <see cref="T:System.Windows.Data.BindingExpressionBase" /> associati a questo elemento o ai relativi elementi discendenti.</param>
        <summary>Ottiene tutti gli oggetti <see cref="T:System.Windows.Data.BindingExpressionBase" /> che hanno valori non validi o valori di destinazione che non sono stati aggiornati nell'origine.</summary>
        <returns>Raccolta di oggetti di <see cref="T:System.Windows.Data.BindingExpressionBase" /> associati con l'elemento specificato e presentano valori non validi o valori di destinazione che non hanno aggiornato l'origine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `root` è `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings%2A> restituisce tutti <xref:System.Windows.Data.BindingExpressionBase> gli oggetti che non sono valide o non sono stati aggiornati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDataBound">
      <MemberSignature Language="C#" Value="public static bool IsDataBound (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDataBound(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.IsDataBound(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDataBound (target As DependencyObject, dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDataBound(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto che include <c>dp</c>.</param>
        <param name="dp">Proprietà di dipendenza da controllare.</param>
        <summary>Restituisce un valore che indica se la proprietà specificata è attualmente associata a dati.</summary>
        <returns>
          <see langword="true" /> se la proprietà specificata è associata ai dati; in caso contrario <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Se <paramref name="target" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetBinding (target As DependencyObject, dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="target">Destinazione del binding.</param>
        <param name="dp">Proprietà di destinazione dell'associazione.</param>
        <param name="binding">Oggetto <see cref="T:System.Windows.Data.BindingBase" /> che descrive l'associazione.</param>
        <summary>Crea e associa una nuova istanza di <see cref="T:System.Windows.Data.BindingExpressionBase" /> alla proprietà di destinazione del binding specificata.</summary>
        <returns>Istanza di <see cref="T:System.Windows.Data.BindingExpressionBase" /> creata per e associata alla proprietà specificata. <see cref="T:System.Windows.Data.BindingExpressionBase" /> è la classe di base di <see cref="T:System.Windows.Data.BindingExpression" />, <see cref="T:System.Windows.Data.MultiBindingExpression" /> e <see cref="T:System.Windows.Data.PriorityBindingExpression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo crea una nuova istanza di un <xref:System.Windows.Data.BindingExpressionBase> e associa l'istanza con la proprietà di dipendenza specificata dell'oggetto specificato. Questo metodo è il modo per associare un'associazione a un oggetto arbitrario <xref:System.Windows.DependencyObject> che non può esporre il proprio metodo SetBinding.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare questo metodo per impostare un'associazione. In questo esempio, `myNewBindDef` è un <xref:System.Windows.Data.Binding> oggetto che descrive l'associazione. Destinazione del binding è `myDateText`, un'istanza di <xref:System.Windows.Controls.TextBlock> classe.  
  
 [!code-csharp[BindConversion#BOSetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#bosetbinding)]
 [!code-vb[BindConversion#BOSetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#bosetbinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="binding" /> non può essere <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>