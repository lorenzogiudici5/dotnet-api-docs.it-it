<Type Name="RouteUrlExpressionBuilder" FullName="System.Web.Compilation.RouteUrlExpressionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b0262479054e8f9f8af899eecbd88dd6da966ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529215" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RouteUrlExpressionBuilder : System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RouteUrlExpressionBuilder extends System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.RouteUrlExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class RouteUrlExpressionBuilder&#xA;Inherits ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class RouteUrlExpressionBuilder : System::Web::Compilation::ExpressionBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Compilation.ExpressionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.Compilation.ExpressionEditor("System.Web.UI.Design.RouteUrlExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.Compilation.ExpressionPrefix("Routes")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Crea un URL che corrisponde ai valori dei parametri URL specificati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Compilation.RouteUrlExpressionBuilder> classe consente di impostare la proprietà di un controllo server per l'URL di una route fornendo un elenco di valori dei parametri URL.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare markup che genera un collegamento ipertestuale con un URL che viene formattato per una route. La route è definita tramite `http://www.contoso.com/search/{searchterm}` come modello di URL.  
  
```  
<asp:HyperLink ID="HyperLink1" runat="server"  
               NavigateUrl="<%$ RouteUrl:searchterm=Bicycles %>">  
  Search for Bicycles  
</asp:HyperLink>  
```  
  
 L'URL generato per questo collegamento ipertestuale sarebbe `http://www.contoso.com/search/Bicycles`.  
  
 Se i parametri dell'URL specificato per il `RouteUrl` espressione non sono sufficienti per identificare in modo univoco una route, è necessario includere il nome della route. Ad esempio, se un'applicazione Web dispone di due route con `searchterm` come unico parametro URL, le route avrebbero dovuto essere definiti tramite i nomi di route e il markup del collegamento ipertestuale sarebbe simile all'esempio seguente:  
  
```  
<asp:HyperLink ID="HyperLink1" runat="server"  
               NavigateUrl="<%$ RouteUrl:searchterm=Bicycles,  
               routename=BasicSearchRoute %>">  
  Search for Bicycles  
</asp:HyperLink>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RouteUrlExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RouteUrlExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.Compilation.RouteUrlExpressionBuilder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public override object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Non utilizzato in questa implementazione.</param>
        <param name="entry">Proprietà a cui è associata l'espressione.</param>
        <param name="parsedData">Non utilizzato in questa implementazione.</param>
        <param name="context">Proprietà per il controllo o la pagina.</param>
        <summary>Crea un URL che corrisponde ai valori dei parametri URL specificati e a un formato URL della route.</summary>
        <returns>URL che corrisponde ai valori dei parametri URL specificati e alla route selezionata. La route viene selezionata in base alla corrispondenza tra i formati URL della route e l'elenco specificato di parametri. Nel caso in cui più di una route corrisponda a un elenco specificato di parametri, è anche possibile specificare un nome di route per indicare la route da selezionare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET chiama questo metodo quando viene rilevata un'espressione nel formato seguente nel markup:  
  
 `<%$ RouteUrl: urlparameter=value %>`  
  
 Questo metodo genera l'URL appropriato per i valori di chiave di route specificati per l'oggetto corrente <xref:System.Web.Routing.Route> oggetto. Questo metodo esegue l'override di <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodo. Ottiene dal `entry` parametro un riferimento al controllo a cui è associato l'espressione, ottiene dal `context` parametro l'espressione da valutare e chiama il <xref:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl%2A> metodo per generare l'URL.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CompilationMode" />
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public override System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Proprietà a cui è associata l'espressione.</param>
        <param name="parsedData">Oggetto che rappresenta i dati analizzati restituiti da <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</param>
        <param name="context">Proprietà per il controllo o la pagina.</param>
        <summary>Restituisce un'espressione di codice utilizzata per eseguire l'assegnazione di proprietà nella classe della pagina generata.</summary>
        <returns>Istanza di <see cref="T:System.CodeDom.CodeExpression" /> utilizzata nell'assegnazione di proprietà.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato quando viene creato il modello CodeDOM per una pagina o un controllo. Il <xref:System.CodeDom.CodeExpression> oggetto restituito rappresenta l'espressione di codice da aggiungere all'assegnazione di proprietà nella classe della pagina generata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRouteUrl">
      <MemberSignature Language="C#" Value="public static string GetRouteUrl (System.Web.UI.Control control, string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRouteUrl(class System.Web.UI.Control control, string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRouteUrl(System::Web::UI::Control ^ control, System::String ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo a cui è associata l'espressione.</param>
        <param name="expression">Espressione specificata nel markup.</param>
        <summary>Crea un URL che corrisponde alle chiavi di route specificate per un formato URL della route.</summary>
        <returns>URL corrispondente al formato URL della route dell'oggetto <see cref="T:System.Web.Routing.Route" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo genera il valore appropriato per l'URL chiamando il <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> metodo il <xref:System.Web.Routing.RouteCollection> oggetto. Ottiene il <xref:System.Web.Routing.RequestContext> dall'oggetto di `control` parametro e analizza i parametri di nome e una route di route dal `expression` parametro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="control" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Il metodo non è in grado di analizzare l'espressione specificata in markup. Per ulteriori informazioni, vedere <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public override bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un'espressione può essere valutata in una pagina non compilata.</summary>
        <value>Sempre <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A> proprietà indica se il <xref:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression%2A> metodo è stato implementato nella classe e può restituire un valore per l'espressione in una pagina che non viene compilata. La <xref:System.Web.Compilation.RouteUrlExpressionBuilder> classe può valutare un'espressione in una pagina che non viene compilata. Pertanto, il <xref:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate%2A> proprietà restituisce sempre `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseRouteExpression">
      <MemberSignature Language="C#" Value="public static bool TryParseRouteExpression (string expression, System.Web.Routing.RouteValueDictionary routeValues, out string routeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseRouteExpression(string expression, class System.Web.Routing.RouteValueDictionary routeValues, [out] string&amp; routeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseRouteExpression (expression As String, routeValues As RouteValueDictionary, ByRef routeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseRouteExpression(System::String ^ expression, System::Web::Routing::RouteValueDictionary ^ routeValues, [Runtime::InteropServices::Out] System::String ^ % routeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="routeValues" Type="System.Web.Routing.RouteValueDictionary" />
        <Parameter Name="routeName" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expression">Espressione specificata nel markup.</param>
        <param name="routeValues">Insieme di chiavi di route e valori associati.</param>
        <param name="routeName">Quando termina, questo metodo contiene una stringa che rappresenta il nome della route, se <c>expression</c> contiene una chiave di route denominata <c>RouteName</c>. Questo parametro viene passato non inizializzato.</param>
        <summary>Analizza un'espressione in un insieme di valori e chiavi di route e, facoltativamente, in un nome di route.</summary>
        <returns>
          <see langword="true" /> se l’elaborazione è stata eseguita correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A> metodo rimuove iniziali e finali degli spazi dall'espressione e quindi divide in coppie chiave/valore tramite virgole come delimitatori. Se la chiave di route denominata `RouteName` viene trovato, tale valore viene passato nuovamente il `routeName` parametro e non in `routeValues`. In caso contrario, `null` viene restituito per `routeName`. Spazi iniziali e finali vengono rimossi anche dalle chiavi e valori singoli.  
  
 Il <xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression%2A> restituisce `false` se l'espressione non è composto di coppia chiave/valore almeno una che è nel formato *chiave*`=`*valore*, e che usa le virgole per separare più coppie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>