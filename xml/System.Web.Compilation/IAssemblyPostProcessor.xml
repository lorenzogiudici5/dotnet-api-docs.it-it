<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ffd3a317707e04d0b4ea7c0827b8fd6ce46fff3f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30532135" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definisce il metodo implementato da una classe per elaborare un assembly dopo che è stato compilato.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una classe che implementa questa interfaccia può accedere a un assembly dopo che è stato compilato. Il <xref:System.Web.Compilation.AssemblyBuilder> classe compila gli assembly e quindi vengono controllati per vedere se un <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaccia è stata registrata nel file di configurazione Web. In questo caso, il <xref:System.Web.Compilation.AssemblyBuilder> chiamate dell'istanza di <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> metodo per il <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaccia per eseguire qualsiasi azione dopo la compilazione e prima del caricamento dell'assembly. Ad esempio, uno strumento di profiler potrebbe implementare questa interfaccia per effettuare ricerche nell'assembly.  
  
 Quando un <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaccia è registrata, l'applicazione ASP.NET e i relativi assembly verranno sempre compilati in modalità di debug.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come creare un'implementazione del <xref:System.Web.Compilation.IAssemblyPostProcessor> di interfaccia e registrarla nel file Web. config di un'applicazione Web.  
  
 La prima parte dell'esempio di codice crea una classe denominata `Samples.Process.postProcessTest` che implementa il <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaccia. Questa classe esegue l'azione di scrittura di un file semplice quando il <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> metodo viene chiamato.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Compilare la classe in un file DLL con il comando `csc /target:library postProcessTest.cs`. Aggiungere il file DLL risultante nella cartella Bin di un'applicazione ASP.NET e registrare la DLL nel file Web. config, come illustrato nel codice seguente.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Quando un utente visita il sito Web, l'applicazione Web viene compilato in modo dinamico e il file verrà scritto in c:\compile. MyTest.txt.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Percorso dell'assembly.</param>
        <summary>Chiamato prima del caricamento dell'assembly per consentire alla classe che implementa di modificare l'assembly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Compilation.AssemblyBuilder> classe chiama questo metodo dopo avere compilato l'assembly. Eventuali azioni da eseguire prima di caricare l'assembly devono essere incluso in questo metodo.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come creare un'implementazione del <xref:System.Web.Compilation.IAssemblyPostProcessor> di interfaccia e registrarla nel file Web. config di un'applicazione Web.  
  
 La prima parte dell'esempio di codice crea una classe denominata `Samples.Process.postProcessTest` che implementa il <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaccia. Questa classe esegue l'azione di scrittura di un file semplice quando il <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> metodo viene chiamato.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Compilare la classe in un file DLL con il comando `csc /target:library postProcessTest.cs`. Aggiungere il file DLL risultante nella cartella Bin di un'applicazione ASP.NET e registrare la DLL nel file Web. config, come illustrato nel codice seguente.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Quando un utente visita il sito Web, l'applicazione Web viene compilato in modo dinamico e il file verrà scritto in c:\compile. MyTest.txt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>