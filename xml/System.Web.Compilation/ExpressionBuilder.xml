<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f729d337bfa1705e438f7ab8dbc32869e91a627" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36604252" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <TypeSignature Language="F#" Value="type ExpressionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Valuta le espressioni durante l'analisi della pagina.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Compilation.ExpressionBuilder> classe è la classe base per generatori di espressioni, ad esempio il <xref:System.Web.Compilation.AppSettingsExpressionBuilder> (classe), che creano le espressioni di codice durante l'analisi della pagina.  
  
 Generatori di espressioni le espressioni dichiarative vengono analizzate e creare codice per recuperare i valori associati a una proprietà del controllo. In scenari non richiedono la compilazione, un generatore di espressioni che supporta una funzionalità non compilazione valuta l'espressione in fase di esecuzione.  
  
 Quando il parser pagina rileva un'espressione delimitata con la stringa `<%$ %>`, crea un generatore di espressioni per l'espressione in base al prefisso nella stringa. Il prefisso è la parte della stringa a sinistra dei due punti (:). Ad esempio, quando il parser rileva la stringa `<%$ ConnectionStrings:MessageDB %>`, viene creato un <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> oggetto. I prefissi sono associati a generatori di espressioni nel file Web. config di <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> sezione.  
  
 Il lato destro dell'espressione dichiarativa viene passato al generatore di espressioni per la valutazione. Eseguire l'override di <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> per generare il codice compilato con la pagina.  
  
 Se si desidera che il generatore di espressioni personalizzato di essere attivi in pagine che non vengono compilate, è inoltre necessario sostituire il <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> per restituire un oggetto che rappresenta i risultati dell'espressione. È inoltre necessario eseguire l'override di <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> proprietà per indicare che il generatore di espressioni personalizzato supporta le pagine non richiedono la compilazione.  
  
 È possibile definire un set di proprietà e metodi per la selezione e la valutazione di un'espressione che è associata a una proprietà del controllo in fase di progettazione mediante l'implementazione di un editor di espressioni. L'editor è contrassegnato nel generatore di espressioni tramite i metadati a livello di classe. Per ulteriori informazioni, vedere <xref:System.Web.UI.Design.ExpressionEditor>.  
  
   
  
## Examples  
 Gli esempi di codice seguenti illustrano come compilare un generatore di espressioni personalizzate implementando il <xref:System.Web.Compilation.ExpressionBuilder> classe astratta. Questa implementazione di <xref:System.Web.Compilation.ExpressionBuilder> restituisce un'istruzione valutata che viene passata all'espressione. Per eseguire questo esempio, è innanzitutto necessario registrare il generatore di espressioni personalizzate nel file Web. config. Il primo esempio di codice viene illustrato come registrare il generatore di espressioni personalizzate nel file Web. config.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 Il secondo esempio di codice viene illustrato come fare riferimento all'espressione in un file con estensione aspx.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 Il terzo esempio di codice viene illustrato come sviluppare un generatore di espressioni personalizzato mediante derivazione da <xref:System.Web.Compilation.ExpressionBuilder>. Per eseguire questo esempio di codice, è necessario inserire la classe nella cartella App_Code.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Quando si eredita dal <see cref="T:System.Web.Compilation.ExpressionBuilder" /> (classe), è necessario eseguire l'override di <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> metodo.</para>
    </block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché il <xref:System.Web.Compilation.ExpressionBuilder> classe è astratta, non è possibile creare un'istanza di <xref:System.Web.Compilation.ExpressionBuilder> direttamente tramite il <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> costruttore.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si deriva dal <see cref="T:System.Web.Compilation.ExpressionBuilder" /> classe, eseguire l'override di <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> costruttore per implementare le azioni di inizializzazione personalizzati per l'implementazione di generatore di espressioni.</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.EvaluateExpression (target, entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto contenente l'espressione.</param>
        <param name="entry">Oggetto che rappresenta le informazioni relative alla proprietà associata dall'espressione.</param>
        <param name="parsedData">Oggetto contenente i dati analizzati restituiti dal metodo <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informazioni contestuali per la valutazione dell'espressione.</param>
        <summary>Quando viene eseguito l'override in una classe derivata, restituisce un oggetto che rappresenta un'espressione valutata.</summary>
        <returns>Oggetto che rappresenta l'espressione valutata; in caso contrario <see langword="null" /> se l'erede non implementa <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si desidera che il <xref:System.Web.Compilation.ExpressionBuilder> oggetto attivo su una pagina che supporta la funzionalità non richiedono la compilazione, è possibile eseguire l'override di <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> (metodo) e il <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> proprietà. Il <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodo deve restituire la valutazione dell'espressione corrente.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare sottoposto a override <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> per restituire un'espressione valutata.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se esegue l'override di <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> metodo, è necessario inoltre l'override di <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeExpression : System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; System.CodeDom.CodeExpression" Usage="expressionBuilder.GetCodeExpression (entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Oggetto che rappresenta le informazioni relative alla proprietà associata dall'espressione.</param>
        <param name="parsedData">Oggetto contenente i dati analizzati restituiti dal metodo <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Informazioni contestuali per la valutazione dell'espressione.</param>
        <summary>Quando sottoposto a override in una classe derivata, restituisce il codice utilizzato durante l'esecuzione della pagina per ottenere l'espressione valutata.</summary>
        <returns>Oggetto <see cref="T:System.CodeDom.CodeExpression" /> utilizzato per l'assegnazione della proprietà.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le classi che ereditano dal <xref:System.Web.Compilation.ExpressionBuilder> classe deve implementare il <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metodo astratto.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come restituire un <xref:System.CodeDom.CodeExpression> oggetto eseguendo l'override di <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> metodo.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si implementa un generatore di espressioni personalizzato, è necessario eseguire il cast del tipo corretto per la proprietà del controllo e restituire l'operazione di cast nel <see cref="T:System.CodeDom.CodeExpression" /> oggetto.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.ParseExpression (expression, propertyType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">Valore dell'espressione dichiarativa.</param>
        <param name="propertyType">Tipo della proprietà associata dall'espressione.</param>
        <param name="context">Informazioni contestuali per la valutazione dell'espressione.</param>
        <summary>Quando sottoposto a override in una classe derivata, restituisce un oggetto che rappresenta l'espressione analizzata.</summary>
        <returns>Oggetto <see cref="T:System.Object" /> contenente la rappresentazione analizzata dell'espressione; in caso contrario <see langword="null" /> se <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> non viene implementato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando sottoposto a override in una classe derivata, questo metodo analizza l'espressione e restituisce un oggetto che può essere utilizzato come il `parsedData` parametro in un <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> o <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsEvaluate : bool" Usage="System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, restituisce un valore che indica se l'oggetto <see cref="T:System.Web.Compilation.ExpressionBuilder" /> corrente supporta le pagine di non compilazione.</summary>
        <value>
          <see langword="true" /> se l'oggetto <see cref="T:System.Web.Compilation.ExpressionBuilder" /> supporta la valutazione di espressioni; in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore predefinito per il <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> proprietà `false`. Per supportare le pagine non richiedono la compilazione, è necessario eseguire l'override sia la <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> metodo e il <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> proprietà.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>