<Type Name="JumpTask" FullName="System.Windows.Shell.JumpTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72ea038bfacc9fec6529a315bec4aedb2ba7c98b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36464463" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class JumpTask : System.Windows.Shell.JumpItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JumpTask extends System.Windows.Shell.JumpItem" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpTask" />
  <TypeSignature Language="VB.NET" Value="Public Class JumpTask&#xA;Inherits JumpItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpTask : System::Windows::Shell::JumpItem" />
  <TypeSignature Language="F#" Value="type JumpTask = class&#xA;    inherit JumpItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Shell.JumpItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta un collegamento a un'applicazione nella Jump List della barra delle applicazioni di Windows 7.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Shell.JumpTask> può essere considerato come un collegamento a un'applicazione. Specificare il percorso del file eseguibile impostando il <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> proprietà. Se il <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> non è impostata, viene utilizzato il percorso del processo corrente in esecuzione. È possibile specificare facoltativamente <xref:System.Windows.Shell.JumpTask.Arguments%2A> da passare all'applicazione all'avvio.  
  
 È possibile impostare le proprietà di visualizzazione di base, ad esempio <xref:System.Windows.Shell.JumpTask.Title%2A>, <xref:System.Windows.Shell.JumpTask.Description%2A>, e <xref:System.Windows.Shell.JumpTask.IconResourcePath%2A> per specificare l'aspetto dell'attività nella Jump List. Un'icona utilizzata con un <xref:System.Windows.Shell.JumpTask> deve essere disponibile come risorsa nativa. Se più risorse icona sono disponibili in un file eseguibile o DLL, si specifica da utilizzare specificando un offset espresso nel <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> proprietà.  
  
 Per impostazione predefinita, un <xref:System.Windows.Shell.JumpTask> verranno inseriti nella **attività** categoria della Jump List. È possibile specificare un raggruppamento personalizzato di attività impostando la <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> proprietà.  
  
 È possibile separare visivamente gli elementi in un elenco di spostamento tramite la creazione di un <xref:System.Windows.Shell.JumpTask> che non dispone di un <xref:System.Windows.Shell.JumpTask.Title%2A> e <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> specificato. Questo vuoto <xref:System.Windows.Shell.JumpTask> sarà visualizzato come una riga orizzontale nella Jump List. In questo caso, è possibile impostare altre proprietà, ma non avranno alcun effetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un file di testo denominato `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Nell'esempio seguente viene illustrato come configurare un <xref:System.Windows.Shell.JumpTask> nel codice. Il <xref:System.Windows.Shell.JumpTask> apre l'applicazione Calculator.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Shell.JumpPath" />
    <altmember cref="T:System.Windows.Shell.JumpList" />
    <altmember cref="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
    <altmember cref="E:System.Windows.Application.Startup" />
    <altmember cref="P:System.Windows.StartupEventArgs.Args" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpTask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpTask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Shell.JumpTask" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string with get, set" Usage="System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso dell'applicazione.</summary>
        <value>Percorso dell'applicazione. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> proprietà non è specificata, quindi viene utilizzato il percorso del processo corrente in esecuzione. Un'applicazione può contenere le attività per gli eseguibili diverso da se stesso.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un file di testo denominato `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Nell'esempio seguente viene illustrato come configurare un <xref:System.Windows.Shell.JumpTask> nel codice. Il <xref:System.Windows.Shell.JumpTask> apre l'applicazione Calculator.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public string Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Arguments { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : string with get, set" Usage="System.Windows.Shell.JumpTask.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta gli argomenti passati all'applicazione all'avvio.</summary>
        <value>Argomenti passati all'applicazione all'avvio. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un file di testo denominato `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="P:System.Windows.StartupEventArgs.Args" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Windows.Shell.JumpTask.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il testo visualizzato nella descrizione comandi per l'attività nella Jump List.</summary>
        <value>Testo visualizzato nella descrizione comandi per l'attività. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un file di testo denominato `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Nell'esempio seguente viene illustrato come configurare un <xref:System.Windows.Shell.JumpTask> nel codice. Il <xref:System.Windows.Shell.JumpTask> apre l'applicazione Calculator.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconResourceIndex">
      <MemberSignature Language="C#" Value="public int IconResourceIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IconResourceIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourceIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IconResourceIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourceIndex : int with get, set" Usage="System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'indice in base zero di un'icona incorporata in una risorsa.</summary>
        <value>L'indice in base zero dell'icona o -1 se non è utilizzata alcuna icona. Il valore predefinito è 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'icona utilizzata con un <xref:System.Windows.Shell.JumpTask> deve essere disponibile come risorsa nativa. Se più icone sono disponibili in un file eseguibile o DLL, specificare quello da utilizzare specificando un offset espresso nel <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> proprietà.  
  
 Se non viene specificata alcuna risorsa icona o se l'icona specificata non viene trovato, viene visualizzata l'icona di sistema standard. Per specificare che non viene visualizzata alcuna icona, impostare il <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> proprietà su -1.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un file di testo denominato `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      </Docs>
    </Member>
    <Member MemberName="IconResourcePath">
      <MemberSignature Language="C#" Value="public string IconResourcePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IconResourcePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourcePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IconResourcePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourcePath : string with get, set" Usage="System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso di una risorsa che contiene l'icona da visualizzare nella Jump List.</summary>
        <value>Percorso di una risorsa contenente l'icona. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'icona utilizzata con un <xref:System.Windows.Shell.JumpTask> deve essere disponibile come risorsa nativa. Se più icone sono disponibili in un file eseguibile o DLL, specificare quello da utilizzare specificando un offset espresso nel <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> proprietà.  
  
 Se non viene specificata alcuna risorsa icona o se l'icona specificata non viene trovato, viene visualizzata l'icona di sistema standard. Per specificare che non viene visualizzata alcuna icona, impostare il <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> proprietà su -1.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un file di testo denominato `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Nell'esempio seguente viene illustrato come configurare un <xref:System.Windows.Shell.JumpTask> nel codice. Il <xref:System.Windows.Shell.JumpTask> apre l'applicazione Calculator.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Shell.JumpTask.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il testo visualizzato per l'attività nella Jump List.</summary>
        <value>Testo visualizzato per l'attività nella Jump List. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, il <xref:System.Windows.Shell.JumpTask.Title%2A> deve essere impostata per il <xref:System.Windows.Shell.JumpTask> siano visibili nel Jump List come attività selezionabile.  
  
 In alternativa, è possibile separare visivamente gli elementi in una Jump List, creando un <xref:System.Windows.Shell.JumpTask> che non dispone di un <xref:System.Windows.Shell.JumpTask.Title%2A> e <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> specificato. Questo vuoto <xref:System.Windows.Shell.JumpTask> sarà visualizzato come una riga orizzontale nella Jump List. In questo caso, è possibile impostare altre proprietà, ma non avranno alcun effetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un nome di file di testo `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 Nell'esempio seguente viene illustrato come configurare un <xref:System.Windows.Shell.JumpTask> nel codice. Il <xref:System.Windows.Shell.JumpTask> apre l'applicazione Calculator.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingDirectory">
      <MemberSignature Language="C#" Value="public string WorkingDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkingDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkingDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkingDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WorkingDirectory : string with get, set" Usage="System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la directory di lavoro dell'applicazione all'avvio.</summary>
        <value>Directory di lavoro dell'applicazione all'avvio. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare un <xref:System.Windows.Shell.JumpTask> nel markup. Il <xref:System.Windows.Shell.JumpTask> apre un file di testo denominato `readme.txt` nell'applicazione Blocco note.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>