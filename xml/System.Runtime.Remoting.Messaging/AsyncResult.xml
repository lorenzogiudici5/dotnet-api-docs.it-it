<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncResult.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d8dcfaa989a8bc907f295feb15394366e5aa96ac.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8dcfaa989a8bc907f295feb15394366e5aa96ac</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>Encapsulates the results of an asynchronous operation on a delegate.</source>
          <target state="translated">Incapsula i risultati di un'operazione asincrona su un delegato.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is used in conjunction with asynchronous method calls made using delegates.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe viene utilizzata in combinazione con chiamate asincrone a metodi effettuate mediante delegati.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the delegate's <ph id="ph2">`BeginInvoke`</ph> method can be cast to an <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> restituito dal delegato <ph id="ph2">`BeginInvoke`</ph> metodo può essere convertito in un <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> has the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property that holds the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> ha il <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> proprietà che contiene il delegato dell'oggetto su cui è stata richiamata la chiamata asincrona.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information about <ph id="ph1">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`BeginInvoke`</ph> e chiamate asincrone tramite delegati, vedere <bpt id="p1">[</bpt>programmazione asincrona tramite delegati<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> proprietà da ottenere un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>e come in attesa di una chiamata asincrona su un delegato.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> viene segnalato al completamento della chiamata asincrona ed è possibile attenderlo chiamando il metodo <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L'esempio è costituito da due classi, la classe che contiene il metodo viene chiamato in modo asincrono, e la classe che contiene il <ph id="ph1">`Main`</ph> metodo che effettua la chiamata.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di chiamata asincrona dei metodi tramite delegati, vedere <bpt id="p1">[</bpt>la chiamata dei metodi sincroni<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>Gets the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">Ottiene l'oggetto delegato sul quale è stata richiamata la chiamata asincrona.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">Oggetto delegato sul quale è stata richiamata la chiamata asincrona.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property can be cast to the actual class of the user-defined delegate.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> può eseguire il cast di proprietà alla classe effettiva del delegato definito dall'utente.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For example, if the delegate that was used to make the asynchronous call is of type <ph id="ph1">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id="ph2">`MyDelegate`</ph>.</source>
          <target state="translated">Ad esempio, se il delegato utilizzato per effettuare la chiamata asincrona è di tipo <ph id="ph1">`MyDelegate`</ph>, il delegato che viene restituito da questa proprietà deve essere impostato <ph id="ph2">`MyDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The callback method can then call the delegate's <ph id="ph1">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.</source>
          <target state="translated">Il metodo di callback può quindi chiamare il delegato <ph id="ph1">`EndInvoke`</ph> metodo con la firma corretta, per ottenere i risultati della chiamata al metodo asincrono.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property to get the delegate that was used to make the asynchronous call, in order to call <ph id="ph2">`EndInvoke`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> proprietà per ottenere il delegato utilizzato per effettuare la chiamata asincrona, per poter chiamare <ph id="ph2">`EndInvoke`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example casts the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, which is the only parameter of the callback method, to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> object.</source>
          <target state="translated">I cast di esempio di <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, che è l'unico parametro del metodo di callback, a un <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L'esempio è costituito da due classi, la classe che contiene il metodo viene chiamato in modo asincrono, e la classe che contiene il <ph id="ph1">`Main`</ph> metodo che effettua la chiamata.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sul funzionamento in questo esempio di callback e altri esempi di chiamate in modo asincrono da metodi tramite delegati, vedere <bpt id="p1">[</bpt>la chiamata dei metodi sincroni<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The request <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> interface.</source>
          <target state="translated">L'interfaccia <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> di richiesta.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The response <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated">L'interfaccia <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> di risposta.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated">Implementa l'interfaccia <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>No value is returned.</source>
          <target state="translated">Non vengono restituiti valori.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface is not relevant to the <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> metodo il <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interfaccia non è pertinente per il <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implementation by <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Implementazione da <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> genera un <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Instead, obtain an <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> by casting the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface returned by an asynchronous call made using a delegate.</source>
          <target state="translated">Al suo posto, ottenere un <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> eseguendo il cast di <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interfaccia restituita da una chiamata asincrona eseguita tramite un delegato.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>Gets the object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated">Ottiene l'oggetto fornito come ultimo parametro di una chiamata di metodo <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated">Oggetto fornito come ultimo parametro di una chiamata di metodo <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information about the <ph id="ph1">`BeginInvoke`</ph> method, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sul <ph id="ph1">`BeginInvoke`</ph> metodo, vedere <bpt id="p1">[</bpt>programmazione asincrona tramite delegati<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The following code example demonstrates how the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> property is used to pass information to a callback method.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato come la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> proprietà viene utilizzata per passare informazioni a un metodo di callback.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The last parameter of the <ph id="ph1">`BeginInvoke`</ph> method call is a format string, which the callback method uses to format an output message.</source>
          <target state="translated">L'ultimo parametro del <ph id="ph1">`BeginInvoke`</ph> chiamata al metodo è una stringa di formato, il metodo di callback utilizzato per formattare un messaggio di output.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L'esempio è costituito da due classi, la classe che contiene il metodo viene chiamato in modo asincrono, e la classe che contiene il <ph id="ph1">`Main`</ph> metodo che effettua la chiamata.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sul funzionamento in questo esempio di callback e altri esempi di chiamate in modo asincrono da metodi tramite delegati, vedere <bpt id="p1">[</bpt>la chiamata dei metodi sincroni<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> che incapsula handle di sincronizzazione Win32 e consente l'implementazione di vari schemi di sincronizzazione.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> che incapsula handle di sincronizzazione Win32 e consente l'implementazione di vari schemi di sincronizzazione.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> returned by this method is automatically signaled when the asynchronous operation has completed.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> restituito da questo metodo viene segnalato automaticamente quando è stata completata l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.</source>
          <target state="translated">L'handle di attesa non viene chiuso automaticamente quando si chiama <ph id="ph1">`EndInvoke`</ph> sul delegato utilizzato per eseguire il metodo asincrono di chiamata.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
          <target state="translated">Se si rilasciano tutti i riferimenti all'handle di attesa, le risorse di sistema vengono liberate quando Garbage Collection recupera l'handle di attesa.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>To free the system resources as soon as you are finished using the wait handle, call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per liberare le risorse di sistema subito dopo aver terminato di utilizzare l'handle di attesa, chiamare il <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">Garbage collection opera in modo più efficiente quando gli oggetti eliminabili chiuse o eliminati in modo esplicito.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contained in the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property can be used to block the current thread until the asynchronous call is complete.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contenuti nel <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> proprietà può essere utilizzata per bloccare il thread corrente fino al completamento della chiamata asincrona.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>However the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> will ignore the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, if one was specified during the <ph id="ph3">`BeginInvoke`</ph> call.</source>
          <target state="translated">Tuttavia il <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> ignorerà il <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, se ne è stata specificata durante la <ph id="ph3">`BeginInvoke`</ph> chiamare.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Therefore, a situation can occur where the application shuts down before the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> has finished executing, even if a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> is used to block until the asynchronous call completion.</source>
          <target state="translated">Pertanto una situazione può verificarsi in cui l'applicazione viene chiuso prima il <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> ha terminato l'esecuzione, anche se un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> viene utilizzato per bloccare fino al termine della chiamata asincrona.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For an example of such a situation, see the example for the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class, and remove the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> statement.</source>
          <target state="translated">Per un esempio di tale situazione, vedere l'esempio per il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe e rimuovere il <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> istruzione.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> proprietà da ottenere un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>e come in attesa di una chiamata asincrona su un delegato.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> viene segnalato al completamento della chiamata asincrona ed è possibile attenderlo chiamando il metodo <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L'esempio è costituito da due classi, la classe che contiene il metodo viene chiamato in modo asincrono, e la classe che contiene il <ph id="ph1">`Main`</ph> metodo che effettua la chiamata.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di chiamata asincrona dei metodi tramite delegati, vedere <bpt id="p1">[</bpt>la chiamata dei metodi sincroni<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously.</source>
          <target state="translated">Ottiene un valore che indica se la chiamata <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> è stata completata in modo sincrono.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se la chiamata <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph> è stata completata in modo sincrono; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>If it is detected that the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously in the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that called BeginInvoke is the current thread.</source>
          <target state="translated">Se è stato rilevato che il <ph id="ph1">`BeginInvoke`</ph> chiamata è stata completata in modo sincrono nel <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegato, è probabile che il thread che ha chiamato BeginInvoke è il thread corrente.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Most providers of the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface will not use the capability and will return a default <ph id="ph2">`false`</ph>.</source>
          <target state="translated">La maggior parte dei provider del <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interfaccia non utilizzerà la funzionalità e verrà restituito un valore predefinito <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">L'implementazione corrente di <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> restituisce sempre <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source>Gets or sets a value indicating whether <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>.</source>
          <target state="translated">Ottiene o imposta un valore che indica se <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph> è stato chiamato sul <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph> è stato chiamato sul <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> corrente; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>Gets the response message for the asynchronous call.</source>
          <target state="translated">Ottiene il messaggio di risposta per la chiamata asincrona.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>A remoting message that should represent a response to a method call on a remote object.</source>
          <target state="translated">Messaggio remoto che dovrebbe rappresentare la risposta a una chiamata di metodo su un oggetto remoto.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method can return an object after the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method is called.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> metodo può restituire un oggetto dopo il <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> metodo viene chiamato.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> return value can be cast to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> valore restituito può essere convertito in un <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>However, you do not need to call either of these methods directly.</source>
          <target state="translated">Tuttavia, non è necessario chiamare uno di questi metodi direttamente.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>They are intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">Essi devono essere utilizzati dall'infrastruttura di comunicazione remota di .NET Framework.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Gets a value indicating whether the server has completed the call.</source>
          <target state="translated">Ottiene un valore che indica se il server ha completato la chiamata.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> after the server has completed the call; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> dopo che il server ha completato la chiamata; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Il server non deve utilizzare le risorse fornite dal client di fuori di concordata semantica di condivisione dopo avere impostato la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> proprietà <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Thus, it is safe for the client to destroy the resources after the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Pertanto, è opportuno che il client eliminare le risorse dopo il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> restituisce proprietà <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> returned by <ph id="ph3">`BeginInvoke`</ph> to discover when an asynchronous call completes.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> proprietà del <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> restituito da <ph id="ph3">`BeginInvoke`</ph> per rilevare quando viene completata una chiamata asincrona.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>You might do this when making the asynchronous call from a thread that services the user interface.</source>
          <target state="translated">Questa operazione può essere eseguita quando si effettua la chiamata asincrona da un thread che serve l'interfaccia utente.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">Il polling del completamento consente al thread chiamante di continuare l'esecuzione mentre viene eseguita la chiamata asincrona su un thread <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L'esempio è costituito da due classi, la classe che contiene il metodo viene chiamato in modo asincrono, e la classe che contiene il <ph id="ph1">`Main`</ph> metodo che effettua la chiamata.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di chiamata asincrona dei metodi tramite delegati, vedere <bpt id="p1">[</bpt>la chiamata dei metodi sincroni<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>Gets the next message sink in the sink chain.</source>
          <target state="translated">Ottiene il successivo sink di messaggi nella catena di sink.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface that represents the next message sink in the sink chain.</source>
          <target state="translated">Interfaccia <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> che rappresenta il sink di messaggi successivo nella catena di sink.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>The current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">L'implementazione corrente di <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> per la chiamata di metodo remoto corrente.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>Sets an <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</source>
          <target state="translated">Imposta un oggetto <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> per la chiamata corrente al metodo remoto, che consente di controllare i messaggi asincroni dopo il loro invio.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>You do not need to call the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> method.</source>
          <target state="translated">Non è necessario chiamare il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>A response message to a method call on a remote object.</source>
          <target state="translated">Messaggio di risposta a una chiamata di metodo su un oggetto remoto.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Synchronously processes a response message returned by a method call on a remote object.</source>
          <target state="translated">Elabora in modo sincrono il messaggio di risposta restituito da una chiamata di metodo su un oggetto remoto.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> metodo implementa il <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interfaccia.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>You do not need to call this method directly.</source>
          <target state="translated">Non è necessario chiamare questo metodo direttamente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It is intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">Serve per l'utilizzo dall'infrastruttura di comunicazione remota di .NET Framework.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> invokes the consumer code's <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> richiama il codice consumer <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegato.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It also sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> instance returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method.</source>
          <target state="translated">Imposta inoltre il <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> istanza restituita dal <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>If the <ph id="ph1">`msg`</ph> parameter is of type <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, the same object is returned by <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</source>
          <target state="translated">Se il <ph id="ph1">`msg`</ph> parametro è di tipo <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, viene restituito lo stesso oggetto da <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Otherwise, a reply message that contains a remoting exception is returned.</source>
          <target state="translated">In caso contrario, viene restituito un messaggio di risposta che contiene un'eccezione remota.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> also modifies the value returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> Consente di modificare anche il valore restituito dal <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> proprietà.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>